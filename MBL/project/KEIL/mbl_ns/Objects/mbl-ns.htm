<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\mbl_ns\Objects\mbl-ns.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\mbl_ns\Objects\mbl-ns.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sun Feb 23 17:34:42 2025
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; boot_image_find &rArr; sys_img_flag_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4a]">CAU_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[49]">DCI_IRHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[16]">DMA0_Channel0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[17]">DMA0_Channel1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[18]">DMA0_Channel2_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[19]">DMA0_Channel3_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel4_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel5_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel6_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel7_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[40]">DMA1_Channel2_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[41]">DMA1_Channel3_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[42]">DMA1_Channel4_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[43]">DMA1_Channel5_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[44]">DMA1_Channel6_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[45]">DMA1_Channel7_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[52]">EFUSE_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[33]">EXTI10_15_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[22]">EXTI5_9_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[f]">FMC_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[58]">FMC_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4c]">FPU_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4b]">HAU_TRNG_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4d]">HPDF_INT0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4e]">HPDF_INT1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2b]">I2C0_ER_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2a]">I2C0_EV_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3a]">I2C0_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[56]">ICACHE_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[c]">LVD_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[54]">PKCAU_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[35]">PVM_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[53]">QSPI_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[59]">QSPI_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[10]">RCU_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[21]">RTC_Alarm_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[38]">SDIO_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2e]">SPI0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from mbl_system_gdm32.o(.text.SystemInit) referenced from mbl_startup_gdm32.o(.text)
 <LI><a href="#[d]">TAMPER_STAMP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[1f]">TAMP_STAMP_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[23]">TIMER0_BRK_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[25]">TIMER0_CMT_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[26]">TIMER0_Channel_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[24]">TIMER0_UP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[36]">TIMER15_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[37]">TIMER16_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[27]">TIMER1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[28]">TIMER2_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[39]">TIMER4_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3d]">TIMER5_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[55]">TSI_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[57]">TZIAC_S_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[30]">USART0_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3b]">USART0_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[3c]">USART2_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[47]">USBFS_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[48]">USBFS_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[51]">WLAN_Cmn_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[4f]">WLAN_Rx_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[50]">WLAN_Tx_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[46]">WLAN_WKUP_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[b]">WWDGT_IRQHandler</a> from mbl_startup_gdm32.o(.text) referenced from mbl_startup_gdm32.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from mbl_startup_gdm32.o(.text)
 <LI><a href="#[6a]">flash_erase</a> from mbl_flash.o(.text.flash_erase) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[69]">flash_fast_write</a> from mbl_flash.o(.text.flash_fast_write) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[67]">flash_indirect_read</a> from mbl_flash.o(.text.flash_indirect_read) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[68]">flash_verify_read</a> from mbl_flash.o(.text.flash_verify_read) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[5a]">main</a> from mbl_ns.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[61]">sys_err_process_set</a> from mbl_sys.o(.text.sys_err_process_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[65]">sys_fw_version_set</a> from mbl_sys.o(.text.sys_fw_version_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[63]">sys_img_flag_set</a> from mbl_sys.o(.text.sys_img_flag_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[64]">sys_running_img_set</a> from mbl_sys.o(.text.sys_running_img_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[5e]">sys_status_dump</a> from mbl_sys.o(.text.sys_status_dump) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[5f]">sys_status_get</a> from mbl_sys.o(.text.sys_status_get) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[60]">sys_status_set</a> from mbl_sys.o(.text.sys_status_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[5d]">sys_status_show</a> from mbl_sys.o(.text.sys_status_show) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[62]">sys_trace_level_set</a> from mbl_sys.o(.text.sys_trace_level_set) referenced from mbl_api.o(.rodata.mbl_api)
 <LI><a href="#[66]">sys_trng_seed_set</a> from mbl_sys.o(.text.sys_trng_seed_set) referenced from mbl_api.o(.rodata.mbl_api)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[6b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ba]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DCI_IRHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EFUSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FMC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>HAU_TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>HPDF_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HPDF_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PKCAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QSPI_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_Alarm_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TZIAC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WLAN_Cmn_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WLAN_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WLAN_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>WLAN_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbl_startup_gdm32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, mbl_system_gdm32.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; system_clock_180m_40m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_180m_40m_hxtal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_startup_gdm32.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>boot_image_find</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mbl_image.o(.text.boot_image_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = boot_image_find &rArr; sys_img_flag_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_img_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>checksum_cal</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mbl_image.o(.text.checksum_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = checksum_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
</UL>

<P><STRONG><a name="[7a]"></a>co_printf</STRONG> (Thumb, 1144 bytes, Stack size 88 bytes, mbl_trace.o(.text.co_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = co_printf &rArr; printi &rArr; prints &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>

<P><STRONG><a name="[6a]"></a>flash_erase</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, mbl_flash.o(.text.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = flash_erase &rArr; qspi_flash_sector_erase &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_sector_erase (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[69]"></a>flash_fast_write</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, mbl_flash.o(.text.flash_fast_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = flash_fast_write &rArr; flash_write &rArr; qspi_flash_page_program &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_page_program (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_continuous_program
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[67]"></a>flash_indirect_read</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, mbl_flash.o(.text.flash_indirect_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[89]"></a>flash_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbl_flash.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = flash_init &rArr; qspi_flash_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>flash_nodec_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mbl_flash.o(.text.flash_nodec_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_nodec_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_unlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_lock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_no_rtdec_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
</UL>

<P><STRONG><a name="[8f]"></a>flash_offset_mapping</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mbl_flash.o(.text.flash_offset_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_offset_mapping
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_unlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_lock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_offset_value_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_offset_region_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>flash_read</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, mbl_flash.o(.text.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>flash_verify_read</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, mbl_flash.o(.text.flash_verify_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = flash_verify_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_unlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_lock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_offset_value_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[84]"></a>flash_write</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, mbl_flash.o(.text.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = flash_write &rArr; qspi_flash_page_program &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_page_program (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write
</UL>

<P><STRONG><a name="[85]"></a>fmc_continuous_program</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, gd32w51x_fmc.o(.text.fmc_continuous_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_continuous_program
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write
</UL>

<P><STRONG><a name="[80]"></a>fmc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[82]"></a>fmc_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[8d]"></a>fmc_no_rtdec_config</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_no_rtdec_config))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
</UL>

<P><STRONG><a name="[90]"></a>fmc_offset_region_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_offset_region_config))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
</UL>

<P><STRONG><a name="[91]"></a>fmc_offset_value_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_offset_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
</UL>

<P><STRONG><a name="[81]"></a>fmc_page_erase</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[7f]"></a>fmc_unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[93]"></a>fmc_word_program</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_word_program))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[a6]"></a>gpio_af_set</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, gd32w51x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>gpio_mode_set</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, gd32w51x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>gpio_output_options_set</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, gd32w51x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config (via Veneer)
</UL>

<P><STRONG><a name="[86]"></a>icache_disable</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, gd32w51x_icache.o(.text.icache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = icache_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>

<P><STRONG><a name="[72]"></a>icache_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32w51x_icache.o(.text.icache_enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9a]"></a>is_valid_flash_addr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mbl_flash.o(.text.is_valid_flash_addr))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>log_uart_idle_wait</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbl_uart.o(.text.log_uart_idle_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = log_uart_idle_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>log_uart_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mbl_uart.o(.text.log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_uart_init &rArr; uart_config &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, mbl_ns.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; boot_image_find &rArr; sys_img_flag_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_img_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_idle_wait
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_img_flag_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_image_find
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_addr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8e]"></a>ob_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.ob_lock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
</UL>

<P><STRONG><a name="[8c]"></a>ob_unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.ob_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_offset_mapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
</UL>

<P><STRONG><a name="[7d]"></a>prints</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, mbl_trace.o(.text.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prints &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>

<P><STRONG><a name="[ae]"></a>rcu_clock_freq_get</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, gd32w51x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[a2]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[af]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[61]"></a>sys_err_process_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mbl_sys.o(.text.sys_err_process_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_err_process_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[65]"></a>sys_fw_version_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mbl_sys.o(.text.sys_fw_version_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_fw_version_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[63]"></a>sys_img_flag_set</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mbl_sys.o(.text.sys_img_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sys_img_flag_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_image_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[64]"></a>sys_running_img_set</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mbl_sys.o(.text.sys_running_img_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_running_img_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[9c]"></a>sys_statu_integritys_check</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, mbl_sys.o(.text.sys_statu_integritys_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sys_statu_integritys_check &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_cal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
</UL>

<P><STRONG><a name="[99]"></a>sys_status_check</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, mbl_sys.o(.text.sys_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sys_status_check &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nodec_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>sys_status_dump</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, mbl_sys.o(.text.sys_status_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sys_status_dump &rArr; co_printf &rArr; printi &rArr; prints &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[5f]"></a>sys_status_get</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, mbl_sys.o(.text.sys_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_status_get &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_fw_version_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_img_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_img_flag_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_image_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[a3]"></a>sys_status_init</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, mbl_sys.o(.text.sys_status_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_status_init &rArr; flash_write &rArr; qspi_flash_page_program &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
</UL>

<P><STRONG><a name="[60]"></a>sys_status_set</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, mbl_sys.o(.text.sys_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_status_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[5d]"></a>sys_status_show</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, mbl_sys.o(.text.sys_status_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sys_status_show &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[62]"></a>sys_trace_level_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mbl_sys.o(.text.sys_trace_level_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_trace_level_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[66]"></a>sys_trng_seed_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbl_sys.o(.text.sys_trng_seed_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sys_trng_seed_set &rArr; sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbl_api.o(.rodata.mbl_api)
</UL>
<P><STRONG><a name="[71]"></a>system_clock_180m_40m_hxtal</STRONG> (Thumb, 288 bytes, Stack size 4 bytes, mbl_system_gdm32.o(.text.system_clock_180m_40m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_clock_180m_40m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[97]"></a>uart_config</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, mbl_uart.o(.text.uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_config &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[7b]"></a>uart_putc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mbl_uart.o(.text.uart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>

<P><STRONG><a name="[aa]"></a>usart_baudrate_set</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gd32w51x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[ad]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[a9]"></a>usart_deinit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gd32w51x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[ac]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[95]"></a>usart_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_idle_wait
</UL>

<P><STRONG><a name="[ab]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a5]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
</UL>

<P><STRONG><a name="[77]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>mbedtls_aes_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get (via Veneer)
</UL>

<P><STRONG><a name="[75]"></a>mbedtls_aes_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get (via Veneer)
</UL>

<P><STRONG><a name="[76]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get (via Veneer)
</UL>

<P><STRONG><a name="[a4]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>mbedtls_calloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get (via Veneer)
</UL>

<P><STRONG><a name="[a0]"></a>mbedtls_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>mbedtls_md5_ret</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_init (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get (via Veneer)
</UL>

<P><STRONG><a name="[a1]"></a>mbedtls_memory_buffer_alloc_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>qspi_autopolling</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gd32w51x_qspi.o(.text.qspi_autopolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_sector_erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_page_program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config
</UL>

<P><STRONG><a name="[b3]"></a>qspi_command</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gd32w51x_qspi.o(.text.qspi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_sector_erase
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_page_program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config
</UL>

<P><STRONG><a name="[8a]"></a>qspi_flash_config</STRONG> (Thumb, 524 bytes, Stack size 192 bytes, mbl_qspi_flash.o(.text.qspi_flash_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qspi_flash_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_transmit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_receive
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init (via Veneer)
</UL>

<P><STRONG><a name="[83]"></a>qspi_flash_page_program</STRONG> (Thumb, 214 bytes, Stack size 160 bytes, mbl_qspi_flash.o(.text.qspi_flash_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = qspi_flash_page_program &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_transmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_write (via Veneer)
</UL>

<P><STRONG><a name="[87]"></a>qspi_flash_read</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, mbl_qspi_flash.o(.text.qspi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_verify_read (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read (via Veneer)
</UL>

<P><STRONG><a name="[7e]"></a>qspi_flash_sector_erase</STRONG> (Thumb, 196 bytes, Stack size 160 bytes, mbl_qspi_flash.o(.text.qspi_flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = qspi_flash_sector_erase &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
</UL>

<P><STRONG><a name="[b4]"></a>qspi_init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, gd32w51x_qspi.o(.text.qspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config
</UL>

<P><STRONG><a name="[b5]"></a>qspi_receive</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, gd32w51x_qspi.o(.text.qspi_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config
</UL>

<P><STRONG><a name="[b6]"></a>qspi_transmit</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, gd32w51x_qspi.o(.text.qspi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_page_program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_config
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>active_header_get</STRONG> (Thumb, 380 bytes, Stack size 128 bytes, mbl_sys.o(.text.active_header_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>

<P><STRONG><a name="[9e]"></a>sys_status_crypt</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, mbl_sys.o(.text.sys_status_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_status_crypt
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_show
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_dump
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_statu_integritys_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_internal_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_get
</UL>

<P><STRONG><a name="[9b]"></a>sys_status_internal_set</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, mbl_sys.o(.text.sys_status_internal_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sys_status_internal_set &rArr; active_header_get &rArr; flash_indirect_read &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_crypt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_header_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_cal
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_indirect_read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trng_seed_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trace_level_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_fw_version_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_err_process_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_status_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_img_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_img_flag_set
</UL>

<P><STRONG><a name="[7c]"></a>printi</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, mbl_trace.o(.text.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = printi &rArr; prints &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>

<P><STRONG><a name="[b2]"></a>qspi_config</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, gd32w51x_qspi.o(.text.qspi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
