<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\wifi_iot\Freertos\nspe.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\wifi_iot\Freertos\nspe.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sun Mar  2 13:49:55 2025
<BR><P>
<H3>Maximum Stack Usage =       3456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
wifi_softap_entry &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[28a]">CPU_SR_Save</a>
 <LI><a href="#[28b]">CPU_SR_Restore</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SecureFault_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[441]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28c]">lwip_send</a><BR>
 <LI><a href="#[478]">print_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[478]">print_value</a><BR>
 <LI><a href="#[225]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[225]">cJSON_Delete</a><BR>
 <LI><a href="#[1]">kernel_idle_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">kernel_idle_thread</a><BR>
 <LI><a href="#[0]">kernel_schedule_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[0]">kernel_schedule_thread</a><BR>
 <LI><a href="#[422]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[422]">netconn_drain</a><BR>
 <LI><a href="#[792]">wlan_set_80211_disassociate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6fd]">wlan_disconnect_indicate</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from gd32_it.o(.text.BusFault_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4c]">CAU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4b]">DCI_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel6_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel7_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[45]">DMA1_Channel5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[46]">DMA1_Channel6_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[47]">DMA1_Channel7_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from gd32_it.o(.text.DebugMon_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[54]">EFUSE_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[35]">EXTI10_15_IRQHandler</a> from gd32_it.o(.text.EXTI10_15_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[24]">EXTI5_9_IRQHandler</a> from gd32_it.o(.text.EXTI5_9_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[11]">FMC_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5a]">FMC_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4d]">HAU_TRNG_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4f]">HPDF_INT0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[50]">HPDF_INT1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2d]">I2C0_ER_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2c]">I2C0_EV_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3c]">I2C0_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[58]">ICACHE_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[e]">LVD_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from gd32_it.o(.text.MemManage_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from gd32_it.o(.text.NMI_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[56]">PKCAU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from k_port_keil_ac6.o(.text.PendSV_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[55]">QSPI_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5b]">QSPI_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[12]">RCU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[23]">RTC_Alarm_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from gd32_it.o(.text.RTC_WKUP_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3a]">SDIO_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[30]">SPI0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from k_port_keil_ac6.o(.text.SVC_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[8]">SecureFault_Handler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from k_port_common.o(.text.SysTick_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_gd32w51x.o(.text.SystemInit) referenced from startup_gd32w51x.o(.text)
 <LI><a href="#[f]">TAMPER_STAMP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[21]">TAMPER_STAMP_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[25]">TIMER0_BRK_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[27]">TIMER0_CMT_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[28]">TIMER0_Channel_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[26]">TIMER0_UP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[38]">TIMER15_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[39]">TIMER16_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[29]">TIMER1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2a]">TIMER2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2b]">TIMER3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3b]">TIMER4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3f]">TIMER5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[57]">TSI_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[59]">TZIAC_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[a8]">UDP_Receive</a> from dhcpd.o(.text.UDP_Receive) referenced 2 times from dhcpd.o(.text.dhcpd_daemon)
 <LI><a href="#[32]">USART0_IRQHandler</a> from gd32_it.o(.text.USART0_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3d]">USART0_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from gd32_it.o(.text.USART1_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from gd32_it.o(.text.USART2_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3e]">USART2_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[49]">USBFS_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4a]">USBFS_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from gd32_it.o(.text.UsageFault_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[37]">VLVDF_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[53]">WLAN_Cmn_IRQHandler</a> from gd32_it.o(.text.WLAN_Cmn_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[51]">WLAN_Rx_IRQHandler</a> from gd32_it.o(.text.WLAN_Rx_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[52]">WLAN_Tx_IRQHandler</a> from gd32_it.o(.text.WLAN_Tx_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[48]">WLAN_WKUP_IRQHandler</a> from gd32_it.o(.text.WLAN_WKUP_IRQHandler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[d]">WWDGT_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32w51x.o(.text)
 <LI><a href="#[cb]">_impl_thread_entry</a> from sched_thread.o(.text._impl_thread_entry) referenced 2 times from k_port_common.o(.text.port_stack_frame_init)
 <LI><a href="#[7b]">_kernel_start_privilege_routine</a> from sched_kernel.o(.text._kernel_start_privilege_routine) referenced 2 times from sched_kernel.o(.text._impl_kernel_at_rtos_run)
 <LI><a href="#[7c]">_mutex_delete_privilege_routine</a> from sync_mutex.o(.text._mutex_delete_privilege_routine) referenced 2 times from sync_mutex.o(.text._impl_mutex_delete)
 <LI><a href="#[7d]">_mutex_init_privilege_routine</a> from sync_mutex.o(.text._mutex_init_privilege_routine) referenced 2 times from sync_mutex.o(.text._impl_mutex_init)
 <LI><a href="#[7e]">_mutex_lock_privilege_routine</a> from sync_mutex.o(.text._mutex_lock_privilege_routine) referenced 2 times from sync_mutex.o(.text._impl_mutex_lock)
 <LI><a href="#[7f]">_mutex_unlock_privilege_routine</a> from sync_mutex.o(.text._mutex_unlock_privilege_routine) referenced 2 times from sync_mutex.o(.text._impl_mutex_unlock)
 <LI><a href="#[80]">_queue_delete_privilege_routine</a> from msg_queue.o(.text._queue_delete_privilege_routine) referenced 2 times from msg_queue.o(.text._impl_queue_delete)
 <LI><a href="#[81]">_queue_init_privilege_routine</a> from msg_queue.o(.text._queue_init_privilege_routine) referenced 2 times from msg_queue.o(.text._impl_queue_init)
 <LI><a href="#[82]">_queue_msg_num_get_privilege_routine</a> from msg_queue.o(.text._queue_msg_num_get_privilege_routine) referenced 2 times from msg_queue.o(.text._impl_queue_num_probe)
 <LI><a href="#[83]">_queue_receive_privilege_routine</a> from msg_queue.o(.text._queue_receive_privilege_routine) referenced 2 times from msg_queue.o(.text._impl_queue_receive)
 <LI><a href="#[98]">_queue_schedule</a> from msg_queue.o(.text._queue_schedule) referenced 4 times from msg_queue.o(.text._queue_delete_privilege_routine)
 <LI><a href="#[98]">_queue_schedule</a> from msg_queue.o(.text._queue_schedule) referenced 2 times from msg_queue.o(.text._queue_receive_privilege_routine)
 <LI><a href="#[98]">_queue_schedule</a> from msg_queue.o(.text._queue_schedule) referenced 2 times from msg_queue.o(.text._queue_send_privilege_routine)
 <LI><a href="#[84]">_queue_send_privilege_routine</a> from msg_queue.o(.text._queue_send_privilege_routine) referenced 2 times from msg_queue.o(.text._impl_queue_send)
 <LI><a href="#[77]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[78]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[af]">_schedule_priority_node_order_compare_condition</a> from sched_kernel.o(.text._schedule_priority_node_order_compare_condition) referenced 4 times from sched_kernel.o(.text.kernel_scheduler_inPendSV_c)
 <LI><a href="#[af]">_schedule_priority_node_order_compare_condition</a> from sched_kernel.o(.text._schedule_priority_node_order_compare_condition) referenced 4 times from sched_kernel.o(.text.schedule_exit_trigger)
 <LI><a href="#[af]">_schedule_priority_node_order_compare_condition</a> from sched_kernel.o(.text._schedule_priority_node_order_compare_condition) referenced 2 times from sched_kernel.o(.text.schedule_setPend)
 <LI><a href="#[85]">_semaphore_delete_privilege_routine</a> from sync_semaphore.o(.text._semaphore_delete_privilege_routine) referenced 2 times from sync_semaphore.o(.text._impl_semaphore_delete)
 <LI><a href="#[86]">_semaphore_give_privilege_routine</a> from sync_semaphore.o(.text._semaphore_give_privilege_routine) referenced 2 times from sync_semaphore.o(.text._impl_semaphore_give)
 <LI><a href="#[87]">_semaphore_init_privilege_routine</a> from sync_semaphore.o(.text._semaphore_init_privilege_routine) referenced 2 times from sync_semaphore.o(.text._impl_semaphore_init)
 <LI><a href="#[99]">_semaphore_schedule</a> from sync_semaphore.o(.text._semaphore_schedule) referenced 2 times from sync_semaphore.o(.text._semaphore_delete_privilege_routine)
 <LI><a href="#[99]">_semaphore_schedule</a> from sync_semaphore.o(.text._semaphore_schedule) referenced 2 times from sync_semaphore.o(.text._semaphore_give_privilege_routine)
 <LI><a href="#[88]">_semaphore_take_privilege_routine</a> from sync_semaphore.o(.text._semaphore_take_privilege_routine) referenced 2 times from sync_semaphore.o(.text._impl_semaphore_take)
 <LI><a href="#[76]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[eb]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[eb]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[ec]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d6]">_sys_timer_callback</a> from wrapper_os.o(.text._sys_timer_callback) referenced 2 times from wrapper_os.o(.text.sys_timer_init)
 <LI><a href="#[89]">_system_busy_wait_privilege_routine</a> from sched_timer.o(.text._system_busy_wait_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_system_busy_wait)
 <LI><a href="#[8a]">_thread_delete_privilege_routine</a> from sched_thread.o(.text._thread_delete_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_delete)
 <LI><a href="#[8a]">_thread_delete_privilege_routine</a> from sched_thread.o(.text._thread_delete_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_entry)
 <LI><a href="#[8b]">_thread_init_privilege_routine</a> from sched_thread.o(.text._thread_init_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_init)
 <LI><a href="#[8c]">_thread_name_toId_privilege_routine</a> from sched_thread.o(.text._thread_name_toId_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_name_toId)
 <LI><a href="#[8d]">_thread_sleep_privilege_routine</a> from sched_thread.o(.text._thread_sleep_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_sleep)
 <LI><a href="#[8e]">_thread_stack_free_get_privilege_routine</a> from sched_thread.o(.text._thread_stack_free_get_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_stack_free_size_get)
 <LI><a href="#[90]">_thread_user_data_get_privilege_routine</a> from sched_thread.o(.text._thread_user_data_get_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_user_data_get)
 <LI><a href="#[91]">_thread_user_data_register_privilege_routine</a> from sched_thread.o(.text._thread_user_data_register_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_user_data_register)
 <LI><a href="#[92]">_thread_yield_privilege_routine</a> from sched_thread.o(.text._thread_yield_privilege_routine) referenced 2 times from sched_thread.o(.text._impl_thread_yield)
 <LI><a href="#[de]">_timeout_node_order_compare_condition</a> from sched_timer.o(.text._timeout_node_order_compare_condition) referenced 2 times from sched_timer.o(.text.timeout_set)
 <LI><a href="#[de]">_timeout_node_order_compare_condition</a> from sched_timer.o(.text._timeout_node_order_compare_condition) referenced 2 times from sched_timer.o(.text.timer_callback_fromTimeOut)
 <LI><a href="#[93]">_timer_delete_privilege_routine</a> from sched_timer.o(.text._timer_delete_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_timer_delete)
 <LI><a href="#[94]">_timer_init_privilege_routine</a> from sched_timer.o(.text._timer_init_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_timer_init)
 <LI><a href="#[dd]">_timer_schedule_request_privilege_routine</a> from sched_timer.o(.text._timer_schedule_request_privilege_routine) referenced 2 times from sched_timer.o(.text.timeout_handler)
 <LI><a href="#[dd]">_timer_schedule_request_privilege_routine</a> from sched_timer.o(.text._timer_schedule_request_privilege_routine) referenced 2 times from sched_timer.o(.text.timeout_remove)
 <LI><a href="#[dd]">_timer_schedule_request_privilege_routine</a> from sched_timer.o(.text._timer_schedule_request_privilege_routine) referenced 2 times from sched_timer.o(.text.timeout_set)
 <LI><a href="#[dd]">_timer_schedule_request_privilege_routine</a> from sched_timer.o(.text._timer_schedule_request_privilege_routine) referenced 2 times from sched_timer.o(.text.timer_schedule)
 <LI><a href="#[95]">_timer_start_privilege_routine</a> from sched_timer.o(.text._timer_start_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_timer_start)
 <LI><a href="#[96]">_timer_stop_privilege_routine</a> from sched_timer.o(.text._timer_stop_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_timer_stop)
 <LI><a href="#[97]">_timer_total_system_ms_get_privilege_routine</a> from sched_timer.o(.text._timer_total_system_ms_get_privilege_routine) referenced 2 times from sched_timer.o(.text._impl_timer_total_system_ms_get)
 <LI><a href="#[97]">_timer_total_system_ms_get_privilege_routine</a> from sched_timer.o(.text._timer_total_system_ms_get_privilege_routine) referenced 2 times from sched_timer.o(.text.timer_total_system_ms_get)
 <LI><a href="#[b4]">accept_function</a> from api_msg.o(.text.accept_function) referenced 2 times from api_msg.o(.text.lwip_netconn_do_listen)
 <LI><a href="#[72]">client_omit_timer_proc</a> from iperf_client_api.o(.text) referenced from iperf_client_api.o(.text)
 <LI><a href="#[71]">client_reporter_timer_proc</a> from iperf_client_api.o(.text) referenced from iperf_client_api.o(.text)
 <LI><a href="#[70]">client_stats_timer_proc</a> from iperf_client_api.o(.text) referenced from iperf_client_api.o(.text)
 <LI><a href="#[1d6]">cmd_bw_set</a> from cmd_shell.o(.text.cmd_bw_set) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[a4]">cmd_cb_scan_done</a> from cmd_shell.o(.text.cmd_cb_scan_done) referenced 2 times from cmd_shell.o(.text.cmd_wifi_scan)
 <LI><a href="#[a5]">cmd_cb_scan_fail</a> from cmd_shell.o(.text.cmd_cb_scan_fail) referenced 2 times from cmd_shell.o(.text.cmd_wifi_scan)
 <LI><a href="#[1d7]">cmd_exit</a> from cmd_shell.o(.text.cmd_exit) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d3]">cmd_group_join</a> from cmd_shell.o(.text.cmd_group_join) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d9]">cmd_help</a> from cmd_shell.o(.text.cmd_help) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d4]">cmd_iperf2</a> from cmd_shell.o(.text.cmd_iperf2) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d5]">cmd_iperf3</a> from iperf3_main.o(.text.cmd_iperf3) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d0]">cmd_mem_status</a> from cmd_shell.o(.text.cmd_mem_status) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d1]">cmd_ping</a> from ping.o(.text.cmd_ping) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d2]">cmd_read_memory</a> from cmd_shell.o(.text.cmd_read_memory) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1d8]">cmd_reboot</a> from cmd_shell.o(.text.cmd_reboot) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1cd]">cmd_wifi_ap</a> from cmd_shell.o(.text.cmd_wifi_ap) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1ce]">cmd_wifi_ap_adv</a> from cmd_shell.o(.text.cmd_wifi_ap_adv) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1cf]">cmd_wifi_ap_stop</a> from cmd_shell.o(.text.cmd_wifi_ap_stop) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1ca]">cmd_wifi_channel_set</a> from cmd_shell.o(.text.cmd_wifi_channel_set) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c3]">cmd_wifi_close</a> from cmd_shell.o(.text.cmd_wifi_close) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c6]">cmd_wifi_connect</a> from cmd_shell.o(.text.cmd_wifi_connect) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c7]">cmd_wifi_disconnect</a> from cmd_shell.o(.text.cmd_wifi_disconnect) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c5]">cmd_wifi_ip_set</a> from cmd_shell.o(.text.cmd_wifi_ip_set) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1cb]">cmd_wifi_mac_addr</a> from cmd_shell.o(.text.cmd_wifi_mac_addr) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c2]">cmd_wifi_open</a> from cmd_shell.o(.text.cmd_wifi_open) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1cc]">cmd_wifi_ps</a> from cmd_shell.o(.text.cmd_wifi_ps) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c9]">cmd_wifi_rssi</a> from cmd_shell.o(.text.cmd_wifi_rssi) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c4]">cmd_wifi_scan</a> from cmd_shell.o(.text.cmd_wifi_scan) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[1c8]">cmd_wifi_status</a> from cmd_shell.o(.text.cmd_wifi_status) referenced from cmd_shell.o(.rodata.cmd_table)
 <LI><a href="#[a6]">console_task</a> from console.o(.text.console_task) referenced 2 times from console.o(.text.console_init)
 <LI><a href="#[ed]">crypto_rand</a> from wpas_crypto.o(i.crypto_rand) referenced from wpas_crypto.o(i.crypto_ec_point_mul)
 <LI><a href="#[1de]">dhcp_coarse_tmr</a> from dhcp.o(.text.dhcp_coarse_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[1df]">dhcp_fine_tmr</a> from dhcp.o(.text.dhcp_fine_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[a7]">dhcp_recv</a> from dhcp.o(.text.dhcp_recv) referenced 2 times from dhcp.o(.text.dhcp_inc_pcb_refcount)
 <LI><a href="#[e8]">dhcp_start</a> from dhcp.o(.text.dhcp_start) referenced 2 times from wifi_netif.o(.text.wifi_netif_start_dhcp)
 <LI><a href="#[e3]">dhcp_stop</a> from dhcp.o(.text.dhcp_stop) referenced 2 times from wifi_netif.o(.text.wifi_netif_close)
 <LI><a href="#[e3]">dhcp_stop</a> from dhcp.o(.text.dhcp_stop) referenced 2 times from wifi_netif.o(.text.wifi_netif_stop_dhcp)
 <LI><a href="#[a9]">dns_recv</a> from dns.o(.text.dns_recv) referenced 2 times from dns.o(.text.dns_gethostbyname_addrtype)
 <LI><a href="#[1e1]">dns_tmr</a> from dns.o(.text.dns_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[12f]">do_nothing</a> from wlan_mgmt_engine.o(i.do_nothing) referenced 12 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[9e]">err_tcp</a> from api_msg.o(.text.err_tcp) referenced 2 times from api_msg.o(.text.accept_function)
 <LI><a href="#[9e]">err_tcp</a> from api_msg.o(.text.err_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_close_internal)
 <LI><a href="#[9e]">err_tcp</a> from api_msg.o(.text.err_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connect)
 <LI><a href="#[9e]">err_tcp</a> from api_msg.o(.text.err_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connected)
 <LI><a href="#[9e]">err_tcp</a> from api_msg.o(.text.err_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[aa]">etharp_output</a> from etharp.o(.text.etharp_output) referenced 2 times from ethernetif.o(.text.ethernetif_init)
 <LI><a href="#[1dd]">etharp_tmr</a> from etharp.o(.text.etharp_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[db]">ethernet_input</a> from ethernet.o(.text.ethernet_input) referenced 2 times from tcpip.o(.text.tcpip_input)
 <LI><a href="#[e5]">ethernetif_init</a> from ethernetif.o(.text.ethernetif_init) referenced 2 times from wifi_netif.o(.text.wifi_netif_open)
 <LI><a href="#[ac]">ethernetif_input</a> from ethernetif.o(.text.ethernetif_input) referenced 2 times from ethernetif.o(.text.ethernetif_init)
 <LI><a href="#[b8]">event_callback</a> from sockets.o(.text.event_callback) referenced 4 times from sockets.o(.text.lwip_socket)
 <LI><a href="#[e1]">find_candidate_ap</a> from wifi_management.o(.text.find_candidate_ap) referenced 2 times from wifi_management.o(.text.wifi_mgmt_cb_scan_done)
 <LI><a href="#[ea]">fputc</a> from uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d1]">gd_hardware_poll</a> from trng.o(.text.gd_hardware_poll) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[15c]">hal_add_tx_power</a> from hal_phy.o(i.hal_add_tx_power) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16b]">hal_calibration_rf</a> from hal_rf.o(i.hal_calibration_rf) referenced from hal_ops.o(.constdata)
 <LI><a href="#[187]">hal_check_ap_alive</a> from hal_main.o(i.hal_check_ap_alive) referenced from hal_ops.o(.constdata)
 <LI><a href="#[179]">hal_conf_trig</a> from hal_phy.o(i.hal_conf_trig) referenced from hal_ops.o(.constdata)
 <LI><a href="#[154]">hal_config_beacon</a> from hal_main.o(i.hal_config_beacon) referenced from hal_ops.o(.constdata)
 <LI><a href="#[151]">hal_config_rate</a> from hal_main.o(i.hal_config_rate) referenced from hal_ops.o(.constdata)
 <LI><a href="#[176]">hal_continuous_tx_test</a> from hal_phy.o(i.hal_continuous_tx_test) referenced from hal_ops.o(.constdata)
 <LI><a href="#[19a]">hal_crystal_tracking</a> from hal_dm.o(i.hal_crystal_tracking) referenced from hal_ops.o(.constdata)
 <LI><a href="#[175]">hal_dac_tx_test</a> from hal_phy.o(i.hal_dac_tx_test) referenced from hal_ops.o(.constdata)
 <LI><a href="#[147]">hal_data_deinit</a> from hal_main.o(i.hal_data_deinit) referenced from hal_ops.o(.constdata)
 <LI><a href="#[146]">hal_data_init</a> from hal_main.o(i.hal_data_init) referenced from hal_ops.o(.constdata)
 <LI><a href="#[167]">hal_del_default_or_grp_key</a> from hal_security.o(i.hal_del_default_or_grp_key) referenced from hal_ops.o(.constdata)
 <LI><a href="#[166]">hal_del_pairwise_key</a> from hal_security.o(i.hal_del_pairwise_key) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14d]">hal_disable_interrupt</a> from hal_interrupt.o(i.hal_disable_interrupt) referenced from hal_ops.o(.constdata)
 <LI><a href="#[186]">hal_disconnect_handle</a> from hal_main.o(i.hal_disconnect_handle) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17f]">hal_dm_funcs</a> from hal_dm.o(i.hal_dm_funcs) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17a]">hal_dump_adc</a> from hal_phy.o(i.hal_dump_adc) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14c]">hal_enable_interrupt</a> from hal_interrupt.o(i.hal_enable_interrupt) referenced from hal_ops.o(.constdata)
 <LI><a href="#[159]">hal_fix_tx_rate</a> from hal_main.o(i.hal_fix_tx_rate) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17e]">hal_force_tx_power</a> from hal_phy.o(i.hal_force_tx_power) referenced from hal_ops.o(.constdata)
 <LI><a href="#[199]">hal_get_crystal_cap</a> from hal_rf.o(i.hal_get_crystal_cap) referenced from hal_ops.o(.constdata)
 <LI><a href="#[144]">hal_get_efuse_info</a> from hal_efuse.o(i.hal_get_efuse_info) referenced from hal_ops.o(.constdata)
 <LI><a href="#[158]">hal_get_hiq_empty</a> from hal_main.o(i.hal_get_hiq_empty) referenced from hal_ops.o(.constdata)
 <LI><a href="#[180]">hal_get_thermal</a> from hal_dm.o(i.hal_get_thermal) referenced from hal_ops.o(.constdata)
 <LI><a href="#[15b]">hal_get_tx_power</a> from hal_phy.o(i.hal_get_tx_power) referenced from hal_ops.o(.constdata)
 <LI><a href="#[157]">hal_get_wlanhdr_offset</a> from hal_main.o(i.hal_get_wlanhdr_offset) referenced from hal_ops.o(.constdata)
 <LI><a href="#[142]">hal_hw_halt</a> from hal_main.o(i.hal_hw_halt) referenced from hal_ops.o(.constdata)
 <LI><a href="#[141]">hal_hw_init</a> from hal_main.o(i.hal_hw_init) referenced from hal_ops.o(.constdata)
 <LI><a href="#[143]">hal_hw_reset</a> from hal_main.o(i.hal_hw_reset) referenced from hal_ops.o(.constdata)
 <LI><a href="#[169]">hal_init_bb</a> from hal_phy.o(i.hal_init_bb) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14b]">hal_init_interrupt</a> from hal_interrupt.o(i.hal_init_interrupt) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14f]">hal_init_mac_addr</a> from hal_main.o(i.hal_init_mac_addr) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16a]">hal_init_rf</a> from hal_rf.o(i.hal_init_rf) referenced from hal_ops.o(.constdata)
 <LI><a href="#[185]">hal_keep_alive_ctrl</a> from hal_fw_intf.o(i.hal_keep_alive_ctrl) referenced from hal_ops.o(.constdata)
 <LI><a href="#[183]">hal_lps_ctrl</a> from hal_fw_intf.o(i.hal_lps_ctrl) referenced from hal_ops.o(.constdata)
 <LI><a href="#[161]">hal_mp_mode_tx_setup</a> from hal_main.o(i.hal_mp_mode_tx_setup) referenced from hal_ops.o(.constdata)
 <LI><a href="#[162]">hal_mp_use_efuse</a> from hal_main.o(i.hal_mp_use_efuse) referenced from hal_ops.o(.constdata)
 <LI><a href="#[160]">hal_parse_rx_desc</a> from hal_desc.o(i.hal_parse_rx_desc) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18b]">hal_ra_control</a> from hal_rate.o(i.hal_ra_control) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18e]">hal_ra_get_cca_score</a> from hal_rate.o(i.hal_ra_get_cca_score) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18d]">hal_ra_get_reporttbl</a> from hal_rate.o(i.hal_ra_get_reporttbl) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18a]">hal_ra_init</a> from hal_rate.o(i.hal_ra_init) referenced from hal_ops.o(.constdata)
 <LI><a href="#[190]">hal_ra_set_ctlf_fback</a> from hal_rate.o(i.hal_ra_set_ctlf_fback) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18c]">hal_ra_set_report_intvl</a> from hal_rate.o(i.hal_ra_set_report_intvl) referenced from hal_ops.o(.constdata)
 <LI><a href="#[18f]">hal_ra_update_ctrtbl</a> from hal_rate.o(i.hal_ra_update_ctrtbl) referenced from hal_ops.o(.constdata)
 <LI><a href="#[174]">hal_read_aadc</a> from hal_phy.o(i.hal_read_aadc) referenced from hal_ops.o(.constdata)
 <LI><a href="#[170]">hal_read_bb_dig_reg</a> from hal_phy.o(i.hal_read_bb_dig_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16f]">hal_read_bb_reg</a> from hal_phy.o(i.hal_read_bb_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[155]">hal_read_reg</a> from hal_main.o(i.hal_read_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[168]">hal_reset_all_keys</a> from hal_security.o(i.hal_reset_all_keys) referenced from hal_ops.o(.constdata)
 <LI><a href="#[19d]">hal_reset_power_table</a> from hal_main.o(i.hal_reset_power_table) referenced from hal_ops.o(.constdata)
 <LI><a href="#[197]">hal_rf_lnak</a> from hal_calibration.o(i.hal_rf_lnak) referenced from hal_ops.o(.constdata)
 <LI><a href="#[196]">hal_rf_rck</a> from hal_calibration.o(i.hal_rf_rck) referenced from hal_ops.o(.constdata)
 <LI><a href="#[195]">hal_rf_rx_dck</a> from hal_calibration.o(i.hal_rf_rx_dck) referenced from hal_ops.o(.constdata)
 <LI><a href="#[194]">hal_rf_rx_iqk</a> from hal_calibration.o(i.hal_rf_rx_iqk) referenced from hal_ops.o(.constdata)
 <LI><a href="#[181]">hal_rf_set_freq</a> from hal_rf.o(i.hal_rf_set_freq) referenced from hal_ops.o(.constdata)
 <LI><a href="#[182]">hal_rf_set_plldig</a> from hal_rf.o(i.hal_rf_set_plldig) referenced from hal_ops.o(.constdata)
 <LI><a href="#[192]">hal_rf_tx_dck</a> from hal_calibration.o(i.hal_rf_tx_dck) referenced from hal_ops.o(.constdata)
 <LI><a href="#[191]">hal_rf_tx_iqk</a> from hal_calibration.o(i.hal_rf_tx_iqk) referenced from hal_ops.o(.constdata)
 <LI><a href="#[193]">hal_rf_tx_lok</a> from hal_calibration.o(i.hal_rf_tx_lok) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17c]">hal_rx_evm</a> from hal_phy.o(i.hal_rx_evm) referenced from hal_ops.o(.constdata)
 <LI><a href="#[163]">hal_rx_filter</a> from hal_main.o(i.hal_rx_filter) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17d]">hal_rx_psd</a> from hal_phy.o(i.hal_rx_psd) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16c]">hal_set_band</a> from hal_phy.o(i.hal_set_band) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16d]">hal_set_bandwidth</a> from hal_phy.o(i.hal_set_bandwidth) referenced from hal_ops.o(.constdata)
 <LI><a href="#[15e]">hal_set_beacon_tx_desc</a> from hal_desc.o(i.hal_set_beacon_tx_desc) referenced from hal_ops.o(.constdata)
 <LI><a href="#[152]">hal_set_bssid_check</a> from hal_main.o(i.hal_set_bssid_check) referenced from hal_ops.o(.constdata)
 <LI><a href="#[198]">hal_set_crystal_cap</a> from hal_rf.o(i.hal_set_crystal_cap) referenced from hal_ops.o(.constdata)
 <LI><a href="#[164]">hal_set_default_or_grp_key</a> from hal_security.o(i.hal_set_default_or_grp_key) referenced from hal_ops.o(.constdata)
 <LI><a href="#[19c]">hal_set_mp_pwroffset</a> from hal_main.o(i.hal_set_mp_pwroffset) referenced from hal_ops.o(.constdata)
 <LI><a href="#[19b]">hal_set_mp_targetpwr</a> from hal_main.o(i.hal_set_mp_targetpwr) referenced from hal_ops.o(.constdata)
 <LI><a href="#[150]">hal_set_network_mode</a> from hal_main.o(i.hal_set_network_mode) referenced from hal_ops.o(.constdata)
 <LI><a href="#[165]">hal_set_pairwise_key</a> from hal_security.o(i.hal_set_pairwise_key) referenced from hal_ops.o(.constdata)
 <LI><a href="#[17b]">hal_set_phy_loopback</a> from hal_phy.o(i.hal_set_phy_loopback) referenced from hal_ops.o(.constdata)
 <LI><a href="#[189]">hal_set_promisc_filter</a> from hal_main.o(i.hal_set_promisc_filter) referenced from hal_ops.o(.constdata)
 <LI><a href="#[188]">hal_set_promisc_mode</a> from hal_main.o(i.hal_set_promisc_mode) referenced from hal_ops.o(.constdata)
 <LI><a href="#[15f]">hal_set_tx_desc</a> from hal_desc.o(i.hal_set_tx_desc) referenced from hal_ops.o(.constdata)
 <LI><a href="#[15a]">hal_set_tx_power</a> from hal_phy.o(i.hal_set_tx_power) referenced from hal_ops.o(.constdata)
 <LI><a href="#[15d]">hal_set_tx_rts_cts</a> from hal_main.o(i.hal_set_tx_rts_cts) referenced from hal_ops.o(.constdata)
 <LI><a href="#[153]">hal_set_wmm_param</a> from hal_main.o(i.hal_set_wmm_param) referenced from hal_ops.o(.constdata)
 <LI><a href="#[19e]">hal_setting_by_chan_plan</a> from hal_phy.o(i.hal_setting_by_chan_plan) referenced from hal_ops.o(.constdata)
 <LI><a href="#[16e]">hal_switch_channel</a> from hal_phy.o(i.hal_switch_channel) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14e]">hal_update_interrupt_mask</a> from hal_interrupt.o(i.hal_update_interrupt_mask) referenced from hal_ops.o(.constdata)
 <LI><a href="#[149]">hal_watchdog_enable</a> from hal_watchdog.o(i.hal_watchdog_enable) referenced from hal_ops.o(.constdata)
 <LI><a href="#[14a]">hal_watchdog_func</a> from hal_watchdog.o(i.hal_watchdog_func) referenced from hal_ops.o(.constdata)
 <LI><a href="#[148]">hal_watchdog_init</a> from hal_watchdog.o(i.hal_watchdog_init) referenced from hal_ops.o(.constdata)
 <LI><a href="#[184]">hal_wlan_info_notify</a> from hal_fw_intf.o(i.hal_wlan_info_notify) referenced from hal_ops.o(.constdata)
 <LI><a href="#[173]">hal_write_bb_dig_reg</a> from hal_phy.o(i.hal_write_bb_dig_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[171]">hal_write_bb_reg_byte</a> from hal_phy.o(i.hal_write_bb_reg_byte) referenced from hal_ops.o(.constdata)
 <LI><a href="#[172]">hal_write_bb_reg_dword</a> from hal_phy.o(i.hal_write_bb_reg_dword) referenced from hal_ops.o(.constdata)
 <LI><a href="#[145]">hal_write_efuse_check</a> from hal_efuse.o(i.hal_write_efuse_check) referenced from hal_ops.o(.constdata)
 <LI><a href="#[156]">hal_write_reg</a> from hal_main.o(i.hal_write_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[1e0]">igmp_tmr</a> from igmp.o(.text.igmp_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[dc]">ip4_input</a> from ip4.o(.text.ip4_input) referenced 2 times from tcpip.o(.text.tcpip_input)
 <LI><a href="#[1dc]">ip_reass_tmr</a> from ip4_frag.o(.text.ip_reass_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[6d]">iperf_on_connect</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[6b]">iperf_on_new_stream</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[6e]">iperf_on_test_finish</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[6c]">iperf_on_test_start</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[246]">iperf_reporter_callback</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[247]">iperf_stats_callback</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[60]">iperf_tcp_accept</a> from iperf_tcp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[62]">iperf_tcp_connect</a> from iperf_tcp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[61]">iperf_tcp_listen</a> from iperf_tcp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[64]">iperf_tcp_recv</a> from iperf_tcp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[63]">iperf_tcp_send</a> from iperf_tcp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[ae]">iperf_test_task</a> from iperf3_main.o(.text.iperf_test_task) referenced 2 times from iperf3_main.o(.text.iperf_main)
 <LI><a href="#[65]">iperf_udp_accept</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[67]">iperf_udp_connect</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[6a]">iperf_udp_init</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[66]">iperf_udp_listen</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[69]">iperf_udp_recv</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[68]">iperf_udp_send</a> from iperf_udp.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[ad]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(.text.ipfrag_free_pbuf_custom) referenced 2 times from ip4_frag.o(.text.ip4_frag)
 <LI><a href="#[79]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[a0]">join_group_task_func</a> from cmd_shell.o(.text.join_group_task_func) referenced 2 times from cmd_shell.o(.text.cmd_group_join)
 <LI><a href="#[1]">kernel_idle_thread</a> from sched_kernel.o(.text.kernel_idle_thread) referenced 2 times from k_thread.o(_INIT_OS_THREAD_LIST)
 <LI><a href="#[0]">kernel_schedule_thread</a> from sched_kernel.o(.text.kernel_schedule_thread) referenced 2 times from k_thread.o(_INIT_OS_THREAD_LIST)
 <LI><a href="#[10b]">link_retry_timer_handler</a> from wlan_connect.o(i.link_retry_timer_handler) referenced from wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
 <LI><a href="#[ab]">low_level_output</a> from ethernetif.o(.text.low_level_output) referenced 2 times from ethernetif.o(.text.ethernetif_init)
 <LI><a href="#[b0]">lwip_cyclic_timer</a> from timeouts.o(.text.lwip_cyclic_timer) referenced 4 times from timeouts.o(.text.lwip_cyclic_timer)
 <LI><a href="#[b0]">lwip_cyclic_timer</a> from timeouts.o(.text.lwip_cyclic_timer) referenced 2 times from timeouts.o(.text.sys_timeouts_init)
 <LI><a href="#[b1]">lwip_getsockopt_callback</a> from sockets.o(.text.lwip_getsockopt_callback) referenced 2 times from sockets.o(.text.lwip_getsockopt)
 <LI><a href="#[ba]">lwip_netconn_do_bind</a> from api_msg.o(.text.lwip_netconn_do_bind) referenced 2 times from api_lib.o(.text.netconn_bind)
 <LI><a href="#[c4]">lwip_netconn_do_close</a> from api_msg.o(.text.lwip_netconn_do_close) referenced 2 times from api_lib.o(.text.netconn_recv_data_tcp)
 <LI><a href="#[bb]">lwip_netconn_do_connect</a> from api_msg.o(.text.lwip_netconn_do_connect) referenced 2 times from api_lib.o(.text.netconn_connect)
 <LI><a href="#[b2]">lwip_netconn_do_connected</a> from api_msg.o(.text.lwip_netconn_do_connected) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connect)
 <LI><a href="#[bc]">lwip_netconn_do_delconn</a> from api_msg.o(.text.lwip_netconn_do_delconn) referenced 2 times from api_lib.o(.text.netconn_delete)
 <LI><a href="#[bc]">lwip_netconn_do_delconn</a> from api_msg.o(.text.lwip_netconn_do_delconn) referenced 2 times from api_lib.o(.text.netconn_prepare_delete)
 <LI><a href="#[bd]">lwip_netconn_do_disconnect</a> from api_msg.o(.text.lwip_netconn_do_disconnect) referenced 2 times from api_lib.o(.text.netconn_disconnect)
 <LI><a href="#[b3]">lwip_netconn_do_dns_found</a> from api_msg.o(.text.lwip_netconn_do_dns_found) referenced 2 times from api_msg.o(.text.lwip_netconn_do_gethostbyname)
 <LI><a href="#[be]">lwip_netconn_do_getaddr</a> from api_msg.o(.text.lwip_netconn_do_getaddr) referenced 2 times from api_lib.o(.text.netconn_getaddr)
 <LI><a href="#[bf]">lwip_netconn_do_gethostbyname</a> from api_msg.o(.text.lwip_netconn_do_gethostbyname) referenced 2 times from api_lib.o(.text.netconn_gethostbyname)
 <LI><a href="#[c0]">lwip_netconn_do_join_leave_group</a> from api_msg.o(.text.lwip_netconn_do_join_leave_group) referenced 2 times from api_lib.o(.text.netconn_join_leave_group)
 <LI><a href="#[c1]">lwip_netconn_do_listen</a> from api_msg.o(.text.lwip_netconn_do_listen) referenced 2 times from api_lib.o(.text.netconn_listen_with_backlog)
 <LI><a href="#[c2]">lwip_netconn_do_newconn</a> from api_msg.o(.text.lwip_netconn_do_newconn) referenced 2 times from api_lib.o(.text.netconn_new_with_proto_and_callback)
 <LI><a href="#[c3]">lwip_netconn_do_recv</a> from api_msg.o(.text.lwip_netconn_do_recv) referenced 2 times from api_lib.o(.text.netconn_recv_data_tcp)
 <LI><a href="#[c3]">lwip_netconn_do_recv</a> from api_msg.o(.text.lwip_netconn_do_recv) referenced 2 times from api_lib.o(.text.netconn_tcp_recvd)
 <LI><a href="#[c5]">lwip_netconn_do_send</a> from api_msg.o(.text.lwip_netconn_do_send) referenced 2 times from api_lib.o(.text.netconn_send)
 <LI><a href="#[c6]">lwip_netconn_do_write</a> from api_msg.o(.text.lwip_netconn_do_write) referenced 2 times from api_lib.o(.text.netconn_write_vectors_partly)
 <LI><a href="#[b7]">lwip_setsockopt_callback</a> from sockets.o(.text.lwip_setsockopt_callback) referenced 2 times from sockets.o(.text.lwip_setsockopt)
 <LI><a href="#[5c]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c7]">netif_null_output_ip4</a> from netif.o(.text.netif_null_output_ip4) referenced 2 times from netif.o(.text.netif_add)
 <LI><a href="#[e4]">netif_remove</a> from netif.o(.text.netif_remove) referenced 2 times from wifi_netif.o(.text.wifi_netif_close)
 <LI><a href="#[e9]">netif_set_down</a> from netif.o(.text.netif_set_down) referenced 2 times from wifi_netif.o(.text.wifi_netif_stop_dhcp)
 <LI><a href="#[e7]">netif_set_up</a> from netif.o(.text.netif_set_up) referenced 2 times from wifi_netif.o(.text.wifi_netif_set_up)
 <LI><a href="#[e7]">netif_set_up</a> from netif.o(.text.netif_set_up) referenced 2 times from wifi_netif.o(.text.wifi_netif_start_dhcp)
 <LI><a href="#[c8]">netifapi_do_netif_common</a> from netifapi.o(.text.netifapi_do_netif_common) referenced 2 times from netifapi.o(.text.netifapi_netif_common)
 <LI><a href="#[c9]">netifapi_do_netif_set_addr</a> from netifapi.o(.text.netifapi_do_netif_set_addr) referenced 2 times from netifapi.o(.text.netifapi_netif_set_addr)
 <LI><a href="#[ca]">pbuf_free_ooseq_callback</a> from pbuf.o(.text.pbuf_free_ooseq_callback) referenced 2 times from pbuf.o(.text.pbuf_alloc)
 <LI><a href="#[a1]">ping_task_func</a> from ping.o(.text.ping_task_func) referenced 2 times from ping.o(.text.cmd_ping)
 <LI><a href="#[113]">pmk_expire_timer_handler</a> from wpas_psk.o(i.pmk_expire_timer_handler) referenced from wpas_psk.o(i.wpas_priv_alloc)
 <LI><a href="#[9d]">poll_tcp</a> from api_msg.o(.text.poll_tcp) referenced 2 times from api_msg.o(.text.accept_function)
 <LI><a href="#[9d]">poll_tcp</a> from api_msg.o(.text.poll_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_close_internal)
 <LI><a href="#[9d]">poll_tcp</a> from api_msg.o(.text.poll_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connect)
 <LI><a href="#[9d]">poll_tcp</a> from api_msg.o(.text.poll_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connected)
 <LI><a href="#[9d]">poll_tcp</a> from api_msg.o(.text.poll_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[cf]">printf</a> from printfa.o(i.__0printf) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[177]">read_rf_reg</a> from hal_rf.o(i.read_rf_reg) referenced from hal_ops.o(.constdata)
 <LI><a href="#[b5]">recv_raw</a> from api_msg.o(.text.recv_raw) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[9b]">recv_tcp</a> from api_msg.o(.text.recv_tcp) referenced 2 times from api_msg.o(.text.accept_function)
 <LI><a href="#[9b]">recv_tcp</a> from api_msg.o(.text.recv_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connect)
 <LI><a href="#[9b]">recv_tcp</a> from api_msg.o(.text.recv_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connected)
 <LI><a href="#[9b]">recv_tcp</a> from api_msg.o(.text.recv_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[b6]">recv_udp</a> from api_msg.o(.text.recv_udp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[9f]">scan_info_print</a> from cmd_shell.o(.text.scan_info_print) referenced 2 times from cmd_shell.o(.text.cmd_cb_scan_done)
 <LI><a href="#[8f]">schedule_callback_fromTimeOut</a> from sched_kernel.o(.text.schedule_callback_fromTimeOut) referenced 2 times from sched_thread.o(.text._impl_thread_static_init)
 <LI><a href="#[8f]">schedule_callback_fromTimeOut</a> from sched_kernel.o(.text.schedule_callback_fromTimeOut) referenced 2 times from sched_thread.o(.text._thread_init_privilege_routine)
 <LI><a href="#[5f]">send_timer_proc</a> from iperf_api.o(.text) referenced from iperf_api.o(.text)
 <LI><a href="#[9c]">sent_tcp</a> from api_msg.o(.text.sent_tcp) referenced 2 times from api_msg.o(.text.accept_function)
 <LI><a href="#[9c]">sent_tcp</a> from api_msg.o(.text.sent_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_close_internal)
 <LI><a href="#[9c]">sent_tcp</a> from api_msg.o(.text.sent_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connect)
 <LI><a href="#[9c]">sent_tcp</a> from api_msg.o(.text.sent_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_connected)
 <LI><a href="#[9c]">sent_tcp</a> from api_msg.o(.text.sent_tcp) referenced 2 times from api_msg.o(.text.lwip_netconn_do_newconn)
 <LI><a href="#[75]">server_omit_timer_proc</a> from iperf_server_api.o(.text) referenced from iperf_server_api.o(.text)
 <LI><a href="#[74]">server_reporter_timer_proc</a> from iperf_server_api.o(.text) referenced from iperf_server_api.o(.text)
 <LI><a href="#[73]">server_stats_timer_proc</a> from iperf_server_api.o(.text) referenced from iperf_server_api.o(.text)
 <LI><a href="#[ce]">snprintf</a> from printfa.o(i.__0snprintf) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[103]">soc_free_recv_pkt</a> from soc_rx.o(i.soc_free_recv_pkt) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[102]">soc_free_recv_struct</a> from soc_rx.o(i.soc_free_recv_struct) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[101]">soc_init_recv_struct</a> from soc_rx.o(i.soc_init_recv_struct) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[fb]">soc_init_wlan_irqn</a> from soc_isr.o(i.soc_init_wlan_irqn) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[fc]">soc_rx_tasklet</a> from soc_rx.o(i.soc_rx_tasklet) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[ff]">soc_send_beacon</a> from soc_tx.o(i.soc_send_beacon) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[fe]">soc_send_test_xframe</a> from soc_tx.o(i.soc_send_test_xframe) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[fd]">soc_send_xframe</a> from soc_tx.o(i.soc_send_xframe) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[100]">soc_xmit_complete</a> from soc_tx.o(i.soc_xmit_complete) referenced from soc_ops.o(i.wifi_hci_ops_init)
 <LI><a href="#[b9]">start_task</a> from main.o(.text.start_task) referenced 2 times from main.o(.text.main)
 <LI><a href="#[cc]">sys_calloc</a> from wrapper_os.o(.text.sys_calloc) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[1ac]">sys_current_time_get</a> from wrapper_os.o(.text.sys_current_time_get) referenced from os_api.o(.constdata)
 <LI><a href="#[1b8]">sys_free_heap_size</a> from wrapper_os.o(.text.sys_free_heap_size) referenced from os_api.o(.constdata)
 <LI><a href="#[1b7]">sys_heap_block_size</a> from wrapper_os.o(.text.sys_heap_block_size) referenced from os_api.o(.constdata)
 <LI><a href="#[19f]">sys_malloc</a> from wrapper_os.o(.text.sys_malloc) referenced from os_api.o(.constdata)
 <LI><a href="#[19f]">sys_malloc</a> from wrapper_os.o(.text.sys_malloc) referenced from cjson.o(.rodata.global_hooks)
 <LI><a href="#[1a1]">sys_memcmp</a> from wrapper_os.o(.text.sys_memcmp) referenced from os_api.o(.constdata)
 <LI><a href="#[1a0]">sys_memcpy</a> from wrapper_os.o(.text.sys_memcpy) referenced from os_api.o(.constdata)
 <LI><a href="#[1a2]">sys_memset</a> from wrapper_os.o(.text.sys_memset) referenced from os_api.o(.constdata)
 <LI><a href="#[cd]">sys_mfree</a> from wrapper_os.o(.text.sys_mfree) referenced from os_api.o(.constdata)
 <LI><a href="#[cd]">sys_mfree</a> from wrapper_os.o(.text.sys_mfree) referenced from cjson.o(.rodata.global_hooks)
 <LI><a href="#[cd]">sys_mfree</a> from wrapper_os.o(.text.sys_mfree) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[1ad]">sys_ms_sleep</a> from wrapper_os.o(.text.sys_ms_sleep) referenced from os_api.o(.constdata)
 <LI><a href="#[1a9]">sys_mutex_free</a> from wrapper_os.o(.text.sys_mutex_free) referenced from os_api.o(.constdata)
 <LI><a href="#[1aa]">sys_mutex_get</a> from wrapper_os.o(.text.sys_mutex_get) referenced from os_api.o(.constdata)
 <LI><a href="#[d2]">sys_mutex_get_func</a> from init_rom.o(.text.sys_mutex_get_func) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[1a8]">sys_mutex_init</a> from wrapper_os.o(.text.sys_mutex_init) referenced from os_api.o(.constdata)
 <LI><a href="#[1ab]">sys_mutex_put</a> from wrapper_os.o(.text.sys_mutex_put) referenced from os_api.o(.constdata)
 <LI><a href="#[d3]">sys_mutex_put_func</a> from init_rom.o(.text.sys_mutex_put_func) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[1b6]">sys_random_bytes_get</a> from wrapper_os.o(.text.sys_random_bytes_get) referenced from os_api.o(.constdata)
 <LI><a href="#[1da]">sys_realloc</a> from wrapper_os.o(.text.sys_realloc) referenced from cjson.o(.rodata.global_hooks)
 <LI><a href="#[1af]">sys_sched_lock</a> from wrapper_os.o(.text.sys_sched_lock) referenced from os_api.o(.constdata)
 <LI><a href="#[1b0]">sys_sched_unlock</a> from wrapper_os.o(.text.sys_sched_unlock) referenced from os_api.o(.constdata)
 <LI><a href="#[1a7]">sys_sema_down</a> from wrapper_os.o(.text.sys_sema_down) referenced from os_api.o(.constdata)
 <LI><a href="#[1a4]">sys_sema_free</a> from wrapper_os.o(.text.sys_sema_free) referenced from os_api.o(.constdata)
 <LI><a href="#[1a3]">sys_sema_init</a> from wrapper_os.o(.text.sys_sema_init) referenced from os_api.o(.constdata)
 <LI><a href="#[1a5]">sys_sema_up</a> from wrapper_os.o(.text.sys_sema_up) referenced from os_api.o(.constdata)
 <LI><a href="#[1a6]">sys_sema_up_from_isr</a> from wrapper_os.o(.text.sys_sema_up_from_isr) referenced from os_api.o(.constdata)
 <LI><a href="#[1be]">sys_stack_free_get</a> from wrapper_os.o(.text.sys_stack_free_get) referenced from os_api.o(.constdata)
 <LI><a href="#[1b9]">sys_task_create</a> from wrapper_os.o(.text.sys_task_create) referenced from os_api.o(.constdata)
 <LI><a href="#[1ba]">sys_task_delete</a> from wrapper_os.o(.text.sys_task_delete) referenced from os_api.o(.constdata)
 <LI><a href="#[1bf]">sys_task_exist</a> from wrapper_os.o(.text.sys_task_exist) referenced from os_api.o(.constdata)
 <LI><a href="#[1bd]">sys_task_msg_num</a> from wrapper_os.o(.text.sys_task_msg_num) referenced from os_api.o(.constdata)
 <LI><a href="#[1bc]">sys_task_post</a> from wrapper_os.o(.text.sys_task_post) referenced from os_api.o(.constdata)
 <LI><a href="#[1bb]">sys_task_wait</a> from wrapper_os.o(.text.sys_task_wait) referenced from os_api.o(.constdata)
 <LI><a href="#[d0]">sys_time_get</a> from wrapper_os.o(.text.sys_time_get) referenced 2 times from init_rom.o(.text.rom_init)
 <LI><a href="#[1b2]">sys_timer_delete</a> from wrapper_os.o(.text.sys_timer_delete) referenced from os_api.o(.constdata)
 <LI><a href="#[1b1]">sys_timer_init</a> from wrapper_os.o(.text.sys_timer_init) referenced from os_api.o(.constdata)
 <LI><a href="#[1b5]">sys_timer_pending</a> from wrapper_os.o(.text.sys_timer_pending) referenced from os_api.o(.constdata)
 <LI><a href="#[1b3]">sys_timer_start_ext</a> from wrapper_os.o(.text.sys_timer_start_ext) referenced from os_api.o(.constdata)
 <LI><a href="#[1b4]">sys_timer_stop</a> from wrapper_os.o(.text.sys_timer_stop) referenced from os_api.o(.constdata)
 <LI><a href="#[1ae]">sys_us_delay</a> from wrapper_os.o(.text.sys_us_delay) referenced from os_api.o(.constdata)
 <LI><a href="#[d8]">tcp_accept_null</a> from tcp.o(.text.tcp_accept_null) referenced 2 times from tcp.o(.text.tcp_listen_with_backlog_and_err)
 <LI><a href="#[d7]">tcp_recv_null</a> from tcp.o(.text.tcp_recv_null) referenced 2 times from tcp.o(.text.tcp_alloc)
 <LI><a href="#[a2]">tcp_task_func</a> from tcp_test.o(.text.tcp_task_func) referenced 4 times from tcp_test.o(.text.cmd_tcp)
 <LI><a href="#[a2]">tcp_task_func</a> from tcp_test.o(.text.tcp_task_func) referenced 2 times from tcp_test.o(.text.tcp_task_func)
 <LI><a href="#[1db]">tcp_tmr</a> from tcp.o(.text.tcp_tmr) referenced from timeouts.o(.rodata.lwip_cyclic_timers)
 <LI><a href="#[e6]">tcpip_input</a> from tcpip.o(.text.tcpip_input) referenced 2 times from wifi_netif.o(.text.wifi_netif_open)
 <LI><a href="#[d9]">tcpip_tcp_timer</a> from timeouts.o(.text.tcpip_tcp_timer) referenced 2 times from timeouts.o(.text.tcp_timer_needed)
 <LI><a href="#[d9]">tcpip_tcp_timer</a> from timeouts.o(.text.tcpip_tcp_timer) referenced 2 times from timeouts.o(.text.tcpip_tcp_timer)
 <LI><a href="#[da]">tcpip_thread</a> from tcpip.o(.text.tcpip_thread) referenced 2 times from tcpip.o(.text.tcpip_init)
 <LI><a href="#[6f]">test_timer_proc</a> from iperf_client_api.o(.text) referenced from iperf_client_api.o(.text)
 <LI><a href="#[7a]">timeout_handler</a> from sched_timer.o(.text.timeout_handler) referenced 2 times from sched_kernel.o(.text._impl_kernel_at_rtos_run)
 <LI><a href="#[7a]">timeout_handler</a> from sched_timer.o(.text.timeout_handler) referenced 2 times from sched_kernel.o(.text._kernel_start_privilege_routine)
 <LI><a href="#[9a]">timer_callback_fromTimeOut</a> from sched_timer.o(.text.timer_callback_fromTimeOut) referenced 2 times from sched_timer.o(.text._timer_init_privilege_routine)
 <LI><a href="#[9a]">timer_callback_fromTimeOut</a> from sched_timer.o(.text.timer_callback_fromTimeOut) referenced 2 times from sched_timer.o(.text.timeout_handler)
 <LI><a href="#[a3]">udp_task_func</a> from udp_test.o(.text.udp_task_func) referenced 4 times from udp_test.o(.text.cmd_udp)
 <LI><a href="#[a3]">udp_task_func</a> from udp_test.o(.text.udp_task_func) referenced 2 times from udp_test.o(.text.udp_task_func)
 <LI><a href="#[115]">wifi_close</a> from wlan_intf.o(i.wifi_close) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[118]">wifi_connect_req_entry</a> from wlan_intf.o(i.wifi_connect_req_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[119]">wifi_disconnect_req_entry</a> from wlan_intf.o(i.wifi_disconnect_req_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[12a]">wifi_dump_driver_threads</a> from wlan_task.o(i.wifi_dump_driver_threads) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[124]">wifi_get_bss_rssi</a> from wlan_intf.o(i.wifi_get_bss_rssi) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[12d]">wifi_get_bw</a> from wlan_intf.o(i.wifi_get_bw) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[12e]">wifi_get_driver_revision</a> from wlan_intf.o(i.wifi_get_driver_revision) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11c]">wifi_get_mac_addr</a> from wlan_intf.o(i.wifi_get_mac_addr) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[123]">wifi_get_ps</a> from wlan_intf.o(i.wifi_get_ps) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[117]">wifi_get_scan_list_entry</a> from wlan_intf.o(i.wifi_get_scan_list_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[df]">wifi_management_task</a> from wifi_management.o(.text.wifi_management_task) referenced 2 times from wifi_management.o(.text.wifi_management_start)
 <LI><a href="#[e2]">wifi_mgmt_cb_scan_done</a> from wifi_management.o(.text.wifi_mgmt_cb_scan_done) referenced 2 times from wifi_management.o(.text.wifi_mgmt_link_status_polling)
 <LI><a href="#[e0]">wifi_mgmt_connect_retry</a> from wifi_management.o(.text.wifi_mgmt_connect_retry) referenced 12 times from wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
 <LI><a href="#[d4]">wifi_mgmt_dhcp_polling</a> from wifi_management.o(.text.wifi_mgmt_dhcp_polling) referenced 2 times from wifi_management.o(.text.sm_MAINTAIN_CONNECTION_SCAN_Enter)
 <LI><a href="#[d4]">wifi_mgmt_dhcp_polling</a> from wifi_management.o(.text.wifi_mgmt_dhcp_polling) referenced 6 times from wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
 <LI><a href="#[d4]">wifi_mgmt_dhcp_polling</a> from wifi_management.o(.text.wifi_mgmt_dhcp_polling) referenced 2 times from wifi_management.o(.text.wifi_mgmt_dhcp_polling)
 <LI><a href="#[d5]">wifi_mgmt_link_status_polling</a> from wifi_management.o(.text.wifi_mgmt_link_status_polling) referenced 2 times from wifi_management.o(.text.sm_MAINTAIN_CONNECTION_SCAN_Enter)
 <LI><a href="#[d5]">wifi_mgmt_link_status_polling</a> from wifi_management.o(.text.wifi_mgmt_link_status_polling) referenced 6 times from wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
 <LI><a href="#[d5]">wifi_mgmt_link_status_polling</a> from wifi_management.o(.text.wifi_mgmt_link_status_polling) referenced 2 times from wifi_management.o(.text.wifi_mgmt_link_status_polling)
 <LI><a href="#[105]">wifi_netlink_indicate_connect</a> from wifi_netlink.o(.text.wifi_netlink_indicate_connect) referenced from wlan_intf.o(i.wifi_indicate_intf_init)
 <LI><a href="#[104]">wifi_netlink_indicate_disconnect</a> from wifi_netlink.o(.text.wifi_netlink_indicate_disconnect) referenced from wlan_intf.o(i.wifi_indicate_intf_init)
 <LI><a href="#[107]">wifi_netlink_indicate_softap_sta_del</a> from wifi_netlink.o(.text.wifi_netlink_indicate_softap_sta_del) referenced from wlan_intf.o(i.wifi_indicate_intf_init)
 <LI><a href="#[106]">wifi_netlink_scan_result_notify</a> from wifi_netlink.o(.text.wifi_netlink_scan_result_notify) referenced from wlan_intf.o(i.wifi_indicate_intf_init)
 <LI><a href="#[114]">wifi_open</a> from wlan_intf.o(i.wifi_open) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11d]">wifi_priv_req_entry</a> from wlan_intf.o(i.wifi_priv_req_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[12c]">wifi_set_bw</a> from wlan_intf.o(i.wifi_set_bw) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[121]">wifi_set_channel</a> from wlan_intf.o(i.wifi_set_channel) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[120]">wifi_set_channel_mask</a> from wlan_intf.o(i.wifi_set_channel_mask) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11e]">wifi_set_idle_ps_delay</a> from wlan_intf.o(i.wifi_set_idle_ps_delay) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11a]">wifi_set_ipaddr_entry</a> from wlan_intf.o(i.wifi_set_ipaddr_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11b]">wifi_set_mac_addr</a> from wlan_intf.o(i.wifi_set_mac_addr) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[128]">wifi_set_promisc_filter</a> from wlan_intf.o(i.wifi_set_promisc_filter) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[127]">wifi_set_promisc_mode</a> from wlan_intf.o(i.wifi_set_promisc_mode) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[122]">wifi_set_ps</a> from wlan_intf.o(i.wifi_set_ps) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[11f]">wifi_set_ps_interval</a> from wlan_intf.o(i.wifi_set_ps_interval) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[116]">wifi_set_scan_entry</a> from wlan_intf.o(i.wifi_set_scan_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[12b]">wifi_set_task_priority</a> from wlan_task.o(i.wifi_set_task_priority) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[126]">wifi_show_trx_resource</a> from wlan_intf.o(i.wifi_show_trx_resource) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[125]">wifi_softap_entry</a> from wlan_intf.o(i.wifi_softap_entry) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[129]">wifi_softap_get_assoc_info</a> from wlan_intf.o(i.wifi_softap_get_assoc_info) referenced from wlan_intf.o(.constdata)
 <LI><a href="#[108]">wifi_xmit_entry</a> from net_intf.o(i.wifi_xmit_entry) referenced from net_intf.o(i.wifi_register_ethernetif)
 <LI><a href="#[13c]">wlan_action_ba_recved</a> from wlan_mgmt_engine.o(i.wlan_action_ba_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[13b]">wlan_action_dls_recved</a> from wlan_mgmt_engine.o(i.wlan_action_dls_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[13e]">wlan_action_ht_recved</a> from wlan_mgmt_engine.o(i.wlan_action_ht_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[13d]">wlan_action_public_recved</a> from wlan_mgmt_engine.o(i.wlan_action_public_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[13a]">wlan_action_qos_recved</a> from wlan_mgmt_engine.o(i.wlan_action_qos_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[136]">wlan_action_recved</a> from wlan_mgmt_engine.o(i.wlan_action_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[13f]">wlan_action_sa_query_recved</a> from wlan_mgmt_engine.o(i.wlan_action_sa_query_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[140]">wlan_action_wmm_recved</a> from wlan_mgmt_engine.o(i.wlan_action_wmm_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[109]">wlan_add_ba_callback</a> from wlan_work_cb.o(i.wlan_add_ba_callback) referenced from wlan_mgmt_proc.o(i.wlan_add_ba_req)
 <LI><a href="#[10e]">wlan_addba_timer_handler</a> from wlan_mgmt_proc.o(i.wlan_addba_timer_handler) referenced from wlan_sta_info.o(i.wlan_init_sta_info)
 <LI><a href="#[139]">wlan_ap_auth_recved</a> from wlan_mgmt_engine.o(i.wlan_ap_auth_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[137]">wlan_assoc_req_recved</a> from wlan_mgmt_engine.o(i.wlan_assoc_req_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[130]">wlan_assoc_rsp_recved</a> from wlan_mgmt_engine.o(i.wlan_assoc_rsp_recved) referenced 4 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[132]">wlan_beacon_recved</a> from wlan_mgmt_engine.o(i.wlan_beacon_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[f9]">wlan_check_hiq_callback</a> from wlan_work_cb.o(i.wlan_check_hiq_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[135]">wlan_deauth_recved</a> from wlan_mgmt_engine.o(i.wlan_deauth_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[133]">wlan_disassoc_recved</a> from wlan_mgmt_engine.o(i.wlan_disassoc_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[f4]">wlan_dyn_chk_callback</a> from wlan_work_cb.o(i.wlan_dyn_chk_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[10d]">wlan_dyn_chk_timer_handler</a> from wlan_dyn_chk.o(i.wlan_dyn_chk_timer_handler) referenced from wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
 <LI><a href="#[112]">wlan_event_callback</a> from wlan_work_cb.o(i.wlan_event_callback) referenced from wlan_scan.o(i.wlan_scan_done_event)
 <LI><a href="#[111]">wlan_hiq_check_timer</a> from wlan_softap.o(i.wlan_hiq_check_timer) referenced from wlan_sta_info.o(i.wlan_init_sta_struct)
 <LI><a href="#[f3]">wlan_link_retry_callback</a> from wlan_work_cb.o(i.wlan_link_retry_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[138]">wlan_probe_req_recved</a> from wlan_mgmt_engine.o(i.wlan_probe_req_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[131]">wlan_probe_rsp_recved</a> from wlan_mgmt_engine.o(i.wlan_probe_rsp_recved) referenced 2 times from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[fa]">wlan_ps_callback</a> from wlan_work_cb.o(i.wlan_ps_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[f7]">wlan_rate_adaptive_callback</a> from wlan_work_cb.o(i.wlan_rate_adaptive_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[ef]">wlan_recv_callback</a> from wlan_work_cb.o(i.wlan_recv_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[f8]">wlan_sa_query_callback</a> from wlan_work_cb.o(i.wlan_sa_query_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[10f]">wlan_sa_query_timer_handler</a> from wlan_mgmt_proc.o(i.wlan_sa_query_timer_handler) referenced from wlan_sta_info.o(i.wlan_init_sta_info)
 <LI><a href="#[f1]">wlan_scan_callback</a> from wlan_work_cb.o(i.wlan_scan_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[1c1]">wlan_scan_done_event_callback</a> from wlan_event_cb.o(i.wlan_scan_done_event_callback) referenced from wlan_event_cb.o(.constdata)
 <LI><a href="#[1c0]">wlan_scan_result_event_callback</a> from wlan_event_cb.o(i.wlan_scan_result_event_callback) referenced from wlan_event_cb.o(.constdata)
 <LI><a href="#[f2]">wlan_scan_timeout_callback</a> from wlan_work_cb.o(i.wlan_scan_timeout_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[10c]">wlan_scan_timeout_handler</a> from wlan_scan.o(i.wlan_scan_timeout_handler) referenced from wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
 <LI><a href="#[10a]">wlan_scan_timer_handler</a> from wlan_scan.o(i.wlan_scan_timer_handler) referenced from wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
 <LI><a href="#[134]">wlan_sta_auth_recved</a> from wlan_mgmt_engine.o(i.wlan_sta_auth_recved) referenced from wlan_mgmt_engine.o(.constdata)
 <LI><a href="#[f0]">wlan_xmit_complete_callback</a> from wlan_work_cb.o(i.wlan_xmit_complete_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[110]">wpa_resend_timer_handler</a> from wpas_psk.o(i.wpa_resend_timer_handler) referenced from wlan_sta_info.o(i.wlan_init_sta_info)
 <LI><a href="#[f6]">wpas_derive_psk_callback</a> from wpas_psk.o(i.wpas_derive_psk_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[f5]">wpas_send_timeout_callback</a> from wpas_psk.o(i.wpas_send_timeout_callback) referenced from wlan_task.o(i.wifi_create_driver_threads)
 <LI><a href="#[ee]">wq_worker_thread</a> from os_api.o(i.wq_worker_thread) referenced from os_api.o(i.os_create_workqueue)
 <LI><a href="#[178]">write_rf_reg</a> from hal_rf.o(i.write_rf_reg) referenced from hal_ops.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(.text)
</UL>
<P><STRONG><a name="[7ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1e2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[322]"></a>arm_bitreversal_32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, arm_bitreversal2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[7b1]"></a>arm_bitreversal_16</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, arm_bitreversal2.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EFUSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FMC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>HAU_TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HPDF_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HPDF_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>PKCAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>QSPI_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_Alarm_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMPER_STAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TZIAC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>VLVDF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>_gnu_getopt_internal</STRONG> (Thumb, 1802 bytes, Stack size 64 bytes, gnu_getopt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _gnu_getopt_internal &rArr; exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_index
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnu_getopt_long_only
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnu_getopt_long
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnu_getopt
</UL>

<P><STRONG><a name="[1eb]"></a>gnu_getopt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gnu_getopt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>

<P><STRONG><a name="[1ec]"></a>gnu_getopt_long</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, gnu_getopt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = gnu_getopt_long &rArr; _gnu_getopt_internal &rArr; exchange
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[1ed]"></a>gnu_getopt_long_only</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, gnu_getopt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>

<P><STRONG><a name="[3f7]"></a>gnu_getopt_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gnu_getopt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[1ee]"></a>usage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usage &rArr; __c89printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[1f0]"></a>warning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = warning &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server_listen
</UL>

<P><STRONG><a name="[7b2]"></a>iperf_get_verbose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b3]"></a>iperf_get_control_socket</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b4]"></a>iperf_get_test_omit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b5]"></a>iperf_get_test_duration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b6]"></a>iperf_get_test_rate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b7]"></a>iperf_get_test_burst</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b8]"></a>iperf_get_test_role</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7b9]"></a>iperf_get_test_reverse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7ba]"></a>iperf_get_test_blksize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7bb]"></a>iperf_get_test_socket_bufsize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7bc]"></a>iperf_get_test_reporter_interval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7bd]"></a>iperf_get_test_stats_interval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7be]"></a>iperf_get_test_num_streams</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7bf]"></a>iperf_get_test_server_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c0]"></a>iperf_get_test_server_hostname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c1]"></a>iperf_get_test_protocol_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c2]"></a>iperf_get_test_zerocopy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c3]"></a>iperf_get_test_unit_format</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c4]"></a>iperf_get_test_bind_address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>iperf_get_test_udp_counters_64bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>iperf_get_test_one_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
</UL>

<P><STRONG><a name="[7c6]"></a>iperf_set_verbose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c7]"></a>iperf_set_control_socket</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c8]"></a>iperf_set_test_omit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7c9]"></a>iperf_set_test_duration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7ca]"></a>iperf_set_test_reporter_interval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7cb]"></a>iperf_set_test_stats_interval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7cc]"></a>iperf_set_test_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7cd]"></a>iperf_set_test_blksize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7ce]"></a>iperf_set_test_rate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7cf]"></a>iperf_set_test_burst</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7d0]"></a>iperf_set_test_server_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7d1]"></a>iperf_set_test_socket_bufsize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7d2]"></a>iperf_set_test_num_streams</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>iperf_set_test_role</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iperf_set_test_role &rArr; check_sender_has_retransmits
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sender_has_retransmits
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[1f3]"></a>iperf_set_test_server_hostname</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = iperf_set_test_server_hostname &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[1f6]"></a>iperf_set_test_multicast_addr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iperf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f7]"></a>iperf_set_test_reverse</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iperf_set_test_reverse &rArr; check_sender_has_retransmits
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sender_has_retransmits
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[1f8]"></a>iperf_has_zerocopy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_sendfile
</UL>

<P><STRONG><a name="[1fa]"></a>iperf_set_test_zerocopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iperf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_sendfile
</UL>

<P><STRONG><a name="[7d3]"></a>iperf_set_test_unit_format</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>iperf_set_test_bind_address</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = iperf_set_test_bind_address &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[7d4]"></a>iperf_set_test_udp_counters_64bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7d5]"></a>iperf_set_test_one_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[7d6]"></a>get_protocol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>set_protocol</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_protocol &rArr; check_sender_has_retransmits
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sender_has_retransmits
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_test
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_defaults
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_reset
</UL>

<P><STRONG><a name="[1fd]"></a>iperf3__iprintf</STRONG> (Thumb, 96 bytes, Stack size 288 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server_listen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_omit_timer_proc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_omit_timer_proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_test_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>

<P><STRONG><a name="[202]"></a>connect_msg</STRONG> (Thumb, 98 bytes, Stack size 128 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = connect_msg &rArr; getsockdomain &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_inet_ntop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapped_v4_to_regular_v4
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockdomain
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_new_stream
</UL>

<P><STRONG><a name="[6b]"></a>iperf_on_new_stream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = iperf_on_new_stream &rArr; connect_msg &rArr; getsockdomain &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>iperf_on_test_start</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = iperf_on_test_start &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>iperf_on_connect</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = iperf_on_connect &rArr; getsockdomain &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_inet_ntop
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapped_v4_to_regular_v4
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockdomain
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>iperf_on_test_finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>iperf_parse_arguments</STRONG> (Thumb, 942 bytes, Stack size 64 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = iperf_parse_arguments &rArr; iperf_set_test_server_hostname &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_server_hostname
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_role
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnu_getopt_long
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atoi
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof_rate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89printf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[212]"></a>iperf_set_send_state</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = iperf_set_send_state &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client_end
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
</UL>

<P><STRONG><a name="[214]"></a>iperf_check_throttle</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iperf_check_throttle &rArr; timeval_diff &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_timer_proc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_send
</UL>

<P><STRONG><a name="[218]"></a>iperf_send</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iperf_send &rArr; iperf_check_throttle &rArr; timeval_diff &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[26c]"></a>iperf_recv</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iperf_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[21a]"></a>iperf_init_test</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iperf_init_test &rArr; gettimeofday &rArr; sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[21b]"></a>iperf_create_send_timers</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = iperf_create_send_timers &rArr; tmr_create &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[22f]"></a>iperf_exchange_parameters</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = iperf_exchange_parameters &rArr; get_parameters &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[236]"></a>iperf_exchange_results</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[237]"></a>add_to_interval_list</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = add_to_interval_list &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[239]"></a>iperf_new_test</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = iperf_new_test &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[23b]"></a>protocol_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = protocol_new &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_defaults
</UL>

<P><STRONG><a name="[23c]"></a>protocol_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
</UL>

<P><STRONG><a name="[246]"></a>iperf_reporter_callback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = iperf_reporter_callback &rArr; iperf_print_intermediate &rArr; print_interval_results &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[247]"></a>iperf_stats_callback</STRONG> (Thumb, 302 bytes, Stack size 128 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = iperf_stats_callback &rArr; add_to_interval_list &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_tcpinfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_tcpinfo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_retransmits
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_snd_cwnd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_interval_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>iperf_defaults</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = iperf_defaults &rArr; protocol_new &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_new
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[24f]"></a>iperf_free_stream</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = iperf_free_stream &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_test
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_test
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_reset
</UL>

<P><STRONG><a name="[251]"></a>iperf_free_test</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = iperf_free_test &rArr; iperf_free_stream &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[252]"></a>iperf_reset_test</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = iperf_reset_test &rArr; iperf_free_stream &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_stream
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
</UL>

<P><STRONG><a name="[253]"></a>iperf_reset_stats</STRONG> (Thumb, 114 bytes, Stack size 136 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iperf_reset_stats &rArr; gettimeofday &rArr; sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_tcpinfo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_retransmits
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_omit_timer_proc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_omit_timer_proc
</UL>

<P><STRONG><a name="[25a]"></a>iperf_add_stream</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
</UL>

<P><STRONG><a name="[254]"></a>iperf_init_stream</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = iperf_init_stream &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
</UL>

<P><STRONG><a name="[257]"></a>iperf_new_stream</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = iperf_new_stream &rArr; iperf_init_stream &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_stream
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_add_stream
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_streams
</UL>

<P><STRONG><a name="[268]"></a>iflush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[25b]"></a>iperf_create_streams</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = iperf_create_streams &rArr; iperf_new_stream &rArr; iperf_init_stream &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[25e]"></a>iperf_client_end</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = iperf_client_end &rArr; iperf_set_send_state &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[260]"></a>iperf_handle_message_client</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = iperf_handle_message_client &rArr; iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_util
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client_end
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_streams
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_add_select_streams
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_results
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_send_timers
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_test
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[264]"></a>iperf_connect</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = iperf_connect &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[267]"></a>iperf_run_client</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = iperf_run_client &rArr; iperf_handle_message_client &rArr; iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_timeout
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnonblocking
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_util
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_connect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client_end
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_del_select_streams
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iflush
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_recv
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
</UL>

<P><STRONG><a name="[243]"></a>iperf_err</STRONG> (Thumb, 34 bytes, Stack size 280 bytes, iperf_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = iperf_err &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
</UL>

<P><STRONG><a name="[26f]"></a>iperf_strerror</STRONG> (Thumb, 2706 bytes, Stack size 32 bytes, iperf_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iperf_strerror &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
</UL>

<P><STRONG><a name="[271]"></a>iperf_server_listen</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = iperf_server_listen &rArr; netannounce &rArr; lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warning
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[273]"></a>iperf_accept</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = iperf_accept &rArr; iperf_exchange_parameters &rArr; get_parameters &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[275]"></a>iperf_handle_message_server</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = iperf_handle_message_server &rArr; iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_util
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_err
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_results
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[276]"></a>iperf_test_reset</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, iperf_server_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_stream
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[27a]"></a>iperf_run_server</STRONG> (Thumb, 1026 bytes, Stack size 72 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = iperf_run_server &rArr; iperf_handle_message_server &rArr; iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_bind_address
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_closed
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server_listen
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_server
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_timeout
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnonblocking
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_util
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iflush
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_send_timers
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_test
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_recv
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
</UL>

<P><STRONG><a name="[64]"></a>iperf_tcp_recv</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iperf_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = iperf_tcp_recv &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>iperf_tcp_send</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iperf_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = iperf_tcp_send &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nsendfile
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>iperf_tcp_accept</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, iperf_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = iperf_tcp_accept &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>iperf_tcp_listen</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, iperf_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = iperf_tcp_listen &rArr; lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>iperf_tcp_connect</STRONG> (Thumb, 516 bytes, Stack size 96 bytes, iperf_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = iperf_tcp_connect &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>iperf_udp_recv</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, iperf_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = iperf_udp_recv &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>iperf_udp_send</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, iperf_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = iperf_udp_send &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>iperf_udp_accept</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, iperf_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = iperf_udp_accept &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>iperf_udp_listen</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iperf_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = iperf_udp_listen &rArr; netannounce &rArr; lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>iperf_udp_connect</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, iperf_udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = iperf_udp_connect &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>iperf_udp_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iperf_udp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>gettimeofday</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iperf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gettimeofday &rArr; sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnow
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_stats
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_send_timers
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_test
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_send
</UL>

<P><STRONG><a name="[265]"></a>make_cookie</STRONG> (Thumb, 98 bytes, Stack size 328 bytes, iperf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = make_cookie &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_connect
</UL>

<P><STRONG><a name="[279]"></a>is_closed</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, iperf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = is_closed &rArr; lwip_select &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_server
</UL>

<P><STRONG><a name="[288]"></a>timeval_to_double</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iperf_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[242]"></a>timeval_equals</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iperf_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
</UL>

<P><STRONG><a name="[215]"></a>timeval_diff</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, iperf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = timeval_diff &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
</UL>

<P><STRONG><a name="[289]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iperf_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[263]"></a>cpu_util</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iperf_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[266]"></a>netdial</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = netdial &rArr; lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_connect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
</UL>

<P><STRONG><a name="[272]"></a>netannounce</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = netannounce &rArr; lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_server_listen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_listen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_accept
</UL>

<P><STRONG><a name="[21e]"></a>Nread</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_recv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_accept
</UL>

<P><STRONG><a name="[213]"></a>Nwrite</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_connect
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_send
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_accept
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_send_state
</UL>

<P><STRONG><a name="[1f9]"></a>has_sendfile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_zerocopy
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_has_zerocopy
</UL>

<P><STRONG><a name="[27b]"></a>Nsendfile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_send
</UL>

<P><STRONG><a name="[7d7]"></a>getsock_tcp_mss</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>set_tcp_options</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[26b]"></a>setnonblocking</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setnonblocking &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[203]"></a>getsockdomain</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = getsockdomain &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>

<P><STRONG><a name="[249]"></a>has_tcpinfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[224]"></a>has_tcpinfo_retransmits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sender_has_retransmits
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[24a]"></a>save_tcpinfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_stats
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[24b]"></a>get_total_retransmits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_stats
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[24c]"></a>get_snd_cwnd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[24d]"></a>get_rtt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
</UL>

<P><STRONG><a name="[7d8]"></a>build_tcpinfo_message</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_info.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>tmr_create</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tmr_create &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnow
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_usecs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_create_send_timers
</UL>

<P><STRONG><a name="[269]"></a>tmr_timeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tmr_timeout &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnow
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[250]"></a>tmr_cancel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_test
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_test
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_destroy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_server
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_stream
</UL>

<P><STRONG><a name="[26d]"></a>tmr_run</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tmr_run &rArr; add_usecs &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_unlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_lock
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_resort
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnow
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_usecs
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[25d]"></a>tmr_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tmr_reset &rArr; add_usecs &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_resort
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnow
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_usecs
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_omit_timer_proc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_omit_timer_proc
</UL>

<P><STRONG><a name="[295]"></a>tmr_cleanup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_destroy
</UL>

<P><STRONG><a name="[296]"></a>tmr_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cleanup
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
</UL>

<P><STRONG><a name="[297]"></a>unit_atof</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, units.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[20e]"></a>unit_atof_rate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = unit_atof_rate &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[210]"></a>unit_atoi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = unit_atoi &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[23f]"></a>unit_snprintf</STRONG> (Thumb, 382 bytes, Stack size 72 bytes, units.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = unit_snprintf &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
</UL>

<P><STRONG><a name="[28a]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
</UL>

<P><STRONG><a name="[28b]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_total_system_ms_get_privilege_routine
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_usecs
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_timeout
</UL>

<P><STRONG><a name="[29b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[79]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[29c]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
</UL>

<P><STRONG><a name="[39c]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[259]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
</UL>

<P><STRONG><a name="[258]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
</UL>

<P><STRONG><a name="[45f]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[7d9]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_read
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_macro_width_read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_interval_list
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapped_v4_to_regular_v4
</UL>

<P><STRONG><a name="[7da]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[7db]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[7dc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7dd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_calloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_strerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_bind_address
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_multicast_addr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_server_hostname
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_calloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_struct_para_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_test
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_test
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_defaults
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_reset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_new
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[326]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[2a1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_bind_address
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_multicast_addr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_server_hostname
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
</UL>

<P><STRONG><a name="[20d]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[1e9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap_adv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_store
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_load
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_bind_address
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_multicast_addr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_server_hostname
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapped_v4_to_regular_v4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_auth_entry
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cfg_bss
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_softap_setting
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_hash
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf_bits
</UL>

<P><STRONG><a name="[1e6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf3
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ip_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf2
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_accept
</UL>

<P><STRONG><a name="[389]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_find_ipaddr_by_macaddr
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_delete_ipaddr_by_macaddr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mme
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[390]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
</UL>

<P><STRONG><a name="[1e8]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapped_v4_to_regular_v4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>

<P><STRONG><a name="[299]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_mac_addr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_atoi
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atoi
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof_rate
</UL>

<P><STRONG><a name="[2a3]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2b7]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2b4]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2a6]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[211]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2aa]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ps
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_channel_set
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_memory
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
</UL>

<P><STRONG><a name="[208]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap_adv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_atoi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atoi
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof_rate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_plldig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[328]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[327]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[47a]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_to_double
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_plldig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_plldig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_atoi
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atoi
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_mismatch_tracking
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_omit_timer_proc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_server_timers
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_omit_timer_proc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_client_timers
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_results
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_stats_callback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[7de]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[51b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7df]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7e0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[2a2]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[76]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2a8]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2b5]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[7e2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[7e3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2ac]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[515]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[7e4]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2b8]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7e6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[7e7]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32_it.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BusFault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2ba]"></a>DHCPD_FindAddress</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, dhcpd.o(.text.DHCPD_FindAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPD_FindAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32_it.o(.text.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI10_15_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_acquire
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_command_enable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32_it.o(.text.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI5_9_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_acquire
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_command_enable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32_it.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemManage_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, k_port_keil_ac6.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PendSV_Handler &rArr; kernel_scheduler_inPendSV_c &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; deep_sleep_exit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, k_port_keil_ac6.o(.text.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler &rArr; kernel_privilege_call_inSVC_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_call_inSVC_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, k_port_common.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler &rArr; clock_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, system_gd32w51x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>UDP_Receive</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcpd.o(.text.UDP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = UDP_Receive &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcpd.o(.text.dhcpd_daemon)
</UL>
<P><STRONG><a name="[32]"></a>USART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = USART0_IRQHandler &rArr; log_uart_interrupt_handler &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = USART1_IRQHandler &rArr; log_uart_interrupt_handler &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = USART2_IRQHandler &rArr; log_uart_interrupt_handler &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32_it.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsageFault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WLAN_Cmn_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.WLAN_Cmn_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = WLAN_Cmn_IRQHandler &rArr; wlan_interrupt_others_handler &rArr; wlan_interrupt_bcnearly_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WLAN_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.WLAN_Tx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = WLAN_Tx_IRQHandler &rArr; wlan_interrupt_tx_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>WLAN_WKUP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32_it.o(.text.WLAN_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = WLAN_WKUP_IRQHandler &rArr; wlan_ps_wakeup_isr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_wakeup_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[49d]"></a>_impl_idle_thread_id_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_thread.o(.text._impl_idle_thread_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle_task_handle_get
</UL>

<P><STRONG><a name="[2cc]"></a>_impl_kernel_at_rtos_run</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sched_kernel.o(.text._impl_kernel_at_rtos_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _impl_kernel_at_rtos_run &rArr; init_static_thread_list &rArr; _impl_thread_static_init &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_run_theFirstThread
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_interrupt_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_static_thread_list
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_os_start
</UL>

<P><STRONG><a name="[2d4]"></a>_impl_kernel_schedule_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sched_kernel.o(.text._impl_kernel_schedule_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _impl_kernel_schedule_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_lock
</UL>

<P><STRONG><a name="[2d5]"></a>_impl_kernel_schedule_unlock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sched_kernel.o(.text._impl_kernel_schedule_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _impl_kernel_schedule_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_setPendSV
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_unlock
</UL>

<P><STRONG><a name="[2d7]"></a>_impl_mutex_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sync_mutex.o(.text._impl_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_mutex_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>

<P><STRONG><a name="[2d9]"></a>_impl_mutex_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sync_mutex.o(.text._impl_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_mutex_init &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_init
</UL>

<P><STRONG><a name="[2da]"></a>_impl_mutex_lock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sync_mutex.o(.text._impl_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_mutex_lock &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
</UL>

<P><STRONG><a name="[2dc]"></a>_impl_mutex_unlock</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sync_mutex.o(.text._impl_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_mutex_unlock &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
</UL>

<P><STRONG><a name="[2dd]"></a>_impl_publish_pending_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, msg_subscribe.o(.text._impl_publish_pending_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _impl_publish_pending_handler &rArr; list_node_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
</UL>

<P><STRONG><a name="[2e1]"></a>_impl_queue_delete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msg_queue.o(.text._impl_queue_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_queue_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
</UL>

<P><STRONG><a name="[2e2]"></a>_impl_queue_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msg_queue.o(.text._impl_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_queue_init &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_init
</UL>

<P><STRONG><a name="[2e3]"></a>_impl_queue_num_probe</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msg_queue.o(.text._impl_queue_num_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_queue_num_probe &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
</UL>

<P><STRONG><a name="[2e4]"></a>_impl_queue_receive</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, msg_queue.o(.text._impl_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _impl_queue_receive &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_result_take
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_fetch
</UL>

<P><STRONG><a name="[2e6]"></a>_impl_queue_send</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, msg_queue.o(.text._impl_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _impl_queue_send &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_result_take
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_post
</UL>

<P><STRONG><a name="[2e7]"></a>_impl_semaphore_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sync_semaphore.o(.text._impl_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_semaphore_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
</UL>

<P><STRONG><a name="[2e8]"></a>_impl_semaphore_give</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sync_semaphore.o(.text._impl_semaphore_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_semaphore_give &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up_from_isr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_notification
</UL>

<P><STRONG><a name="[2e9]"></a>_impl_semaphore_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sync_semaphore.o(.text._impl_semaphore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_semaphore_init &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
</UL>

<P><STRONG><a name="[2ea]"></a>_impl_semaphore_take</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sync_semaphore.o(.text._impl_semaphore_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _impl_semaphore_take &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_result_take
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_arrived
</UL>

<P><STRONG><a name="[2eb]"></a>_impl_system_busy_wait</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sched_timer.o(.text._impl_system_busy_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_system_busy_wait &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_us_delay
</UL>

<P><STRONG><a name="[2ec]"></a>_impl_thread_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_thread_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
</UL>

<P><STRONG><a name="[cb]"></a>_impl_thread_entry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sched_thread.o(.text._impl_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _impl_thread_entry &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_port_common.o(.text.port_stack_frame_init)
</UL>
<P><STRONG><a name="[2ee]"></a>_impl_thread_init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, sched_thread.o(.text._impl_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _impl_thread_init &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
</UL>

<P><STRONG><a name="[2ef]"></a>_impl_thread_name_toId</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_name_toId))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_thread_name_toId &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_exist
</UL>

<P><STRONG><a name="[2f0]"></a>_impl_thread_sleep</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sched_thread.o(.text._impl_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_thread_sleep &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
</UL>

<P><STRONG><a name="[2f1]"></a>_impl_thread_stack_free_size_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_stack_free_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_thread_stack_free_size_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stack_free_get
</UL>

<P><STRONG><a name="[2f2]"></a>_impl_thread_static_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_static_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _impl_thread_static_init &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setPend
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_stack_frame_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_static_thread_list
</UL>

<P><STRONG><a name="[2f6]"></a>_impl_thread_user_data_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_user_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_thread_user_data_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
</UL>

<P><STRONG><a name="[2f7]"></a>_impl_thread_user_data_register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sched_thread.o(.text._impl_thread_user_data_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_thread_user_data_register &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
</UL>

<P><STRONG><a name="[2f8]"></a>_impl_thread_yield</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sched_thread.o(.text._impl_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _impl_thread_yield &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_yield
</UL>

<P><STRONG><a name="[2f9]"></a>_impl_timer_busy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sched_timer.o(.text._impl_timer_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _impl_timer_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_pending
</UL>

<P><STRONG><a name="[2fa]"></a>_impl_timer_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sched_timer.o(.text._impl_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_timer_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_delete
</UL>

<P><STRONG><a name="[2fb]"></a>_impl_timer_init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sched_timer.o(.text._impl_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_timer_init &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
</UL>

<P><STRONG><a name="[2fc]"></a>_impl_timer_start</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sched_timer.o(.text._impl_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _impl_timer_start &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_start_ext
</UL>

<P><STRONG><a name="[2fd]"></a>_impl_timer_stop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sched_timer.o(.text._impl_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _impl_timer_stop &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_stop
</UL>

<P><STRONG><a name="[2fe]"></a>_impl_timer_total_system_ms_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched_timer.o(.text._impl_timer_total_system_ms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_random_bytes_get
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
</UL>

<P><STRONG><a name="[309]"></a>_impl_trace_postcode_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, k_trace.o(.text._impl_trace_postcode_set))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_start_ext
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_delete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_post
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_fetch
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_notification
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_take_privilege_routine
</UL>

<P><STRONG><a name="[31f]"></a>arm_cfft_f32</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, arm_cfft_f32.o(.text.arm_cfft_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = arm_cfft_f32 &rArr; arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitreversal_32
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
</UL>

<P><STRONG><a name="[321]"></a>arm_cfft_radix8by2_f32</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, arm_cfft_f32.o(.text.arm_cfft_radix8by2_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = arm_cfft_radix8by2_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[320]"></a>arm_cfft_radix8by4_f32</STRONG> (Thumb, 1062 bytes, Stack size 144 bytes, arm_cfft_f32.o(.text.arm_cfft_radix8by4_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[6cc]"></a>arm_cos_f32</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, arm_cos_f32.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_iq_comp
</UL>

<P><STRONG><a name="[323]"></a>arm_radix8_butterfly_f32</STRONG> (Thumb, 1366 bytes, Stack size 184 bytes, arm_cfft_radix8_f32.o(.text.arm_radix8_butterfly_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[552]"></a>arm_sin_cos_f32</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, arm_sin_cos_f32.o(.text.arm_sin_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_iqk_comp
</UL>

<P><STRONG><a name="[6cd]"></a>arm_sin_f32</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, arm_sin_f32.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_iq_comp
</UL>

<P><STRONG><a name="[324]"></a>buffer_print</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, debug_print.o(.text.buffer_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = buffer_print &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_memory
</UL>

<P><STRONG><a name="[232]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_AddItemToArray))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
</UL>

<P><STRONG><a name="[22b]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cjson.o(.text.cJSON_AddItemToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cJSON_AddItemToObject &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[231]"></a>cJSON_CreateArray</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cJSON_CreateArray &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
</UL>

<P><STRONG><a name="[22d]"></a>cJSON_CreateNumber</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cjson.o(.text.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cJSON_CreateNumber &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[229]"></a>cJSON_CreateObject</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cJSON_CreateObject &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[22e]"></a>cJSON_CreateString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cjson.o(.text.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cJSON_CreateString &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[22a]"></a>cJSON_CreateTrue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(.text.cJSON_CreateTrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cJSON_CreateTrue &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[225]"></a>cJSON_Delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[235]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_GetArrayItem))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
</UL>

<P><STRONG><a name="[234]"></a>cJSON_GetArraySize</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_GetArraySize))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
</UL>

<P><STRONG><a name="[223]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[220]"></a>cJSON_Parse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_Parse))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
</UL>

<P><STRONG><a name="[32a]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, cjson.o(.text.cJSON_ParseWithOpts), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>

<P><STRONG><a name="[222]"></a>cJSON_Print</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = cJSON_Print &rArr; print &rArr; sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[227]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text.cJSON_PrintUnformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = cJSON_PrintUnformatted &rArr; print &rArr; sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
</UL>

<P><STRONG><a name="[332]"></a>cau_aes_ecb</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, gd32w51x_cau_aes.o(.text.cau_aes_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cau_aes_ecb &rArr; cau_aes_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_key_config
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_calculate
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_key_struct_para_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_key_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_flag_get
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_fifo_flush
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_enable
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
</UL>

<P><STRONG><a name="[33a]"></a>cau_aes_keysize_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_aes_keysize_config))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_key_config
</UL>

<P><STRONG><a name="[331]"></a>cau_data_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_calculate
</UL>

<P><STRONG><a name="[330]"></a>cau_data_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_calculate
</UL>

<P><STRONG><a name="[33b]"></a>cau_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32w51x_cau.o(.text.cau_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cau_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
</UL>

<P><STRONG><a name="[339]"></a>cau_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_disable))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[338]"></a>cau_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_enable))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[32e]"></a>cau_enable_state_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_enable_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_calculate
</UL>

<P><STRONG><a name="[336]"></a>cau_fifo_flush</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[32f]"></a>cau_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_calculate
</UL>

<P><STRONG><a name="[337]"></a>cau_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gd32w51x_cau.o(.text.cau_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cau_init
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[335]"></a>cau_key_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_key_init))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[333]"></a>cau_key_struct_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32w51x_cau.o(.text.cau_key_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[33e]"></a>cau_struct_para_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32w51x_cau.o(.text.cau_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cau_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
</UL>

<P><STRONG><a name="[2c0]"></a>clock_isr</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, k_clock_systick.o(.text.clock_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[30d]"></a>clock_time_elapsed_get</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, k_clock_systick.o(.text.clock_time_elapsed_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_time_elapsed_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_total_system_ms_get_privilege_routine
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
</UL>

<P><STRONG><a name="[30c]"></a>clock_time_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_clock_systick.o(.text.clock_time_enable))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
</UL>

<P><STRONG><a name="[2d1]"></a>clock_time_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, k_clock_systick.o(.text.clock_time_init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
</UL>

<P><STRONG><a name="[30e]"></a>clock_time_interval_set</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, k_clock_systick.o(.text.clock_time_interval_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_time_interval_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_schedule_request_privilege_routine
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
</UL>

<P><STRONG><a name="[30b]"></a>clock_time_isDisabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_clock_systick.o(.text.clock_time_isDisabled))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
</UL>

<P><STRONG><a name="[a4]"></a>cmd_cb_scan_done</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_cb_scan_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = cmd_cb_scan_done &rArr; wifi_netlink_scan_list_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_list_get
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.text.cmd_wifi_scan)
</UL>
<P><STRONG><a name="[a5]"></a>cmd_cb_scan_fail</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_cb_scan_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cmd_cb_scan_fail &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.text.cmd_wifi_scan)
</UL>
<P><STRONG><a name="[1d5]"></a>cmd_iperf3</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, iperf3_main.o(.text.cmd_iperf3))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = cmd_iperf3 &rArr; iperf_main &rArr; iperf_parse_arguments &rArr; iperf_set_test_server_hostname &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d0]"></a>cmd_mem_status</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_mem_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cmd_mem_status &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_task_stack_get
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_task_handle_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stack_free_get
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_min_free_heap_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_idle_task_handle_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free_heap_size
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem_block_list
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d1]"></a>cmd_ping</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, ping.o(.text.cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cmd_ping &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[346]"></a>cmd_tcp</STRONG> (Thumb, 1876 bytes, Stack size 120 bytes, tcp_test.o(.text.cmd_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cmd_tcp &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf2
</UL>

<P><STRONG><a name="[347]"></a>cmd_udp</STRONG> (Thumb, 1608 bytes, Stack size 56 bytes, udp_test.o(.text.cmd_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cmd_udp &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_atoi
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf2
</UL>

<P><STRONG><a name="[298]"></a>co_printf</STRONG> (Thumb, 68 bytes, Stack size 416 bytes, debug_print.o(.text.co_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset_flag_check
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_status_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_list_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_channel_set
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_scan
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf3
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cb_scan_fail
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cb_scan_done
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_info_print
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_scan
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_rssi
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ps
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_mac_addr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ip_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_disconnect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_connect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_close
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_channel_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap_adv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_memory
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf2
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_group_join
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_exit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_wakeup_isr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_tx_handler
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_rx_handler (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_start_ext
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_delete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up_from_isr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_post
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_fetch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysDefineHeapRegions
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_task_func
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_open
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_result_notify
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_disconnect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_connect
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_load
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ipaddr_set
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_disconnect_req
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_wpa_ie
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_rsn_ie
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read16
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_rx_isr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start_create_bss
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_channel_set
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network_by_ssid
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_dump_driver_threads
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_enable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_disable
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_auth_entry
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_security_info
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_get_assoc_info
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_scan_entry
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_ps_interval
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_ps
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_promisc_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_promisc_filter
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mac_addr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_ipaddr_entry
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_idle_ps_delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel_mask
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_bw
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_scan_complete
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_disconnect
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_ps
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_driver_revision
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_bw
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_bss_rssi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect_req_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cfg_bss
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_xmitframe
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_show_trx_resource
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_softap_setting
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_alloc
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_xmit_struct
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_recv_struct
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmit_struct
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_bcmc_stainfo
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_delete_driver_threads
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_create_driver_threads
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_init
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mac_addr
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_open
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_close
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atoi
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_atof_rate
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx_buf_empty
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ps_poll
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_send_timeout_callback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_derive_psk_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timeout_callback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_callback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry_callback
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_ssid
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_network_mode
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_add_wep
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_scan_result
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_del_key
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_efuse_check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_reg_dword
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_reg_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_wmm_param
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_desc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_pairwise_key
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_crystal_cap
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_beacon_tx_desc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_psd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_plldig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rck
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_lnak
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_all_keys
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_bb_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_update_ctrtbl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_set_ctlf_fback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_reporttbl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_cca_score
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_rx_desc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lps_ctrl
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dump_adc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_del_pairwise_key
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_continuous_tx_test
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_conf_trig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_ap_alive
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_validate_ssid
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_wireless_mode
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitbuf
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_make_wlanhdr
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_bcmc_frame
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_attrib
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_qos_acm
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_delete_aid
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_enter_sleep
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_more_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_hiq_check_timer
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_skb
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_short_skb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_event_callback
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_proc_sta_pwrbit
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_short_pktbuf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_promisc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_eapol
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_snap_header
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanhdr_to_ethhdr
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_port_ctrl
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_indicate_pkts
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_duplicate_data
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ap2sta_frame
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_start
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_del_sta
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_try_up_done
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_up
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_down
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_analyze_mask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timeout_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dyn_chk_timer_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_callback
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bwmode
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_key
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_network
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_network
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_req
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_encrypt
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_decrypt
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_beacon_info
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_commit_recved
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_vendor
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_manufacturer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_rsp
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_rsp_recved
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_req_recved
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_recved
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_deauth_recved
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mgmtframe
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_sa_query_recved
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sa_query
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mme
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mic
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_desc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_rx_desc
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_config
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_cal
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wait_rx_buf_empty
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_tracking
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_mismatch_tracking
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_vcok
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_rx_dck
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_dpd
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfo_tracking
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_node_entry
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_security
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcvk
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcik
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event_callback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event_callback
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_status_check
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_auth_expire
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_assoc_expire
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_failed_proc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_hash
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_igtk
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_rsp_assoc
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_wpa_rsn_ie
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ptk
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_ptk
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_gtk
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_group_key_rekey
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_eapol_key_recved
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_wpa_rsn_ie
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_key_recved
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_xmit_complete
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_beacon
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_func
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx_buf_empty_locked
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rx_buf_empty_locked
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_process
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_beacon_process
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_timeout_process
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_poll_timeout_process
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_doze_cond_match
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_tx_pkt_process
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_uc_match_process
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpds_wakeup_process
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tx_packet_in
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ps_ctrl
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_lpds_mode
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_doze_process
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_awake_process
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_lpds_mode
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtim_rx_bc_timeout_process
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_timeout_process
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_tx_pkt_process
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_token
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit_element_ecc
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_PRF
</UL>

<P><STRONG><a name="[367]"></a>command_handler</STRONG> (Thumb, 388 bytes, Stack size 288 bytes, cmd_shell.o(.text.command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = command_handler &rArr; sys_task_wait &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
</UL>

<P><STRONG><a name="[368]"></a>console_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, console.o(.text.console_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = console_init &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[a6]"></a>console_task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, console.o(.text.console_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = console_task &rArr; command_handler &rArr; sys_task_wait &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.text.console_init)
</UL>
<P><STRONG><a name="[2bb]"></a>deep_sleep_exit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_wlan.o(.text.deep_sleep_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = deep_sleep_exit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_disable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLAN_WKUP_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[36e]"></a>deepsleep_wfi_set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp_wlan.o(.text.deepsleep_wfi_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deepsleep_wfi_set &rArr; pmu_to_deepsleepmode
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_wait_event
</UL>

<P><STRONG><a name="[372]"></a>dhcp_arp_reply</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = dhcp_arp_reply &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[378]"></a>dhcp_cleanup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dhcp.o(.text.dhcp_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_cleanup &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_close
</UL>

<P><STRONG><a name="[1de]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 834 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[1df]"></a>dhcp_fine_tmr</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[2c3]"></a>dhcp_process</STRONG> (Thumb, 1196 bytes, Stack size 328 bytes, dhcpd.o(.text.dhcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dhcp_process &rArr; make_dhcpd_packet &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_softap_sta_add
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_pickup_opt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindAddress
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[379]"></a>dhcp_release_and_stop</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_release_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = dhcp_release_and_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[37b]"></a>dhcp_renew</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[e8]"></a>dhcp_start</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_netif.o(.text.wifi_netif_start_dhcp)
</UL>
<P><STRONG><a name="[e3]"></a>dhcp_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dhcp.o(.text.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = dhcp_stop &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wifi_netif.o(.text.wifi_netif_stop_dhcp)
<LI> wifi_netif.o(.text.wifi_netif_close)
</UL>
<P><STRONG><a name="[38f]"></a>dhcpd_daemon</STRONG> (Thumb, 692 bytes, Stack size 88 bytes, dhcpd.o(.text.dhcpd_daemon))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcpd_daemon &rArr; ip4addr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
</UL>

<P><STRONG><a name="[388]"></a>dhcpd_pickup_opt</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, dhcpd.o(.text.dhcpd_pickup_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcpd_pickup_opt &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
</UL>

<P><STRONG><a name="[391]"></a>dma1_config</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, dma.o(.text.dma1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dma1_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_multi_data_mode_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[393]"></a>dma_deinit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gd32w51x_dma.o(.text.dma_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma1_config
</UL>

<P><STRONG><a name="[394]"></a>dma_multi_data_mode_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gd32w51x_dma.o(.text.dma_multi_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_multi_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma1_config
</UL>

<P><STRONG><a name="[398]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 1296 bytes, Stack size 40 bytes, dns.o(.text.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[41d]"></a>dns_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dns.o(.text.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[382]"></a>dns_setserver</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dns.o(.text.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[1e1]"></a>dns_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dns.o(.text.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[34d]"></a>dump_mem_block_list</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, malloc.o(.text.dump_mem_block_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dump_mem_block_list &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>

<P><STRONG><a name="[3a0]"></a>efuse_macro_width_read</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, gd32w51x_efuse.o(.text.efuse_macro_width_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = efuse_macro_width_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read
</UL>

<P><STRONG><a name="[3a1]"></a>efuse_read</STRONG> (Thumb, 1504 bytes, Stack size 56 bytes, gd32w51x_efuse.o(.text.efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = efuse_read &rArr; efuse_macro_width_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_macro_width_read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_map_read
</UL>

<P><STRONG><a name="[3a2]"></a>eloop_destroy</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wifi_eloop.o(.text.eloop_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = eloop_destroy &rArr; sys_task_msg_flush &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_task
</UL>

<P><STRONG><a name="[361]"></a>eloop_event_register</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wifi_eloop.o(.text.eloop_event_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = eloop_event_register &rArr; sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_scan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
</UL>

<P><STRONG><a name="[35c]"></a>eloop_event_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wifi_eloop.o(.text.eloop_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_stop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_disconnect
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_scan_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
</UL>

<P><STRONG><a name="[345]"></a>eloop_event_unregister</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, wifi_eloop.o(.text.eloop_event_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eloop_event_unregister &rArr; sys_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cb_scan_fail
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cb_scan_done
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_scan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_scan_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
</UL>

<P><STRONG><a name="[3a6]"></a>eloop_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_eloop.o(.text.eloop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eloop_init &rArr; sys_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_task
</UL>

<P><STRONG><a name="[3a7]"></a>eloop_message_send</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_eloop.o(.text.eloop_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = eloop_message_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_forward_netlink_message
</UL>

<P><STRONG><a name="[3a8]"></a>eloop_run</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, wifi_eloop.o(.text.eloop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = eloop_run &rArr; wifi_mgmt_cb_run_state_machine &rArr; sm_MAINTAIN_CONNECTION_SCAN_Enter &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_yield
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_task
</UL>

<P><STRONG><a name="[4e5]"></a>eloop_terminate_flag_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_eloop.o(.text.eloop_terminate_flag_reset))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
</UL>

<P><STRONG><a name="[3ac]"></a>eloop_timeout_cancel</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wifi_eloop.o(.text.eloop_timeout_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = eloop_timeout_cancel &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[3ad]"></a>eloop_timeout_register</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wifi_eloop.o(.text.eloop_timeout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = eloop_timeout_register &rArr; sys_calloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_calloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[408]"></a>err_to_errno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, err.o(.text.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[3b1]"></a>etharp_cleanup_netif</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, etharp.o(.text.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = etharp_cleanup_netif &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[3b3]"></a>etharp_input</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, etharp.o(.text.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[aa]"></a>etharp_output</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, etharp.o(.text.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text.ethernetif_init)
</UL>
<P><STRONG><a name="[37f]"></a>etharp_query</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, etharp.o(.text.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = etharp_query &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[3ba]"></a>etharp_request</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, etharp.o(.text.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[1dd]"></a>etharp_tmr</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, etharp.o(.text.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = etharp_tmr &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[db]"></a>ethernet_input</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ethernet.o(.text.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text.tcpip_input)
</UL>
<P><STRONG><a name="[3b5]"></a>ethernet_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ethernet.o(.text.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3bd]"></a>ethernetif_deinit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetif.o(.text.ethernetif_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ethernetif_deinit &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_close
</UL>

<P><STRONG><a name="[e5]"></a>ethernetif_init</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ethernetif.o(.text.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ethernetif_init &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_register_ethernetif
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_netif.o(.text.wifi_netif_open)
</UL>
<P><STRONG><a name="[ac]"></a>ethernetif_input</STRONG> (Thumb, 660 bytes, Stack size 56 bytes, ethernetif.o(.text.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ethernetif_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text.ethernetif_init)
</UL>
<P><STRONG><a name="[3c0]"></a>ethernetif_register_wifi</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernetif.o(.text.ethernetif_register_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ethernetif_register_wifi &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_register_ethernetif
</UL>

<P><STRONG><a name="[36a]"></a>exti_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_exti.o(.text.exti_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[36f]"></a>exti_init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, gd32w51x_exti.o(.text.exti_init))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_wfi_set
</UL>

<P><STRONG><a name="[369]"></a>exti_interrupt_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_exti.o(.text.exti_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[36b]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32w51x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_wfi_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[d1]"></a>gd_hardware_poll</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, trng.o(.text.gd_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = gd_hardware_poll &rArr; random_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[4d2]"></a>gpio_af_set</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, gd32w51x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[4d3]"></a>gpio_mode_set</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, gd32w51x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[4d4]"></a>gpio_output_options_set</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, gd32w51x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[3c6]"></a>hau_data_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3c2]"></a>hau_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32w51x_hau.o(.text.hau_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hau_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3c7]"></a>hau_digest_calculation_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_digest_calculation_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3cc]"></a>hau_digest_read</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_digest_read))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_sha_md5_digest_read
</UL>

<P><STRONG><a name="[3c8]"></a>hau_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3ca]"></a>hau_hmac_sha_1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gd32w51x_hau_sha_md5.o(.text.hau_hmac_sha_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hau_hmac_sha_1 &rArr; hau_hmac_calculate &rArr; hau_sha_md5_digest_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
</UL>

<P><STRONG><a name="[3cb]"></a>hau_hmac_sha_256</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32w51x_hau_sha_md5.o(.text.hau_hmac_sha_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hau_hmac_sha_256 &rArr; hau_hmac_calculate &rArr; hau_sha_md5_digest_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
</UL>

<P><STRONG><a name="[3c4]"></a>hau_init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3c5]"></a>hau_last_word_validbits_num_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32w51x_hau.o(.text.hau_last_word_validbits_num_config))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[3cd]"></a>hw_cryp_aes_ecb</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, bsp_wlan.o(.text.hw_cryp_aes_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_struct_para_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_deinit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_WRAP
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_UnWRAP
</UL>

<P><STRONG><a name="[3cf]"></a>hw_crypt_lock_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_wlan.o(.text.hw_crypt_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hw_crypt_lock_init &rArr; sys_mutex_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
</UL>

<P><STRONG><a name="[3d0]"></a>hw_hmac_sha1</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_wlan.o(.text.hw_hmac_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_sha_1
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_nonce
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>

<P><STRONG><a name="[3d1]"></a>hw_hmac_sha256</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_wlan.o(.text.hw_hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_sha_256
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>

<P><STRONG><a name="[3d2]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(.text.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[3d4]"></a>icmp_input</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, icmp.o(.text.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3da]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(.text.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[41c]"></a>igmp_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, igmp.o(.text.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3db]"></a>igmp_input</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, igmp.o(.text.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3dc]"></a>igmp_joingroup</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, igmp.o(.text.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[3dd]"></a>igmp_joingroup_netif</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, igmp.o(.text.igmp_joingroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[3e0]"></a>igmp_leavegroup</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, igmp.o(.text.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[3e1]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, igmp.o(.text.igmp_leavegroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[3eb]"></a>igmp_lookfor_group</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, igmp.o(.text.igmp_lookfor_group))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[459]"></a>igmp_report_groups</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, igmp.o(.text.igmp_report_groups))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[3e5]"></a>igmp_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, igmp.o(.text.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[3e6]"></a>igmp_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, igmp.o(.text.igmp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_stop &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[1e0]"></a>igmp_tmr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, igmp.o(.text.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = igmp_tmr &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[2de]"></a>impl_kernel_irq_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sched_kernel.o(.text.impl_kernel_irq_disable))
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_busy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_total_system_ms_get_privilege_routine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_stop_privilege_routine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_privilege_routine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_schedule_request_privilege_routine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init_privilege_routine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_delete_privilege_routine
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_user_data_register_privilege_routine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_stack_free_get_privilege_routine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep_privilege_routine
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_name_toId_privilege_routine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_delete_privilege_routine
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reamining_elapsed_handler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_publish_pending_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_take_privilege_routine
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_init_privilege_routine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_give_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock_privilege_routine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock_privilege_routine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[2e0]"></a>impl_kernel_irq_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sched_kernel.o(.text.impl_kernel_irq_enable))
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_busy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_total_system_ms_get_privilege_routine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_stop_privilege_routine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_privilege_routine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_schedule_request_privilege_routine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init_privilege_routine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_delete_privilege_routine
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_busy_wait_privilege_routine
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_user_data_register_privilege_routine
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_stack_free_get_privilege_routine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep_privilege_routine
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_name_toId_privilege_routine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_delete_privilege_routine
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reamining_elapsed_handler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_publish_pending_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_take_privilege_routine
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_init_privilege_routine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_give_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock_privilege_routine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock_privilege_routine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[3d6]"></a>inet_chksum</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, inet_chksum.o(.text.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[3d5]"></a>inet_chksum_pbuf</STRONG> (Thumb, 312 bytes, Stack size 44 bytes, inet_chksum.o(.text.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[3e7]"></a>inet_chksum_pseudo</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, inet_chksum.o(.text.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pseudo
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[2cf]"></a>init_static_thread_list</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, static_init.o(.text.init_static_thread_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_static_thread_list &rArr; _impl_thread_static_init &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
</UL>

<P><STRONG><a name="[3b4]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ip4_addr.o(.text.ip4_addr_isbroadcast_u32))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[3e8]"></a>ip4_frag</STRONG> (Thumb, 620 bytes, Stack size 88 bytes, ip4_frag.o(.text.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[dc]"></a>ip4_input</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, ip4.o(.text.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text.tcpip_input)
</UL>
<P><STRONG><a name="[3d7]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, ip4.o(.text.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[3e4]"></a>ip4_output_if_opt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, ip4.o(.text.ip4_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[3f1]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, ip4.o(.text.ip4_output_if_opt_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[3f2]"></a>ip4_output_if_src</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ip4.o(.text.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[3ec]"></a>ip4_reass</STRONG> (Thumb, 1476 bytes, Stack size 56 bytes, ip4_frag.o(.text.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ip4_reass &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[3d9]"></a>ip4_route</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ip4.o(.text.ip4_route))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[356]"></a>ip4addr_aton</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, ip4_addr.o(.text.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ip4addr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ip_set
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
</UL>

<P><STRONG><a name="[467]"></a>ip4addr_ntoa</STRONG> (Thumb, 362 bytes, Stack size 52 bytes, ip4_addr.o(.text.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip4addr_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[414]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, ip4_addr.o(.text.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_inet_ntop
</UL>

<P><STRONG><a name="[3f5]"></a>ip_chksum_pseudo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet_chksum.o(.text.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1dc]"></a>ip_reass_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip4_frag.o(.text.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[3f6]"></a>ipaddr_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ip4_addr.o(.text.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
</UL>

<P><STRONG><a name="[348]"></a>iperf_main</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, iperf3_main.o(.text.iperf_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = iperf_main &rArr; iperf_parse_arguments &rArr; iperf_set_test_server_hostname &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_strerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_test
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_test
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_defaults
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnu_getopt_reset
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_iperf3
</UL>

<P><STRONG><a name="[ae]"></a>iperf_test_task</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, iperf3_main.o(.text.iperf_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = iperf_test_task &rArr; iperf_run_server &rArr; iperf_handle_message_server &rArr; iperf_exchange_results &rArr; get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stack_free_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_strerror
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_test
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_get_test_one_off
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_test
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf3_main.o(.text.iperf_main)
</UL>
<P><STRONG><a name="[305]"></a>k_allocated</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_malloc.o(.text.k_allocated))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
</UL>

<P><STRONG><a name="[306]"></a>k_free</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, k_malloc.o(.text.k_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_free &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
</UL>

<P><STRONG><a name="[307]"></a>k_malloc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, k_malloc.o(.text.k_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_malloc &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init_privilege_routine
</UL>

<P><STRONG><a name="[310]"></a>k_memcmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, k_linker.o(.text.k_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_name_toId_privilege_routine
</UL>

<P><STRONG><a name="[308]"></a>k_memcpy</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, k_linker.o(.text.k_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_schedule
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
</UL>

<P><STRONG><a name="[302]"></a>k_memset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_linker.o(.text.k_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_malloc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init_privilege_routine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_delete_privilege_routine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_frame_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_schedule
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_init_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[1]"></a>kernel_idle_thread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_idle_thread))
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_idle_loop_fn
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_idle_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_idle_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_thread.o(_INIT_OS_THREAD_LIST)
</UL>
<P><STRONG><a name="[2db]"></a>kernel_isInThreadMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_isInThreadMode))
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInThreadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_yield
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_sleep
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_lock
</UL>

<P><STRONG><a name="[3fc]"></a>kernel_message_notification</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_message_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kernel_message_notification &rArr; kthread_message_notification &rArr; _impl_semaphore_give &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
</UL>

<P><STRONG><a name="[2bf]"></a>kernel_privilege_call_inSVC_c</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sched_kernel.o(.text.kernel_privilege_call_inSVC_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kernel_privilege_call_inSVC_c
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[2d8]"></a>kernel_privilege_invoke</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sched_kernel.o(.text.kernel_privilege_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_total_system_ms_get
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_stop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_start
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_delete
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_yield
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_register
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_stack_free_size_get
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_sleep
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_name_toId
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_system_busy_wait
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_give
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_delete
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_num_probe
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_unlock
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_delete
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_entry
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_total_system_ms_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_schedule
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
</UL>

<P><STRONG><a name="[2e5]"></a>kernel_schedule_result_take</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_schedule_result_take))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
</UL>

<P><STRONG><a name="[0]"></a>kernel_schedule_thread</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_schedule_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = kernel_schedule_thread &rArr;  kernel_schedule_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reamining_elapsed_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_publish_pending_handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kthread_message_arrived
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_thread.o(_INIT_OS_THREAD_LIST)
</UL>
<P><STRONG><a name="[2be]"></a>kernel_scheduler_inPendSV_c</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, sched_kernel.o(.text.kernel_scheduler_inPendSV_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = kernel_scheduler_inPendSV_c &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_allocated
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next_condition
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_specific
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_total_system_ms_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_schedule
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2f3]"></a>kernel_stack_frame_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_stack_frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kernel_stack_frame_init &rArr; port_stack_frame_init &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_frame_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
</UL>

<P><STRONG><a name="[2ed]"></a>kernel_thread_runContextGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched_kernel.o(.text.kernel_thread_runContextGet))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_flush
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep_privilege_routine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_take_privilege_routine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock_privilege_routine
</UL>

<P><STRONG><a name="[3fe]"></a>kthread_message_arrived</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_thread.o(.text.kthread_message_arrived))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kthread_message_arrived &rArr; _impl_semaphore_take &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
</UL>

<P><STRONG><a name="[3fa]"></a>kthread_message_idle_loop_fn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_thread.o(.text.kthread_message_idle_loop_fn))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_idle_thread
</UL>

<P><STRONG><a name="[3fd]"></a>kthread_message_notification</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, k_thread.o(.text.kthread_message_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kthread_message_notification &rArr; _impl_semaphore_give &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_give
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_message_notification
</UL>

<P><STRONG><a name="[313]"></a>linker_list_transaction_common</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, k_linker.o(.text.linker_list_transaction_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linker_list_transaction_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init_privilege_routine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_delete_privilege_routine
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_callback_fromTimeOut
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>

<P><STRONG><a name="[402]"></a>linker_list_transaction_specific</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, k_linker.o(.text.linker_list_transaction_specific))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linker_list_transaction_specific
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setPend
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>

<P><STRONG><a name="[3af]"></a>list_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dlist.o(.text.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
</UL>

<P><STRONG><a name="[3ae]"></a>list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dlist.o(.text.list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_xmit_struct
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_recv_struct
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitbuf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enqueue_frame
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_skb
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_short_skb
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_network
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[3a4]"></a>list_del</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlist.o(.text.list_del))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
</UL>

<P><STRONG><a name="[721]"></a>list_del_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dlist.o(.text.list_del_init))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitbuf
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_short_pktbuf
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_recvframe
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_network
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_network
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitbuf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[3aa]"></a>list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dlist.o(.text.list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
</UL>

<P><STRONG><a name="[304]"></a>list_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_linker.o(.text.list_head))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_give_privilege_routine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock_privilege_routine
</UL>

<P><STRONG><a name="[2ff]"></a>list_iterator_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, k_linker.o(.text.list_iterator_init))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[300]"></a>list_iterator_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_linker.o(.text.list_iterator_next))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[401]"></a>list_iterator_next_condition</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, k_linker.o(.text.list_iterator_next_condition))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
</UL>

<P><STRONG><a name="[4cb]"></a>list_node_isExisted</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, k_linker.o(.text.list_node_isExisted))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
</UL>

<P><STRONG><a name="[2df]"></a>list_node_pop</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, k_linker.o(.text.list_node_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_node_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reamining_elapsed_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_publish_pending_handler
</UL>

<P><STRONG><a name="[4cc]"></a>list_node_push</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, k_linker.o(.text.list_node_push))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback_fromTimeOut
</UL>

<P><STRONG><a name="[68e]"></a>lpds_preconfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_wlan.o(.text.lpds_preconfig))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_wait_event
</UL>

<P><STRONG><a name="[274]"></a>lwip_accept</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, sockets.o(.text.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_accept
</UL>

<P><STRONG><a name="[280]"></a>lwip_bind</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, sockets.o(.text.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[25f]"></a>lwip_close</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, sockets.o(.text.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lwip_close &rArr; netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_reset
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_server
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_accept
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_server
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_client_end
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_accept
</UL>

<P><STRONG><a name="[282]"></a>lwip_connect</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sockets.o(.text.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_connect &rArr; netconn_disconnect &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_accept
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[28e]"></a>lwip_fcntl</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sockets.o(.text.lwip_fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnonblocking
</UL>

<P><STRONG><a name="[27e]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netdb.o(.text.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[27c]"></a>lwip_getaddrinfo</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, netdb.o(.text.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[206]"></a>lwip_getpeername</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sockets.o(.text.lwip_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lwip_getpeername &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_stream
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
</UL>

<P><STRONG><a name="[255]"></a>lwip_getsockname</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sockets.o(.text.lwip_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockdomain
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_stream
</UL>

<P><STRONG><a name="[27f]"></a>lwip_getsockopt</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, sockets.o(.text.lwip_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lwip_getsockopt &rArr; tcpip_callback &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[21f]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(.text.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPD_FindAddress
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
</UL>

<P><STRONG><a name="[205]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(.text.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>

<P><STRONG><a name="[204]"></a>lwip_inet_ntop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sockets.o(.text.lwip_inet_ntop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lwip_inet_ntop &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>

<P><STRONG><a name="[415]"></a>lwip_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, init.o(.text.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lwip_init &rArr; udp_init &rArr; trng_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[281]"></a>lwip_listen</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sockets.o(.text.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
</UL>

<P><STRONG><a name="[ba]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_netconn_do_bind &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_bind)
</UL>
<P><STRONG><a name="[c4]"></a>lwip_netconn_do_close</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = lwip_netconn_do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_recv_data_tcp)
</UL>
<P><STRONG><a name="[bb]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_connect)
</UL>
<P><STRONG><a name="[bc]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lwip_netconn_do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_lib.o(.text.netconn_prepare_delete)
<LI> api_lib.o(.text.netconn_delete)
</UL>
<P><STRONG><a name="[bd]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_disconnect)
</UL>
<P><STRONG><a name="[be]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_getaddr)
</UL>
<P><STRONG><a name="[bf]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[c0]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_join_leave_group)
</UL>
<P><STRONG><a name="[c1]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, api_msg.o(.text.lwip_netconn_do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[c2]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lwip_netconn_do_newconn &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[c3]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, api_msg.o(.text.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_lib.o(.text.netconn_tcp_recvd)
<LI> api_lib.o(.text.netconn_recv_data_tcp)
</UL>
<P><STRONG><a name="[c5]"></a>lwip_netconn_do_send</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_send)
</UL>
<P><STRONG><a name="[c6]"></a>lwip_netconn_do_write</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, api_msg.o(.text.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text.netconn_write_vectors_partly)
</UL>
<P><STRONG><a name="[438]"></a>lwip_netconn_is_err_msg</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_is_err_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_netconn_is_err_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[261]"></a>lwip_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sockets.o(.text.lwip_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
</UL>

<P><STRONG><a name="[286]"></a>lwip_recv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sockets.o(.text.lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
</UL>

<P><STRONG><a name="[284]"></a>lwip_recvfrom</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, sockets.o(.text.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_accept
</UL>

<P><STRONG><a name="[26a]"></a>lwip_select</STRONG> (Thumb, 938 bytes, Stack size 112 bytes, sockets.o(.text.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_closed
</UL>

<P><STRONG><a name="[28c]"></a>lwip_send</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sockets.o(.text.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>

<P><STRONG><a name="[441]"></a>lwip_sendto</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, sockets.o(.text.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[256]"></a>lwip_setsockopt</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, sockets.o(.text.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tcp_options
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_accept
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_init_stream
</UL>

<P><STRONG><a name="[27d]"></a>lwip_socket</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sockets.o(.text.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
</UL>

<P><STRONG><a name="[399]"></a>lwip_strnicmp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, def.o(.text.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[285]"></a>lwip_write</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sockets.o(.text.lwip_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lwip_write &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_connect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_accept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_os_start
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_os_init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[38b]"></a>make_dhcpd_packet</STRONG> (Thumb, 598 bytes, Stack size 288 bytes, dhcpd.o(.text.make_dhcpd_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = make_dhcpd_packet &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
</UL>

<P><STRONG><a name="[2c2]"></a>mem_calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem.o(.text.mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mem_calloc &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[2c7]"></a>mem_free</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, mem.o(.text.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_deinit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[417]"></a>mem_init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, mem.o(.text.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; sys_sema_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[38e]"></a>mem_malloc</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, mem.o(.text.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[44e]"></a>mem_trim</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, mem.o(.text.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[3e2]"></a>memp_free</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, memp.o(.text.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[418]"></a>memp_init</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, memp.o(.text.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3e3]"></a>memp_malloc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, memp.o(.text.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[40c]"></a>netbuf_delete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netbuf.o(.text.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
</UL>

<P><STRONG><a name="[445]"></a>netbuf_free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, netbuf.o(.text.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[443]"></a>netbuf_ref</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, netbuf.o(.text.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[405]"></a>netconn_accept</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, api_lib.o(.text.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[315]"></a>netconn_alloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, api_msg.o(.text.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; sys_queue_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[409]"></a>netconn_bind</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_bind &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[40e]"></a>netconn_connect</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_connect &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[407]"></a>netconn_delete</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[40d]"></a>netconn_disconnect</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_disconnect &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[413]"></a>netconn_err</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_lib.o(.text.netconn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netconn_err
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
</UL>

<P><STRONG><a name="[31d]"></a>netconn_free</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, api_msg.o(.text.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = netconn_free &rArr; sys_sema_free &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[406]"></a>netconn_getaddr</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[40f]"></a>netconn_gethostbyname</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, api_lib.o(.text.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[40a]"></a>netconn_join_leave_group</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_join_leave_group &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[41f]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[44a]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, api_lib.o(.text.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[40b]"></a>netconn_prepare_delete</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_prepare_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_prepare_delete &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[43a]"></a>netconn_recv_tcp_pbuf_flags</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, api_lib.o(.text.netconn_recv_tcp_pbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[43e]"></a>netconn_recv_udp_raw_netbuf_flags</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, api_lib.o(.text.netconn_recv_udp_raw_netbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = netconn_recv_udp_raw_netbuf_flags &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
</UL>

<P><STRONG><a name="[444]"></a>netconn_send</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_send &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[43c]"></a>netconn_tcp_recvd</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, api_lib.o(.text.netconn_tcp_recvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_tcp_recvd &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[442]"></a>netconn_write_partly</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_lib.o(.text.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = netconn_write_partly &rArr; netconn_write_vectors_partly &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
</UL>

<P><STRONG><a name="[454]"></a>netconn_write_vectors_partly</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, api_lib.o(.text.netconn_write_vectors_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = netconn_write_vectors_partly &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[455]"></a>netif_add</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, netif.o(.text.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_open
</UL>

<P><STRONG><a name="[446]"></a>netif_find</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, netif.o(.text.netif_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[483]"></a>netif_get_by_index</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, netif.o(.text.netif_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[419]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[e4]"></a>netif_remove</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, netif.o(.text.netif_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = netif_remove &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_netif.o(.text.wifi_netif_close)
</UL>
<P><STRONG><a name="[377]"></a>netif_set_addr</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, netif.o(.text.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[4ec]"></a>netif_set_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_open
</UL>

<P><STRONG><a name="[e9]"></a>netif_set_down</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, netif.o(.text.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_netif.o(.text.wifi_netif_stop_dhcp)
</UL>
<P><STRONG><a name="[e7]"></a>netif_set_up</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, netif.o(.text.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wifi_netif.o(.text.wifi_netif_set_up)
<LI> wifi_netif.o(.text.wifi_netif_start_dhcp)
</UL>
<P><STRONG><a name="[45a]"></a>netifapi_netif_common</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, netifapi.o(.text.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_start_dhcp
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_up
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_close
</UL>

<P><STRONG><a name="[45c]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, netifapi.o(.text.netifapi_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_ip
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_addr
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_close
</UL>

<P><STRONG><a name="[46a]"></a>nvic_irq_enable</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, gd32w51x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[469]"></a>nvic_priority_group_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32w51x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3bc]"></a>pbuf_add_header</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_add_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2c4]"></a>pbuf_alloc</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[3e9]"></a>pbuf_alloced_custom</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3ea]"></a>pbuf_cat</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[462]"></a>pbuf_chain</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[3f3]"></a>pbuf_clen</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pbuf.o(.text.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[3b9]"></a>pbuf_clone</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3d8]"></a>pbuf_copy</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[38c]"></a>pbuf_copy_partial</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2c6]"></a>pbuf_free</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[43b]"></a>pbuf_free_header</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pbuf.o(.text.pbuf_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pbuf_free_header &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[3ee]"></a>pbuf_header_force</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pbuf.o(.text.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[39e]"></a>pbuf_put_at</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, pbuf.o(.text.pbuf_put_at))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[374]"></a>pbuf_realloc</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, pbuf.o(.text.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[3b8]"></a>pbuf_ref</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_ref &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3bb]"></a>pbuf_remove_header</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_remove_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[39d]"></a>pbuf_take</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, pbuf.o(.text.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[39f]"></a>pbuf_take_at</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, pbuf.o(.text.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[39b]"></a>pbuf_try_get_at</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pbuf.o(.text.pbuf_try_get_at))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[466]"></a>ping</STRONG> (Thumb, 1044 bytes, Stack size 112 bytes, ping.o(.text.ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ping &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_task_func
</UL>

<P><STRONG><a name="[468]"></a>pkcau_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32w51x_pkcau.o(.text.pkcau_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pkcau_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
</UL>

<P><STRONG><a name="[4a2]"></a>pkcau_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_pkcau.o(.text.pkcau_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
</UL>

<P><STRONG><a name="[44b]"></a>platform_init</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, bsp_wlan.o(.text.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = platform_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_clock_set
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_deinit
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma1_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46c]"></a>pmu_backup_write_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_pmu.o(.text.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[371]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gd32w51x_pmu.o(.text.pmu_to_deepsleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_wfi_set
</UL>

<P><STRONG><a name="[4f0]"></a>pmu_wifi_power_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_pmu.o(.text.pmu_wifi_power_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_pmu_config
</UL>

<P><STRONG><a name="[4f1]"></a>pmu_wifi_sram_control</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_pmu.o(.text.pmu_wifi_sram_control))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_state_set
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_pmu_config
</UL>

<P><STRONG><a name="[2d0]"></a>port_interrupt_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_port_common.o(.text.port_interrupt_init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
</UL>

<P><STRONG><a name="[2ce]"></a>port_irq_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_port_common.o(.text.port_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_unlock
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_lock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_interval_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_elapsed_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setPend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_callback_fromTimeOut
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>

<P><STRONG><a name="[2d2]"></a>port_irq_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_port_common.o(.text.port_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_unlock
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_lock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_interval_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_elapsed_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setPend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_callback_fromTimeOut
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>

<P><STRONG><a name="[2cd]"></a>port_isInInterruptContent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_port_common.o(.text.port_isInInterruptContent))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_unlock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_callback_fromTimeOut
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>

<P><STRONG><a name="[3fb]"></a>port_isInThreadMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_port_common.o(.text.port_isInThreadMode))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_isInThreadMode
</UL>

<P><STRONG><a name="[2d3]"></a>port_run_theFirstThread</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, k_port_keil_ac6.o(.text.port_run_theFirstThread))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kernel_start_privilege_routine
</UL>

<P><STRONG><a name="[2d6]"></a>port_setPendSV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_port_common.o(.text.port_setPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_callback_fromTimeOut
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>

<P><STRONG><a name="[404]"></a>port_stack_frame_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, k_port_common.o(.text.port_stack_frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = port_stack_frame_init &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_stack_frame_init
</UL>

<P><STRONG><a name="[312]"></a>port_stack_free_size_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, k_port_common.o(.text.port_stack_free_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_stack_free_get_privilege_routine
</UL>

<P><STRONG><a name="[47b]"></a>pvSysMalloc</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, malloc.o(.text.pvSysMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysDefineHeapRegions
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_unlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_calloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
</UL>

<P><STRONG><a name="[47d]"></a>pvSysReAlloc</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, malloc.o(.text.pvSysReAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_unlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_lock
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_realloc
</UL>

<P><STRONG><a name="[3c1]"></a>random_get</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, trng.o(.text.random_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = random_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get_true_random_data
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_ret (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_hardware_poll
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>

<P><STRONG><a name="[420]"></a>raw_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(.text.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[448]"></a>raw_bind_netif</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text.raw_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[428]"></a>raw_connect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, raw.o(.text.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[3ed]"></a>raw_input</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, raw.o(.text.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = raw_input &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[458]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, raw.o(.text.raw_netif_ip_addr_changed))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[42e]"></a>raw_new_ip_type</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, raw.o(.text.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_new_ip_type &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[42f]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[42a]"></a>raw_remove</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, raw.o(.text.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[433]"></a>raw_send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, raw.o(.text.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = raw_send &rArr; raw_sendto_if_src &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[432]"></a>raw_sendto</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, raw.o(.text.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = raw_sendto &rArr; raw_sendto_if_src &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[484]"></a>raw_sendto_if_src</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, raw.o(.text.raw_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = raw_sendto_if_src &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[4d1]"></a>rcu_clock_freq_get</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, gd32w51x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[46d]"></a>rcu_osci_on</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[46e]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 642 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_osci_stab_wait))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3ce]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_clock_gate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put_func
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>

<P><STRONG><a name="[392]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma1_config
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
</UL>

<P><STRONG><a name="[33d]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcau_deinit
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_deinit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[33c]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcau_deinit
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_deinit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[4da]"></a>rcu_plldig_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_plldig_enable))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_clock_gate
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
</UL>

<P><STRONG><a name="[46f]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32w51x_rcu.o(.text.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[485]"></a>rf_efuse_map_read</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, rf_efuse.o(.text.rf_efuse_map_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf_efuse_map_read &rArr; efuse_read &rArr; efuse_macro_width_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_read
</UL>

<P><STRONG><a name="[486]"></a>rf_efuse_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rf_efuse.o(.text.rf_efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rf_efuse_read &rArr; rf_efuse_map_read &rArr; efuse_read &rArr; efuse_macro_width_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_map_read
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
</UL>

<P><STRONG><a name="[61c]"></a>rf_efuse_reg_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_efuse.o(.text.rf_efuse_reg_read))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_ft_k
</UL>

<P><STRONG><a name="[61b]"></a>rf_efuse_type_reg_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_efuse.o(.text.rf_efuse_type_reg_read))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
</UL>

<P><STRONG><a name="[5e1]"></a>rf_pll_cal_trigger</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bsp_wlan.o(.text.rf_pll_cal_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_set_freq
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_config
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_vcok
</UL>

<P><STRONG><a name="[477]"></a>rom_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, init_rom.o(.text.rom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rom_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_time (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_snprintf (via Veneer)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_printf (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_hardware_poll (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free (via Veneer)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hwpka_flag_set (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_val_init (via Veneer)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ciphersuite_preference_init (via Veneer)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[473]"></a>rtc_current_time_get</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gd32w51x_rtc.o(.text.rtc_current_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[471]"></a>rtc_deinit</STRONG> (Thumb, 540 bytes, Stack size 20 bytes, gd32w51x_rtc.o(.text.rtc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[36d]"></a>rtc_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32w51x_rtc.o(.text.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[36c]"></a>rtc_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32w51x_rtc.o(.text.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[472]"></a>rtc_init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, gd32w51x_rtc.o(.text.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[474]"></a>rtc_interrupt_enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32w51x_rtc.o(.text.rtc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[470]"></a>rtc_register_sync_wait</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, gd32w51x_rtc.o(.text.rtc_register_sync_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_register_sync_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[475]"></a>rtc_wakeup_clock_set</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, gd32w51x_rtc.o(.text.rtc_wakeup_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_wakeup_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[48f]"></a>scan_list_sorting</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, wifi_netlink.o(.text.scan_list_sorting))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = scan_list_sorting &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_list_get
</UL>

<P><STRONG><a name="[8f]"></a>schedule_callback_fromTimeOut</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sched_kernel.o(.text.schedule_callback_fromTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = schedule_callback_fromTimeOut &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_setPendSV
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_thread.o(.text._impl_thread_static_init)
<LI> sched_thread.o(.text._thread_init_privilege_routine)
</UL>
<P><STRONG><a name="[301]"></a>schedule_entry_trigger</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sched_kernel.o(.text.schedule_entry_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = schedule_entry_trigger &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_setPendSV
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_delete_privilege_routine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_give_privilege_routine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_delete_privilege_routine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock_privilege_routine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_delete_privilege_routine
</UL>

<P><STRONG><a name="[303]"></a>schedule_exit_trigger</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sched_kernel.o(.text.schedule_exit_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_specific
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_setPendSV
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isInInterruptContent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep_privilege_routine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_delete_privilege_routine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_send_privilege_routine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_receive_privilege_routine
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_take_privilege_routine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock_privilege_routine
</UL>

<P><STRONG><a name="[30f]"></a>schedule_hasTwoPendingItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sched_kernel.o(.text.schedule_hasTwoPendingItem))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_delete_privilege_routine
</UL>

<P><STRONG><a name="[2f5]"></a>schedule_setPend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sched_kernel.o(.text.schedule_setPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_specific
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
</UL>

<P><STRONG><a name="[311]"></a>schedule_waitList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sched_kernel.o(.text.schedule_waitList))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_yield_privilege_routine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep_privilege_routine
</UL>

<P><STRONG><a name="[492]"></a>softap_delete_ipaddr_by_macaddr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcpd.o(.text.softap_delete_ipaddr_by_macaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softap_delete_ipaddr_by_macaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_softap_sta_del
</UL>

<P><STRONG><a name="[493]"></a>softap_find_ipaddr_by_macaddr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dhcpd.o(.text.softap_find_ipaddr_by_macaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softap_find_ipaddr_by_macaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_status_get
</UL>

<P><STRONG><a name="[b9]"></a>start_task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = start_task &rArr; wifi_management_init &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset_flag_check
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_os_misc_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[498]"></a>stop_dhcpd_daemon</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcpd.o(.text.stop_dhcpd_daemon))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_dhcpd_daemon &rArr; udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
</UL>

<P><STRONG><a name="[44f]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sys_arch.o(.text.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = sys_arch_mbox_fetch &rArr; sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_fetch
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[450]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(.text.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[412]"></a>sys_arch_sem_wait</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[cc]"></a>sys_calloc</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, wrapper_os.o(.text.sys_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sys_calloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[49a]"></a>sys_check_timeouts</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timeouts.o(.text.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1ac]"></a>sys_current_time_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_current_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_total_system_ms_get
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>sys_free_heap_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_free_heap_size))
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysGetFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>sys_heap_block_size</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_heap_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_heap_block_size
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysGetHeapMinimumBlockSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>sys_idle_task_handle_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_idle_task_handle_get))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_idle_thread_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>

<P><STRONG><a name="[416]"></a>sys_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys_arch.o(.text.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[19f]"></a>sys_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_test
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_bind_address
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_multicast_addr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_server_hostname
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_new
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_interval_list
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(.rodata.global_hooks)
<LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[42d]"></a>sys_mbox_new</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_arch.o(.text.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sys_mbox_new &rArr; sys_queue_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[49f]"></a>sys_mbox_post</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_post
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback
</UL>

<P><STRONG><a name="[31b]"></a>sys_mbox_trypost</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_arch.o(.text.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sys_mbox_trypost &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_post
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[1a1]"></a>sys_memcmp</STRONG> (Thumb, 164 bytes, Stack size 44 bytes, wrapper_os.o(.text.sys_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sys_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_disconnect
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_list_sorting
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_candidate_ap
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>sys_memcpy</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_hwaddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_register_wifi
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcpd_packet
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_pickup_opt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_connect
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_list_sorting
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_store
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_load
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_disconnect_req
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[3a5]"></a>sys_memmove</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
</UL>

<P><STRONG><a name="[cd]"></a>sys_mfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_mfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_test
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_test
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_defaults
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_task_func
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cleanup
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_new_stream
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_free_stream
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_free
</UL>
<BR>[Address Reference Count : 3]<UL><LI> init_rom.o(.text.rom_init)
<LI> cjson.o(.rodata.global_hooks)
<LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>sys_min_free_heap_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_min_free_heap_size))
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysGetMinimumEverFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>

<P><STRONG><a name="[1ad]"></a>sys_ms_sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_ms_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_ms_sleep &rArr; _impl_thread_sleep &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_send
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wq_worker_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>sys_mutex_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_mutex_free &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>sys_mutex_get</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_mutex_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get_func
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>sys_mutex_get_func</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, init_rom.o(.text.sys_mutex_get_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_mutex_get_func &rArr; sys_mutex_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcau_flag_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcau_deinit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[1a8]"></a>sys_mutex_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_mutex_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_crypt_lock_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_lock_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>sys_mutex_put</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put_func
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>sys_mutex_put_func</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, init_rom.o(.text.sys_mutex_put_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_mutex_put_func &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[44c]"></a>sys_os_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_os_init))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[495]"></a>sys_os_misc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_os_misc_init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[44d]"></a>sys_os_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_os_start &rArr; _impl_kernel_at_rtos_run &rArr; init_static_thread_list &rArr; _impl_thread_static_init &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_at_rtos_run
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[499]"></a>sys_queue_fetch</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_queue_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[31c]"></a>sys_queue_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_queue_free &rArr; _impl_queue_delete &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[49e]"></a>sys_queue_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_queue_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[4a0]"></a>sys_queue_post</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_queue_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[1b6]"></a>sys_random_bytes_get</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, wrapper_os.o(.text.sys_random_bytes_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sys_random_bytes_get &rArr; trng_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_total_system_ms_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>sys_realloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_register
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.rodata.global_hooks)
</UL>
<P><STRONG><a name="[494]"></a>sys_reset_flag_check</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, bsp_wlan.o(.text.sys_reset_flag_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sys_reset_flag_check &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1af]"></a>sys_sched_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_sched_lock &rArr; _impl_kernel_schedule_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>sys_sched_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_sched_unlock &rArr; _impl_kernel_schedule_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_kernel_schedule_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[440]"></a>sys_sem_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys_arch.o(.text.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_sem_new &rArr; sys_sema_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[1a7]"></a>sys_sema_down</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_sema_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_take
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_stop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>sys_sema_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_sema_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_sema_free &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_stop
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>sys_sema_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_sema_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_sema_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_init
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>sys_sema_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_sema_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_give
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_task
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_forward_netlink_message
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wq_worker_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>sys_sema_up_from_isr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_sema_up_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_sema_up_from_isr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_semaphore_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>sys_stack_free_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_stack_free_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_stack_free_get &rArr; _impl_thread_stack_free_size_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_stack_free_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>sys_task_create</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, wrapper_os.o(.text.sys_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_register
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_group_join
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>sys_task_delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sys_task_delete &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_delete
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_task
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_task_func
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_task
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>sys_task_exist</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_task_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_task_exist &rArr; _impl_thread_name_toId &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_name_toId
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[3a3]"></a>sys_task_msg_flush</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wrapper_os.o(.text.sys_task_msg_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sys_task_msg_flush &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
</UL>

<P><STRONG><a name="[1bd]"></a>sys_task_msg_num</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_task_msg_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_task_msg_num &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_num_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_msg_num
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>sys_task_post</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wrapper_os.o(.text.sys_task_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_message_send
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>sys_task_wait</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wrapper_os.o(.text.sys_task_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sys_task_wait &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_user_data_get
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_queue_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wq_worker_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[4a3]"></a>sys_thread_new</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sys_arch.o(.text.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = sys_thread_new &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[d0]"></a>sys_time_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_total_system_ms_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[4a4]"></a>sys_timeout</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, timeouts.o(.text.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[41e]"></a>sys_timeouts_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timeouts.o(.text.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4a5]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(.text.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1b2]"></a>sys_timer_delete</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_timer_delete &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_del_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>sys_timer_init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wrapper_os.o(.text.sys_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysFree
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>sys_timer_pending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_timer_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_timer_pending &rArr; _impl_timer_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>sys_timer_start_ext</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_timer_start_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_timer_start_ext &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>sys_timer_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wrapper_os.o(.text.sys_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[34b]"></a>sys_timer_task_handle_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_timer_task_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>

<P><STRONG><a name="[1ae]"></a>sys_us_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_us_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_us_delay &rArr; _impl_system_busy_wait &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_system_busy_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lpds_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>sys_wakelock_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wakelock.o(.text.sys_wakelock_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakelock_acquire
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>

<P><STRONG><a name="[4f7]"></a>sys_wakelock_release</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wakelock.o(.text.sys_wakelock_release))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakelock_release
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>

<P><STRONG><a name="[3ab]"></a>sys_yield</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper_os.o(.text.sys_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_yield &rArr; _impl_thread_yield &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[476]"></a>syscfg_exti_line_config</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32w51x_syscfg.o(.text.syscfg_exti_line_config))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[2c1]"></a>system_clock_config</STRONG> (Thumb, 288 bytes, Stack size 4 bytes, system_gd32w51x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[496]"></a>systick_delay_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(.text.systick_delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[5ef]"></a>systick_udelay</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, delay.o(.text.systick_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_doze_process
</UL>

<P><STRONG><a name="[4a6]"></a>tcp_abandon</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, tcp.o(.text.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
</UL>

<P><STRONG><a name="[427]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[424]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(.text.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[4a9]"></a>tcp_alloc</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, tcp.o(.text.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[316]"></a>tcp_arg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[421]"></a>tcp_bind</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, tcp.o(.text.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[447]"></a>tcp_bind_netif</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(.text.tcp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[425]"></a>tcp_close</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tcp.o(.text.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[429]"></a>tcp_connect</STRONG> (Thumb, 960 bytes, Stack size 40 bytes, tcp.o(.text.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[4b3]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(.text.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_eff_send_mss_netif &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4b0]"></a>tcp_enqueue_flags</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[31a]"></a>tcp_err</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(.text.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[4b4]"></a>tcp_fasttmr</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tcp.o(.text.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4b6]"></a>tcp_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tcp.o(.text.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_free &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[464]"></a>tcp_free_ooseq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(.text.tcp_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_free_ooseq &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[41b]"></a>tcp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp.o(.text.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_init &rArr; trng_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3ef]"></a>tcp_input</STRONG> (Thumb, 3780 bytes, Stack size 56 bytes, tcp_in.o(.text.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = tcp_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4be]"></a>tcp_keepalive</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[42c]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, tcp.o(.text.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[456]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tcp.o(.text.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[430]"></a>tcp_new_ip_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[4b8]"></a>tcp_next_iss</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(.text.tcp_next_iss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_next_iss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[437]"></a>tcp_output</STRONG> (Thumb, 1032 bytes, Stack size 56 bytes, tcp_out.o(.text.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[4ad]"></a>tcp_pcb_purge</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tcp.o(.text.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_pcb_purge &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a7]"></a>tcp_pcb_remove</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, tcp.o(.text.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[319]"></a>tcp_poll</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tcp.o(.text.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[4b5]"></a>tcp_process_refused_data</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tcp.o(.text.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = tcp_process_refused_data &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[317]"></a>tcp_recv</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(.text.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[d7]"></a>tcp_recv_null</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tcp.o(.text.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = tcp_recv_null &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text.tcp_alloc)
</UL>
<P><STRONG><a name="[431]"></a>tcp_recved</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, tcp.o(.text.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>

<P><STRONG><a name="[4bc]"></a>tcp_rexmit</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tcp_out.o(.text.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_rexmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4c4]"></a>tcp_rexmit_fast</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tcp_out.o(.text.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4bd]"></a>tcp_rexmit_rto</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, tcp_out.o(.text.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4c6]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tcp_out.o(.text.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4c5]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_rexmit_rto_prepare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4a8]"></a>tcp_rst</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, tcp_out.o(.text.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4c3]"></a>tcp_seg_copy</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(.text.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4b2]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[4c1]"></a>tcp_segs_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_segs_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[4ba]"></a>tcp_send_empty_ack</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4aa]"></a>tcp_send_fin</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tcp_out.o(.text.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[318]"></a>tcp_sent</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(.text.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[426]"></a>tcp_shutdown</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tcp.o(.text.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[4c7]"></a>tcp_slowtmr</STRONG> (Thumb, 1608 bytes, Stack size 56 bytes, tcp.o(.text.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4c8]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_split_unsent_seg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4ab]"></a>tcp_timer_needed</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, timeouts.o(.text.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_timer_needed &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[1db]"></a>tcp_tmr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp.o(.text.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.rodata.lwip_cyclic_timers)
</UL>
<P><STRONG><a name="[4af]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp_in.o(.text.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4c2]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tcp.o(.text.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[436]"></a>tcp_write</STRONG> (Thumb, 2128 bytes, Stack size 96 bytes, tcp_out.o(.text.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_write &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[4c9]"></a>tcp_zero_window_probe</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[45b]"></a>tcpip_api_call</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tcpip.o(.text.tcpip_api_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>

<P><STRONG><a name="[411]"></a>tcpip_callback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcpip.o(.text.tcpip_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcpip_callback &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[4ca]"></a>tcpip_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tcpip.o(.text.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
</UL>

<P><STRONG><a name="[e6]"></a>tcpip_input</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tcpip.o(.text.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_netif.o(.text.wifi_netif_open)
</UL>
<P><STRONG><a name="[451]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tcpip.o(.text.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[461]"></a>tcpip_try_callback</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcpip.o(.text.tcpip_try_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcpip_try_callback &rArr; sys_mbox_trypost &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[7a]"></a>timeout_handler</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, sched_timer.o(.text.timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timeout_handler &rArr; kernel_message_notification &rArr; kthread_message_notification &rArr; _impl_semaphore_give &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next_condition
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_message_notification
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_kernel.o(.text._impl_kernel_at_rtos_run)
<LI> sched_kernel.o(.text._kernel_start_privilege_routine)
</UL>
<P><STRONG><a name="[2f4]"></a>timeout_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sched_timer.o(.text.timeout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timeout_init &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_thread_static_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init_privilege_routine
</UL>

<P><STRONG><a name="[30a]"></a>timeout_remove</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sched_timer.o(.text.timeout_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timeout_remove &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_stop_privilege_routine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_delete_privilege_routine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_schedule
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_semaphore_schedule
</UL>

<P><STRONG><a name="[314]"></a>timeout_set</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, sched_timer.o(.text.timeout_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_specific
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_privilege_routine
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>

<P><STRONG><a name="[9a]"></a>timer_callback_fromTimeOut</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, sched_timer.o(.text.timer_callback_fromTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_callback_fromTimeOut &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_push
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_isExisted
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_specific
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_timer.o(.text.timeout_handler)
<LI> sched_timer.o(.text._timer_init_privilege_routine)
</UL>
<P><STRONG><a name="[3ff]"></a>timer_reamining_elapsed_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sched_timer.o(.text.timer_reamining_elapsed_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_reamining_elapsed_handler &rArr; list_node_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_schedule_thread
</UL>

<P><STRONG><a name="[403]"></a>timer_schedule</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched_timer.o(.text.timer_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_schedule &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
</UL>

<P><STRONG><a name="[400]"></a>timer_total_system_ms_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sched_timer.o(.text.timer_total_system_ms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_privilege_invoke
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_scheduler_inPendSV_c
</UL>

<P><STRONG><a name="[47f]"></a>trng_configuration</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, trng.o(.text.trng_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_flag_get
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_enable
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>

<P><STRONG><a name="[481]"></a>trng_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32w51x_trng.o(.text.trng_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>

<P><STRONG><a name="[4cd]"></a>trng_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_trng.o(.text.trng_enable))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
</UL>

<P><STRONG><a name="[4ce]"></a>trng_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_trng.o(.text.trng_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
</UL>

<P><STRONG><a name="[37c]"></a>trng_get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, trng.o(.text.trng_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = trng_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_put
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_get
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get_true_random_data
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_random_bytes_get
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[480]"></a>trng_get_true_random_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32w51x_trng.o(.text.trng_get_true_random_data))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
</UL>

<P><STRONG><a name="[4cf]"></a>trng_lock_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, trng.o(.text.trng_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = trng_lock_init &rArr; sys_mutex_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
</UL>

<P><STRONG><a name="[385]"></a>udp_bind</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, udp.o(.text.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
</UL>

<P><STRONG><a name="[449]"></a>udp_bind_netif</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text.udp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[386]"></a>udp_connect</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, udp.o(.text.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[42b]"></a>udp_disconnect</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, udp.o(.text.udp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[41a]"></a>udp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udp.o(.text.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = udp_init &rArr; trng_get &rArr; trng_configuration &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3f0]"></a>udp_input</STRONG> (Thumb, 684 bytes, Stack size 56 bytes, udp.o(.text.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[457]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, udp.o(.text.udp_netif_ip_addr_changed))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[384]"></a>udp_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
</UL>

<P><STRONG><a name="[39a]"></a>udp_new_ip_type</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_new_ip_type &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[387]"></a>udp_recv</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, udp.o(.text.udp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
</UL>

<P><STRONG><a name="[38d]"></a>udp_remove</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, udp.o(.text.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_dhcpd_daemon
</UL>

<P><STRONG><a name="[434]"></a>udp_send</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, udp.o(.text.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[2c5]"></a>udp_sendto</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, udp.o(.text.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Receive
</UL>

<P><STRONG><a name="[37a]"></a>udp_sendto_if</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, udp.o(.text.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[375]"></a>udp_sendto_if_src</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, udp.o(.text.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[4d0]"></a>usart_baudrate_set</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gd32w51x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[2bc]"></a>usart_command_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_command_enable))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[46b]"></a>usart_config</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, uart.o(.text.usart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart_config &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[7a9]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>

<P><STRONG><a name="[7a7]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc (via Veneer)
</UL>

<P><STRONG><a name="[4d5]"></a>usart_deinit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gd32w51x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[4d9]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[7aa]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>

<P><STRONG><a name="[370]"></a>usart_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_wfi_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc (via Veneer)
</UL>

<P><STRONG><a name="[4d8]"></a>usart_interrupt_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[7a8]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_interrupt_handler (via Veneer)
</UL>

<P><STRONG><a name="[4d6]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[4d7]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32w51x_usart.o(.text.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_config
</UL>

<P><STRONG><a name="[47c]"></a>vSysDefineHeapRegions</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, malloc.o(.text.vSysDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysMalloc
</UL>

<P><STRONG><a name="[47e]"></a>vSysFree</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, malloc.o(.text.vSysFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_unlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvSysReAlloc
</UL>

<P><STRONG><a name="[34e]"></a>wifi_clock_gate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_wlan.o(.text.wifi_clock_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_clock_gate
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_plldig_enable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
</UL>

<P><STRONG><a name="[6d1]"></a>wifi_irq_num_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_irq_num_get))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init_wlan_irqn
</UL>

<P><STRONG><a name="[4db]"></a>wifi_lpds_exit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_wlan.o(.text.wifi_lpds_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_lpds_exit &rArr; sys_us_delay &rArr; _impl_system_busy_wait &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_lpds_mode
</UL>

<P><STRONG><a name="[77e]"></a>wifi_lpds_on_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_lpds_on_clear))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
</UL>

<P><STRONG><a name="[5ea]"></a>wifi_lpds_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_lpds_set))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_lpds_mode
</UL>

<P><STRONG><a name="[351]"></a>wifi_management_ap_start</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, wifi_management.o(.text.wifi_management_ap_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = wifi_management_ap_start &rArr; wifi_netlink_ap_start &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_up
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_addr
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_dhcpd_daemon
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_daemon
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap_adv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap
</UL>

<P><STRONG><a name="[343]"></a>wifi_management_connect</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, wifi_management.o(.text.wifi_management_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wifi_management_connect &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_connect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
</UL>

<P><STRONG><a name="[342]"></a>wifi_management_disconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_management.o(.text.wifi_management_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wifi_management_disconnect &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_disconnect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
</UL>

<P><STRONG><a name="[4df]"></a>wifi_management_forward_netlink_message</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, wifi_management.o(.text.wifi_management_forward_netlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wifi_management_forward_netlink_message &rArr; eloop_message_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_message_send
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_result_notify
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_disconnect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_connect
</UL>

<P><STRONG><a name="[497]"></a>wifi_management_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_management_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = wifi_management_init &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakelock_acquire
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_crypt_lock_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_lock_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_load
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_init
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_auto_conn_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[362]"></a>wifi_management_scan</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_management_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_management_scan &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_scan
</UL>

<P><STRONG><a name="[352]"></a>wifi_management_sta_start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_management_sta_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = wifi_management_sta_start &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_dhcpd_daemon
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_connect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ap_stop
</UL>

<P><STRONG><a name="[35d]"></a>wifi_management_start</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, wifi_management.o(.text.wifi_management_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_management_start &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_exist
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_terminate_flag_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_open
</UL>

<P><STRONG><a name="[354]"></a>wifi_management_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi_management.o(.text.wifi_management_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wifi_management_stop &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_close
</UL>

<P><STRONG><a name="[df]"></a>wifi_management_task</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_management_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = wifi_management_task &rArr; eloop_run &rArr; wifi_mgmt_cb_run_state_machine &rArr; sm_MAINTAIN_CONNECTION_SCAN_Enter &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_management.o(.text.wifi_management_start)
</UL>
<P><STRONG><a name="[3a9]"></a>wifi_mgmt_cb_run_state_machine</STRONG> (Thumb, 700 bytes, Stack size 16 bytes, wifi_management.o(.text.wifi_mgmt_cb_run_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = wifi_mgmt_cb_run_state_machine &rArr; sm_MAINTAIN_CONNECTION_SCAN_Enter &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_start_dhcp
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_store
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_disconnect_req
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_auto_conn_get
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_run
</UL>

<P><STRONG><a name="[e2]"></a>wifi_mgmt_cb_scan_done</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_mgmt_cb_scan_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wifi_mgmt_cb_scan_done &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_list_get
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_bss_rssi_get
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_management.o(.text.wifi_mgmt_link_status_polling)
</UL>
<P><STRONG><a name="[4ea]"></a>wifi_netif_close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wifi_netif.o(.text.wifi_netif_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wifi_netif_close &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
</UL>

<P><STRONG><a name="[364]"></a>wifi_netif_get_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_get_gw))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_status
</UL>

<P><STRONG><a name="[359]"></a>wifi_netif_get_hwaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_get_hwaddr))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_status
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_mac_addr
</UL>

<P><STRONG><a name="[363]"></a>wifi_netif_get_ip</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_get_ip))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_status
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
</UL>

<P><STRONG><a name="[3f9]"></a>wifi_netif_is_ipv4_got</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_is_ipv4_got))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_group_task_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_result_notify
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
</UL>

<P><STRONG><a name="[4eb]"></a>wifi_netif_open</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, wifi_netif.o(.text.wifi_netif_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>

<P><STRONG><a name="[4dd]"></a>wifi_netif_set_addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wifi_netif_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
</UL>

<P><STRONG><a name="[35a]"></a>wifi_netif_set_hwaddr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wifi_netif.o(.text.wifi_netif_set_hwaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_netif_set_hwaddr &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_mac_addr
</UL>

<P><STRONG><a name="[357]"></a>wifi_netif_set_ip</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_netif.o(.text.wifi_netif_set_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wifi_netif_set_ip &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ip_set
</UL>

<P><STRONG><a name="[358]"></a>wifi_netif_set_ip_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_set_ip_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ip_set
</UL>

<P><STRONG><a name="[4de]"></a>wifi_netif_set_up</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi_netif.o(.text.wifi_netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wifi_netif_set_up &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
</UL>

<P><STRONG><a name="[4e8]"></a>wifi_netif_start_dhcp</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_netif.o(.text.wifi_netif_start_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wifi_netif_start_dhcp &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[491]"></a>wifi_netif_stop_dhcp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wifi_netif.o(.text.wifi_netif_stop_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_disconnect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[4dc]"></a>wifi_netlink_ap_start</STRONG> (Thumb, 448 bytes, Stack size 152 bytes, wifi_netlink.o(.text.wifi_netlink_ap_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = wifi_netlink_ap_start &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_pmu_config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_open
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
</UL>

<P><STRONG><a name="[4e2]"></a>wifi_netlink_auto_conn_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_auto_conn_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_netlink_auto_conn_get
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[360]"></a>wifi_netlink_bss_rssi_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_netlink.o(.text.wifi_netlink_bss_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_netlink_bss_rssi_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_rssi
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_scan_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
</UL>

<P><STRONG><a name="[33f]"></a>wifi_netlink_bw_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netlink.o(.text.wifi_netlink_bw_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
</UL>

<P><STRONG><a name="[341]"></a>wifi_netlink_bw_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_netlink.o(.text.wifi_netlink_bw_set))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
</UL>

<P><STRONG><a name="[353]"></a>wifi_netlink_channel_set</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wifi_netlink_channel_set &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_channel_set
</UL>

<P><STRONG><a name="[355]"></a>wifi_netlink_dev_close</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, wifi_netlink.o(.text.wifi_netlink_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = wifi_netlink_dev_close &rArr; wifi_netif_close &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_state_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_clock_gate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_us_delay
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_close
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_close
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>

<P><STRONG><a name="[35b]"></a>wifi_netlink_dev_open</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_netlink.o(.text.wifi_netlink_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rcu_config
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_pmu_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_open
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_open
</UL>

<P><STRONG><a name="[4e6]"></a>wifi_netlink_disconnect_req</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, wifi_netlink.o(.text.wifi_netlink_disconnect_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wifi_netlink_disconnect_req &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[105]"></a>wifi_netlink_indicate_connect</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_indicate_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wifi_netlink_indicate_connect &rArr; wifi_management_forward_netlink_message &rArr; eloop_message_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_forward_netlink_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(i.wifi_indicate_intf_init)
</UL>
<P><STRONG><a name="[104]"></a>wifi_netlink_indicate_disconnect</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, wifi_netlink.o(.text.wifi_netlink_indicate_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_netlink_indicate_disconnect &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcmp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_forward_netlink_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(i.wifi_indicate_intf_init)
</UL>
<P><STRONG><a name="[38a]"></a>wifi_netlink_indicate_softap_sta_add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_netlink.o(.text.wifi_netlink_indicate_softap_sta_add))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
</UL>

<P><STRONG><a name="[107]"></a>wifi_netlink_indicate_softap_sta_del</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifi_netlink.o(.text.wifi_netlink_indicate_softap_sta_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wifi_netlink_indicate_softap_sta_del &rArr; softap_delete_ipaddr_by_macaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_delete_ipaddr_by_macaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(i.wifi_indicate_intf_init)
</UL>
<P><STRONG><a name="[4e0]"></a>wifi_netlink_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wifi_netlink_init &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
</UL>

<P><STRONG><a name="[4e9]"></a>wifi_netlink_ipaddr_set</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_ipaddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wifi_netlink_ipaddr_set &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_dhcp_polling
</UL>

<P><STRONG><a name="[4e3]"></a>wifi_netlink_joined_ap_load</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, wifi_netlink.o(.text.wifi_netlink_joined_ap_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wifi_netlink_joined_ap_load &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
</UL>

<P><STRONG><a name="[4e7]"></a>wifi_netlink_joined_ap_store</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, wifi_netlink.o(.text.wifi_netlink_joined_ap_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wifi_netlink_joined_ap_store &rArr; sys_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_ip
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[340]"></a>wifi_netlink_link_state_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_netlink.o(.text.wifi_netlink_link_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_bw_set
</UL>

<P><STRONG><a name="[35f]"></a>wifi_netlink_ps_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_ps_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_netlink_ps_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ps
</UL>

<P><STRONG><a name="[35e]"></a>wifi_netlink_ps_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_netlink.o(.text.wifi_netlink_ps_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_netlink_ps_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_ps
</UL>

<P><STRONG><a name="[344]"></a>wifi_netlink_scan_list_get</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wifi_netlink.o(.text.wifi_netlink_scan_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_netlink_scan_list_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_list_sorting
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cb_scan_done
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_scan_done
</UL>

<P><STRONG><a name="[106]"></a>wifi_netlink_scan_result_notify</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wifi_netlink.o(.text.wifi_netlink_scan_result_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wifi_netlink_scan_result_notify &rArr; wifi_management_forward_netlink_message &rArr; eloop_message_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_is_ipv4_got
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_forward_netlink_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(i.wifi_indicate_intf_init)
</UL>
<P><STRONG><a name="[4e4]"></a>wifi_netlink_scan_set</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, wifi_netlink.o(.text.wifi_netlink_scan_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wifi_netlink_scan_set &rArr; sys_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_scan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_link_status_polling
</UL>

<P><STRONG><a name="[365]"></a>wifi_netlink_status_get</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, wifi_netlink.o(.text.wifi_netlink_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wifi_netlink_status_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_find_ipaddr_by_macaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi_status
</UL>

<P><STRONG><a name="[34c]"></a>wifi_netlink_task_stack_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifi_netlink.o(.text.wifi_netlink_task_stack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_netlink_task_stack_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mem_status
</UL>

<P><STRONG><a name="[4ed]"></a>wifi_pmu_config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_wlan.o(.text.wifi_pmu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_pmu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_wifi_sram_control
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_wifi_power_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>

<P><STRONG><a name="[34f]"></a>wifi_power_state_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_wlan.o(.text.wifi_power_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_power_state_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_wifi_sram_control
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
</UL>

<P><STRONG><a name="[4ee]"></a>wifi_rcu_config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_wlan.o(.text.wifi_rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_rcu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_plldig_enable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>

<P><STRONG><a name="[4ef]"></a>wifi_setting_config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bsp_wlan.o(.text.wifi_setting_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_setting_config
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_reg_base
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_param
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_nvic_base
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_dump_sram_base
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start
</UL>

<P><STRONG><a name="[77c]"></a>wifi_waked_wait</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_waked_wait))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
</UL>

<P><STRONG><a name="[4e1]"></a>wifi_wakelock_acquire</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_wakelock_acquire))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_wait_event
</UL>

<P><STRONG><a name="[4f6]"></a>wifi_wakelock_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_wlan.o(.text.wifi_wakelock_release))
<BR><BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_wait_event
</UL>

<P><STRONG><a name="[49b]"></a>xSysGetFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, malloc.o(.text.xSysGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free_heap_size
</UL>

<P><STRONG><a name="[49c]"></a>xSysGetHeapMinimumBlockSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, malloc.o(.text.xSysGetHeapMinimumBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap_block_size
</UL>

<P><STRONG><a name="[4a1]"></a>xSysGetMinimumEverFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, malloc.o(.text.xSysGetMinimumEverFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_min_free_heap_size
</UL>

<P><STRONG><a name="[4f8]"></a>AES_UnWRAP</STRONG> (Thumb, 256 bytes, Stack size 368 bytes, wpas_aes.o(i.AES_UnWRAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = AES_UnWRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
</UL>

<P><STRONG><a name="[4f9]"></a>AES_WRAP</STRONG> (Thumb, 264 bytes, Stack size 368 bytes, wpas_aes.o(i.AES_WRAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_cryp_aes_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_gtk
</UL>

<P><STRONG><a name="[4fb]"></a>SHAFinal</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wpas_hmac.o(i.SHAFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHAFinal &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longReverse
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHSTransform
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha
</UL>

<P><STRONG><a name="[4fe]"></a>SHAInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, wpas_hmac.o(i.SHAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endianTest
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha
</UL>

<P><STRONG><a name="[500]"></a>SHAUpdate</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, wpas_hmac.o(i.SHAUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longReverse
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHSTransform
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha
</UL>

<P><STRONG><a name="[501]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ea]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem_block_list
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_print
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_test_task
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_main
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_process
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warning
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tcp_options
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnonblocking
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_udp_recv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_err
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_interval_list
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_psd
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_avg_fail_ratio
</UL>

<P><STRONG><a name="[1ef]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[cf]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[503]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e9]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[270]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_strerror
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netannounce
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_cookie
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_listen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_tcp_connect
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>

<P><STRONG><a name="[7ea]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[ce]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_rom.o(.text.rom_init)
</UL>
<P><STRONG><a name="[504]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7eb]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1fe]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>

<P><STRONG><a name="[7ec]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7ed]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[505]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7ee]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[7ef]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ff]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_err
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>

<P><STRONG><a name="[366]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>

<P><STRONG><a name="[516]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7f0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[209]"></a>__hardfp_atof</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_parse_arguments
</UL>

<P><STRONG><a name="[508]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[50d]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
</UL>

<P><STRONG><a name="[50f]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
</UL>

<P><STRONG><a name="[460]"></a>__hardfp_strtod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[50c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[50b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[509]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[510]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[50a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[511]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[514]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[506]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[7f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[507]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2a7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[51c]"></a>active_tx_pkt_process</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ps_mgmt.o(i.active_tx_pkt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = active_tx_pkt_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[61f]"></a>adjust_lps_policy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_fw_intf.o(i.adjust_lps_policy))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lps_ctrl
</UL>

<P><STRONG><a name="[51e]"></a>aes_encryp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aes-internal-enc.o(i.aes_encryp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = aes_encryp &rArr; rijndaelEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_vector
</UL>

<P><STRONG><a name="[520]"></a>aes_encrypt_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aes-internal-enc.o(i.aes_encrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = aes_encrypt_deinit &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_vector
</UL>

<P><STRONG><a name="[522]"></a>aes_encrypt_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aes-internal-enc.o(i.aes_encrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_vector
</UL>

<P><STRONG><a name="[525]"></a>alloc_short_skb</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, wlan_skb.o(i.alloc_short_skb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = alloc_short_skb &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_skb_priv
</UL>

<P><STRONG><a name="[526]"></a>alloc_skb</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wlan_skb.o(i.alloc_skb))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = alloc_skb &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_skb_priv
</UL>

<P><STRONG><a name="[527]"></a>ap_construct_eapol_basic</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, wpas_psk.o(i.ap_construct_eapol_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ap_construct_eapol_basic
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_replay_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[546]"></a>beacon_early_process</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ps_mgmt.o(i.beacon_early_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = beacon_early_process &rArr; leave_ps_doze_process &rArr; config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_ps_doze_process
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[548]"></a>beacon_timeout_process</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ps_mgmt.o(i.beacon_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = beacon_timeout_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[54f]"></a>calc_gtk</STRONG> (Thumb, 80 bytes, Stack size 152 bytes, wpas_crypto.o(i.calc_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = calc_gtk &rArr; i_PRF &rArr; hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_PRF
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
</UL>

<P><STRONG><a name="[551]"></a>calc_iqk_comp</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hal_calibration.o(i.calc_iqk_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calc_iqk_comp &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
</UL>

<P><STRONG><a name="[542]"></a>calc_mic</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, wpas_crypto.o(i.calc_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = calc_mic &rArr; omac1_aes_128 &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[537]"></a>calc_ptk</STRONG> (Thumb, 260 bytes, Stack size 256 bytes, wpas_crypto.o(i.calc_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = calc_ptk &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf_bits
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_min
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_PRF
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[662]"></a>cck_rates_included</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wlan_utility.o(i.cck_rates_included))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_wireless_mode
</UL>

<P><STRONG><a name="[557]"></a>cfo_tracking</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hal_dm.o(i.cfo_tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cfo_tracking &rArr; hal_set_crystal_cap &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_crystal_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[612]"></a>channel_plan_proc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wlan_utility.o(i.channel_plan_proc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
</UL>

<P><STRONG><a name="[55b]"></a>check_assoc_ap_vendor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wlan_utility.o(i.check_assoc_ap_vendor))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = check_assoc_ap_vendor &rArr; identify_ap_vendor &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_vendor
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[727]"></a>check_basic_rate</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, wlan_utility.o(i.check_basic_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_basic_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[52f]"></a>check_mic</STRONG> (Thumb, 208 bytes, Stack size 584 bytes, wpas_crypto.o(i.check_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = check_mic &rArr; omac1_aes_128 &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
</UL>

<P><STRONG><a name="[566]"></a>collect_bss_info</STRONG> (Thumb, 612 bytes, Stack size 88 bytes, wlan_scan.o(i.collect_bss_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = collect_bss_info &rArr; wlan_get_encrypt_info &rArr; wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_capability
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_set_to_rate_map
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
</UL>

<P><STRONG><a name="[569]"></a>config_mac_and_bb</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ps_mgmt.o(i.config_mac_and_bb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mac_tx
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mac_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_uc_match_process
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_ps_doze_process
</UL>

<P><STRONG><a name="[67a]"></a>construct_null_data</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, hal_fw_intf.o(i.construct_null_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = construct_null_data
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[679]"></a>construct_ps_poll</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hal_fw_intf.o(i.construct_ps_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = construct_ps_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[57f]"></a>crypto_bignum_add</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_add
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
</UL>

<P><STRONG><a name="[581]"></a>crypto_bignum_cmp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_bignum_cmp))
<BR><BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
</UL>

<P><STRONG><a name="[583]"></a>crypto_bignum_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = crypto_bignum_deinit &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_data
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_random_qr_qnr
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr
</UL>

<P><STRONG><a name="[585]"></a>crypto_bignum_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = crypto_bignum_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_random_qr_qnr
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
</UL>

<P><STRONG><a name="[587]"></a>crypto_bignum_init_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpas_crypto.o(i.crypto_bignum_init_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = crypto_bignum_init_set &rArr; crypto_bignum_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary (via Veneer)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
</UL>

<P><STRONG><a name="[589]"></a>crypto_bignum_is_odd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_is_odd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_is_odd
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
</UL>

<P><STRONG><a name="[58b]"></a>crypto_bignum_is_one</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_is_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_is_one
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_2_to_r_1
</UL>

<P><STRONG><a name="[58c]"></a>crypto_bignum_is_zero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_is_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_2_to_r_1
</UL>

<P><STRONG><a name="[58d]"></a>crypto_bignum_legendre</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, wpas_crypto.o(i.crypto_bignum_legendre))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = crypto_bignum_legendre
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_random_qr_qnr
</UL>

<P><STRONG><a name="[591]"></a>crypto_bignum_mod</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_mod
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
</UL>

<P><STRONG><a name="[593]"></a>crypto_bignum_mulmod</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, wpas_crypto.o(i.crypto_bignum_mulmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crypto_bignum_mulmod
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
</UL>

<P><STRONG><a name="[596]"></a>crypto_bignum_rand</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wpas_crypto.o(i.crypto_bignum_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_random_qr_qnr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_2_to_r_1
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
</UL>

<P><STRONG><a name="[598]"></a>crypto_bignum_sub</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_bignum_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crypto_bignum_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
</UL>

<P><STRONG><a name="[59a]"></a>crypto_bignum_to_bin</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wpas_crypto.o(i.crypto_bignum_to_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crypto_bignum_to_bin
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary (via Veneer)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_commit
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin
</UL>

<P><STRONG><a name="[59d]"></a>crypto_ec_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_ec_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = crypto_ec_deinit &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free (via Veneer)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_init
</UL>

<P><STRONG><a name="[6c2]"></a>crypto_ec_get_order</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_get_order))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>

<P><STRONG><a name="[5d1]"></a>crypto_ec_get_prime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_get_prime))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
</UL>

<P><STRONG><a name="[59f]"></a>crypto_ec_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wpas_crypto.o(i.crypto_ec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = crypto_ec_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load (via Veneer)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init (via Veneer)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>

<P><STRONG><a name="[5a2]"></a>crypto_ec_order_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_order_len))
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>

<P><STRONG><a name="[5a3]"></a>crypto_ec_point_add</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wpas_crypto.o(i.crypto_ec_point_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = crypto_ec_point_add &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
</UL>

<P><STRONG><a name="[5a7]"></a>crypto_ec_point_cmp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_point_cmp))
<BR><BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>

<P><STRONG><a name="[5a9]"></a>crypto_ec_point_compute_y_sqr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, wpas_crypto.o(i.crypto_ec_point_compute_y_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = crypto_ec_point_compute_y_sqr &rArr; crypto_bignum_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int (via Veneer)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs (via Veneer)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi (via Veneer)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord
</UL>

<P><STRONG><a name="[5ab]"></a>crypto_ec_point_deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_ec_point_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = crypto_ec_point_deinit &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin
</UL>

<P><STRONG><a name="[5ac]"></a>crypto_ec_point_from_bin</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wpas_crypto.o(i.crypto_ec_point_from_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = crypto_ec_point_from_bin &rArr; crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary (via Veneer)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset (via Veneer)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
</UL>

<P><STRONG><a name="[5ad]"></a>crypto_ec_point_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpas_crypto.o(i.crypto_ec_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init (via Veneer)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit_element_ecc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin
</UL>

<P><STRONG><a name="[5b0]"></a>crypto_ec_point_invert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_point_invert))
<BR><BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit_element_ecc
</UL>

<P><STRONG><a name="[5b1]"></a>crypto_ec_point_is_at_infinity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_point_is_at_infinity))
<BR><BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
</UL>

<P><STRONG><a name="[5b3]"></a>crypto_ec_point_is_on_curve</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_point_is_on_curve))
<BR><BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
</UL>

<P><STRONG><a name="[5b5]"></a>crypto_ec_point_mul</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wpas_crypto.o(i.crypto_ec_point_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crypto_ec_point_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit_element_ecc
</UL>

<P><STRONG><a name="[5b7]"></a>crypto_ec_point_solve_y_coord</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, wpas_crypto.o(i.crypto_ec_point_solve_y_coord))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = crypto_ec_point_solve_y_coord &rArr; crypto_ec_point_compute_y_sqr &rArr; crypto_bignum_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod (via Veneer)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int (via Veneer)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_x
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[5bb]"></a>crypto_ec_point_to_bin</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, wpas_crypto.o(i.crypto_ec_point_to_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crypto_ec_point_to_bin &rArr; ecp_normalize_jac &rArr; ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_commit
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm_ecc
</UL>

<P><STRONG><a name="[5b8]"></a>crypto_ec_point_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_point_x))
<BR><BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord
</UL>

<P><STRONG><a name="[5bd]"></a>crypto_ec_prime_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_prime_len))
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
</UL>

<P><STRONG><a name="[6c3]"></a>crypto_ec_prime_len_bits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_ec_prime_len_bits))
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
</UL>

<P><STRONG><a name="[5c1]"></a>dec_gtk</STRONG> (Thumb, 222 bytes, Stack size 1600 bytes, wpas_crypto.o(i.dec_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = dec_gtk &rArr; AES_UnWRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rc4_set_key
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rc4
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_UnWRAP
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[5c6]"></a>derive_psk</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, wpas_psk.o(i.derive_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = derive_psk &rArr; password_hash &rArr; F &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_hash
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_val
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_derive_psk_callback
</UL>

<P><STRONG><a name="[12f]"></a>do_nothing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.do_nothing))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[5c9]"></a>do_rx_rck</STRONG> (Thumb, 682 bytes, Stack size 80 bytes, hal_calibration.o(i.do_rx_rck))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = do_rx_rck &rArr; hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_bb_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_dck
</UL>

<P><STRONG><a name="[5cc]"></a>dragonfly_generate_scalar</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wpas_sae.o(i.dragonfly_generate_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = dragonfly_generate_scalar &rArr; dragonfly_get_rand_2_to_r_1 &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_2_to_r_1
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mod
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_zero
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_one
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit
</UL>

<P><STRONG><a name="[5cf]"></a>dragonfly_get_random_qr_qnr</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, wpas_sae.o(i.dragonfly_get_random_qr_qnr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = dragonfly_get_random_qr_qnr &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[5d0]"></a>dragonfly_is_quadratic_residue_blind</STRONG> (Thumb, 214 bytes, Stack size 112 bytes, wpas_sae.o(i.dragonfly_is_quadratic_residue_blind))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = dragonfly_is_quadratic_residue_blind &rArr; dragonfly_get_rand_1_to_p_1 &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_rand_1_to_p_1
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const_time_select_int
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const_time_select_bin
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_prime_len
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_get_prime
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_odd
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
</UL>

<P><STRONG><a name="[6ba]"></a>dragonfly_min_pwe_loop_iter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wpas_sae.o(i.dragonfly_min_pwe_loop_iter))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[6c1]"></a>dragonfly_suitable_group</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wpas_sae.o(i.dragonfly_suitable_group))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>

<P><STRONG><a name="[5d4]"></a>dtim_rx_bc_timeout_process</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ps_mgmt.o(i.dtim_rx_bc_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dtim_rx_bc_timeout_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[539]"></a>dump_array</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wlan_utility.o(i.dump_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dump_array &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_rx_desc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_igtk
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
</UL>

<P><STRONG><a name="[538]"></a>dump_eapol_frame</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wpas_psk.o(i.dump_eapol_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dump_eapol_frame &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[5db]"></a>dump_rx_desc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, soc_rx.o(i.dump_rx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dump_rx_desc &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[5dc]"></a>dump_tx_desc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, soc_tx.o(i.dump_tx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dump_tx_desc &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[5dd]"></a>dynamic_agc_detect_thresh</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, hal_dm.o(i.dynamic_agc_detect_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dynamic_agc_detect_thresh &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[5de]"></a>dynamic_dpd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_dm.o(i.dynamic_dpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dynamic_dpd &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[5df]"></a>dynamic_rx_dck</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_dm.o(i.dynamic_rx_dck))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = dynamic_rx_dck &rArr; hal_rf_rx_dck &rArr; do_rx_rck &rArr; hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_dck
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[5e0]"></a>dynamic_vcok</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_dm.o(i.dynamic_vcok))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dynamic_vcok &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_pll_cal_trigger
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[543]"></a>enc_gtk</STRONG> (Thumb, 168 bytes, Stack size 1592 bytes, wpas_crypto.o(i.enc_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rc4_set_key
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rc4
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_WRAP
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[4ff]"></a>endianTest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wpas_hmac.o(i.endianTest))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAInit
</UL>

<P><STRONG><a name="[5e9]"></a>enter_lpds_mode</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ps_mgmt.o(i.enter_lpds_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = enter_lpds_mode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lpds_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_doze_process
</UL>

<P><STRONG><a name="[5eb]"></a>enter_ps_awake_process</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ps_mgmt.o(i.enter_ps_awake_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = enter_ps_awake_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_beacon_info
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[5ed]"></a>enter_ps_doze_process</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, ps_mgmt.o(i.enter_ps_doze_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = enter_ps_doze_process &rArr; ps_doze_cond_match &rArr; wait_tx_buf_empty_locked &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_udelay
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_doze_cond_match
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_lpds_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[72e]"></a>erp_ie_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wlan_utility.o(i.erp_ie_handler))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_beacon_info
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[5f0]"></a>exit_lpds_mode</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ps_mgmt.o(i.exit_lpds_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = exit_lpds_mode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lpds_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_ps_doze_process
</UL>

<P><STRONG><a name="[72f]"></a>ext_caps_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wlan_utility.o(i.ext_caps_handler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[513]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5f1]"></a>fill_connect_info</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, wlan_intf.o(i.fill_connect_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fill_connect_info &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wifi_network_mode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cipher_e
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[5f4]"></a>flush_pmksa_cache</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wpas_psk.o(i.flush_pmksa_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ie
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_wpa_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_send_timeout_callback
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmk_expire_timer_handler
</UL>

<P><STRONG><a name="[5f6]"></a>free_rx_desc_ring</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, soc_rx.o(i.free_rx_desc_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = free_rx_desc_ring &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init_recv_struct
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_struct
</UL>

<P><STRONG><a name="[5f7]"></a>free_short_skb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wlan_skb.o(i.free_short_skb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = free_short_skb &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_skb_priv
</UL>

<P><STRONG><a name="[5f8]"></a>free_skb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wlan_skb.o(i.free_skb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = free_skb &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_skb_priv
</UL>

<P><STRONG><a name="[5f9]"></a>gen_nonce</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, wpas_crypto.o(i.gen_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = gen_nonce &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_derive_psk_callback
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
</UL>

<P><STRONG><a name="[678]"></a>get_cpu_pktbuf_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ps_mgmt.o(i.get_cpu_pktbuf_addr))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[579]"></a>get_cur_max_rate_index</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, wlan_utility.o(i.get_cur_max_rate_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_cur_max_rate_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rate_to_rate_index
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_mcs_rate_index
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[5fc]"></a>get_matched_rate</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, wlan_utility.o(i.get_matched_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_matched_rate &rArr; support_rate_match
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;support_rate_match
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[5fb]"></a>get_max_mcs_rate_index</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, wlan_utility.o(i.get_max_mcs_rate_index))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_max_rate_index
</UL>

<P><STRONG><a name="[5fe]"></a>get_rate_set</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, wlan_utility.o(i.get_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_rate_set &rArr; is_basic_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_id_to_wifi_rate
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_basic_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
</UL>

<P><STRONG><a name="[601]"></a>get_sw_node_entry</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, hal_security.o(i.get_sw_node_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = get_sw_node_entry &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_pairwise_key
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_del_pairwise_key
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_security
</UL>

<P><STRONG><a name="[602]"></a>get_tx_dig_gain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_dm.o(i.get_tx_dig_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_tx_dig_gain
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>

<P><STRONG><a name="[15c]"></a>hal_add_tx_power</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, hal_phy.o(i.hal_add_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_add_tx_power &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_tx_power
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_force_tx_power
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_calcomp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>hal_calibration_rf</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hal_rf.o(i.hal_calibration_rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = hal_calibration_rf &rArr; hal_rf_rx_iqk &rArr; rx_psd &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dck
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_dck
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rck
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_lnak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>hal_check_ap_alive</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, hal_main.o(i.hal_check_ap_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = hal_check_ap_alive &rArr; wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>hal_conf_trig</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hal_phy.o(i.hal_conf_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hal_conf_trig &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_mac_rx_bus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>hal_config_beacon</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hal_main.o(i.hal_config_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_config_beacon &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>hal_config_rate</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, hal_main.o(i.hal_config_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_config_rate &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>hal_continuous_tx_test</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, hal_phy.o(i.hal_continuous_tx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hal_continuous_tx_test &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rftx_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>hal_crystal_tracking</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_dm.o(i.hal_crystal_tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = hal_crystal_tracking &rArr; hal_dm_crystal_tunning_calc &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_crystal_cap
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>hal_dac_tx_test</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, hal_phy.o(i.hal_dac_tx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_dac_tx_test &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rftx_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>hal_data_deinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_main.o(i.hal_data_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_data_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>hal_data_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_main.o(i.hal_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_data_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>hal_del_default_or_grp_key</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_security.o(i.hal_del_default_or_grp_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_del_default_or_grp_key &rArr; delete_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_node_cache_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>hal_del_pairwise_key</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, hal_security.o(i.hal_del_pairwise_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = hal_del_pairwise_key &rArr; delete_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_node_cache_entry
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_sw_node
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_node_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>hal_disable_interrupt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hal_interrupt.o(i.hal_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_disable_interrupt &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>hal_disconnect_handle</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hal_main.o(i.hal_disconnect_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_disconnect_handle &rArr; os_cancel_timer_ex &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[608]"></a>hal_dm_crystal_tunning_calc</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, hal_dm.o(i.hal_dm_crystal_tunning_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hal_dm_crystal_tunning_calc &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_crystal_tracking
</UL>

<P><STRONG><a name="[17f]"></a>hal_dm_funcs</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, hal_dm.o(i.hal_dm_funcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = hal_dm_funcs &rArr; dynamic_rx_dck &rArr; hal_rf_rx_dck &rArr; do_rx_rck &rArr; hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_crystal_tracking
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_tracking
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_mismatch_tracking
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_vcok
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_rx_dck
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_dpd
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfo_tracking
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[614]"></a>hal_dm_init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, hal_dm.o(i.hal_dm_init))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>

<P><STRONG><a name="[17a]"></a>hal_dump_adc</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, hal_phy.o(i.hal_dump_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_dump_adc &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>hal_enable_interrupt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hal_interrupt.o(i.hal_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_enable_interrupt &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>hal_fix_tx_rate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_main.o(i.hal_fix_tx_rate))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>hal_force_tx_power</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_phy.o(i.hal_force_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_force_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>hal_get_crystal_cap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_rf.o(i.hal_get_crystal_cap))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>hal_get_efuse_info</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, hal_efuse.o(i.hal_get_efuse_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_get_efuse_info &rArr; rf_efuse_read &rArr; rf_efuse_map_read &rArr; efuse_read &rArr; efuse_macro_width_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_read
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_plan_proc
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_ft_k
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_level_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>hal_get_hiq_empty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_main.o(i.hal_get_hiq_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_get_hiq_empty &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>hal_get_thermal</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, hal_dm.o(i.hal_get_thermal))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iq_comp_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>hal_get_tx_power</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_phy.o(i.hal_get_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_get_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>hal_get_wlanhdr_offset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_main.o(i.hal_get_wlanhdr_offset))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>hal_hw_halt</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, hal_main.o(i.hal_hw_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_hw_halt &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_turn_off_rf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>hal_hw_init</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, hal_main.o(i.hal_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = hal_hw_init &rArr; hal_init_rf &rArr; hal_load_freq_k &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_channel_set
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_plan_proc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_mac_addr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_bb
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_queue_and_pages
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enable_rx
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_contention_param
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>hal_hw_reset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hal_main.o(i.hal_hw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = hal_hw_reset &rArr; wlan_send_queued_frame &rArr; wlan_send_bcmc_frame &rArr; wlan_xmit_bcmc_frame &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>hal_init_bb</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, hal_phy.o(i.hal_init_bb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = hal_init_bb &rArr; hal_set_bandwidth &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>hal_init_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_interrupt.o(i.hal_init_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>hal_init_mac_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_main.o(i.hal_init_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_init_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>hal_init_rf</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, hal_rf.o(i.hal_init_rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hal_init_rf &rArr; hal_load_freq_k &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_type_reg_read
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_reg_read
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>hal_keep_alive_ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_fw_intf.o(i.hal_keep_alive_ctrl))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[61d]"></a>hal_load_freq_k</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, hal_rf.o(i.hal_load_freq_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hal_load_freq_k &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_crystal_cap
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
</UL>

<P><STRONG><a name="[610]"></a>hal_load_ft_k</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hal_efuse.o(i.hal_load_ft_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_load_ft_k
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_reg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
</UL>

<P><STRONG><a name="[183]"></a>hal_lps_ctrl</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, hal_fw_intf.o(i.hal_lps_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_lps_ctrl &rArr; handle_ps_ctrl &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_lps_policy
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ps_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>hal_mp_mode_tx_setup</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, hal_main.o(i.hal_mp_mode_tx_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_mp_mode_tx_setup &rArr; hal_enable_interrupt &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_enable_interrupt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>hal_mp_use_efuse</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hal_main.o(i.hal_mp_use_efuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hal_mp_use_efuse &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_plan_proc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_setting_by_chan_plan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_cal
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_ft_k
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>hal_parse_rx_desc</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, hal_desc.o(i.hal_parse_rx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hal_parse_rx_desc &rArr; wlan_dump_packet &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>hal_ra_control</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_rate.o(i.hal_ra_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_ra_control
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>hal_ra_get_cca_score</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, hal_rate.o(i.hal_ra_get_cca_score))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hal_ra_get_cca_score &rArr; wlan_read16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>hal_ra_get_reporttbl</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, hal_rate.o(i.hal_ra_get_reporttbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_ra_get_reporttbl &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>hal_ra_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_rate.o(i.hal_ra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = hal_ra_init &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>hal_ra_set_ctlf_fback</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hal_rate.o(i.hal_ra_set_ctlf_fback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_ra_set_ctlf_fback &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>hal_ra_set_report_intvl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rate.o(i.hal_ra_set_report_intvl))
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>hal_ra_update_ctrtbl</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, hal_rate.o(i.hal_ra_update_ctrtbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = hal_ra_update_ctrtbl &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>hal_read_aadc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hal_phy.o(i.hal_read_aadc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_read_aadc &rArr; hal_write_bb_dig_reg &rArr; write_phy_dig_reg &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_dig_reg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_bb_dig_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>hal_read_bb_dig_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_phy.o(i.hal_read_bb_dig_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = hal_read_bb_dig_reg &rArr; read_phy_dig_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phy_dig_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_aadc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>hal_read_bb_reg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hal_phy.o(i.hal_read_bb_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>hal_read_reg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_main.o(i.hal_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_read_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>hal_reset_all_keys</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_security.o(i.hal_reset_all_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_reset_all_keys &rArr; delete_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_node_cache_entry
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_sw_node
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>hal_reset_power_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_main.o(i.hal_reset_power_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = hal_reset_power_table &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_tracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>hal_rf_lnak</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, hal_calibration.o(i.hal_rf_lnak))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hal_rf_lnak &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>hal_rf_rck</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, hal_calibration.o(i.hal_rf_rck))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_rf_rck &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>hal_rf_rx_dck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hal_calibration.o(i.hal_rf_rx_dck))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hal_rf_rx_dck &rArr; do_rx_rck &rArr; hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_rx_dck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>hal_rf_rx_iqk</STRONG> (Thumb, 1246 bytes, Stack size 224 bytes, hal_calibration.o(i.hal_rf_rx_iqk))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = hal_rf_rx_iqk &rArr; rx_psd &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_iqk_comp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>hal_rf_set_freq</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hal_rf.o(i.hal_rf_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_rf_set_freq &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_pll_cal_trigger
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>hal_rf_set_plldig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_rf.o(i.hal_rf_set_plldig))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = hal_rf_set_plldig &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[625]"></a>hal_rf_tx_dcik</STRONG> (Thumb, 706 bytes, Stack size 48 bytes, hal_calibration.o(i.hal_rf_tx_dcik))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hal_rf_tx_dcik &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dck
</UL>

<P><STRONG><a name="[192]"></a>hal_rf_tx_dck</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, hal_calibration.o(i.hal_rf_tx_dck))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_rf_tx_dck &rArr; hal_rf_tx_dcvk &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcvk
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcik
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[626]"></a>hal_rf_tx_dcvk</STRONG> (Thumb, 700 bytes, Stack size 48 bytes, hal_calibration.o(i.hal_rf_tx_dcvk))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hal_rf_tx_dcvk &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dck
</UL>

<P><STRONG><a name="[191]"></a>hal_rf_tx_iqk</STRONG> (Thumb, 1902 bytes, Stack size 200 bytes, hal_calibration.o(i.hal_rf_tx_iqk))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = hal_rf_tx_iqk &rArr; rx_psd &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iq_comp_base
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_iqk_comp
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_calibration_rf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>hal_rf_tx_lok</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_calibration.o(i.hal_rf_tx_lok))
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>hal_rx_evm</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, hal_phy.o(i.hal_rx_evm))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = hal_rx_evm &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rftx_ctrl
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>hal_rx_filter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_main.o(i.hal_rx_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_rx_filter &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>hal_rx_psd</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, hal_phy.o(i.hal_rx_psd))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = hal_rx_psd &rArr; rx_psd &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>hal_set_band</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hal_phy.o(i.hal_set_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_set_band
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>hal_set_bandwidth</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, hal_phy.o(i.hal_set_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_set_bandwidth &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bandwidth_config
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_bb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>hal_set_beacon_tx_desc</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, hal_desc.o(i.hal_set_beacon_tx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_set_beacon_tx_desc &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_rate
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_data_retry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>hal_set_bssid_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_main.o(i.hal_set_bssid_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_set_bssid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enable_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>hal_set_crystal_cap</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hal_rf.o(i.hal_set_crystal_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = hal_set_crystal_cap &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_crystal_tracking
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_load_freq_k
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfo_tracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>hal_set_default_or_grp_key</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hal_security.o(i.hal_set_default_or_grp_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = hal_set_default_or_grp_key &rArr; set_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_hw_enc_mapping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>hal_set_mp_pwroffset</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hal_main.o(i.hal_set_mp_pwroffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_set_mp_pwroffset &rArr; hal_set_power_cal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_cal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>hal_set_mp_targetpwr</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hal_main.o(i.hal_set_mp_targetpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hal_set_mp_targetpwr &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>hal_set_network_mode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, hal_main.o(i.hal_set_network_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_set_network_mode &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>hal_set_pairwise_key</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, hal_security.o(i.hal_set_pairwise_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = hal_set_pairwise_key &rArr; set_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_hw_enc_mapping
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_node_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>hal_set_phy_loopback</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, hal_phy.o(i.hal_set_phy_loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = hal_set_phy_loopback &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[620]"></a>hal_set_power_cal</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, hal_phy.o(i.hal_set_power_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_set_power_cal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_dig_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_switch_channel
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_mp_pwroffset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
</UL>

<P><STRONG><a name="[56b]"></a>hal_set_power_table</STRONG> (Thumb, 756 bytes, Stack size 80 bytes, hal_phy.o(i.hal_set_power_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_power
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_center_ch
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_max_power_limit
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_dig_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_switch_channel
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_mp_targetpwr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_power_table
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>

<P><STRONG><a name="[189]"></a>hal_set_promisc_filter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_main.o(i.hal_set_promisc_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hal_set_promisc_filter &rArr; wlan_write16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>hal_set_promisc_mode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hal_main.o(i.hal_set_promisc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_set_promisc_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>hal_set_tx_desc</STRONG> (Thumb, 972 bytes, Stack size 72 bytes, hal_desc.o(i.hal_set_tx_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = hal_set_tx_desc &rArr; set_tx_desc_security &rArr; get_sw_node_entry &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_security
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_rate
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_data_retry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>hal_set_tx_power</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, hal_phy.o(i.hal_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>hal_set_tx_rts_cts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_main.o(i.hal_set_tx_rts_cts))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_set_tx_rts_cts &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>hal_set_wmm_param</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, hal_main.o(i.hal_set_wmm_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_set_wmm_param &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>hal_setting_by_chan_plan</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, hal_phy.o(i.hal_setting_by_chan_plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_setting_by_chan_plan &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_switch_channel
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_use_efuse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>hal_switch_channel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_phy.o(i.hal_switch_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hal_switch_channel &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_setting_by_chan_plan
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_channel_config
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_cal
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[613]"></a>hal_turn_off_rf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rf.o(i.hal_turn_off_rf))
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
</UL>

<P><STRONG><a name="[14e]"></a>hal_update_interrupt_mask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_interrupt.o(i.hal_update_interrupt_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_update_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[5d7]"></a>hal_wait_rx_buf_empty</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hal_main.o(i.hal_wait_rx_buf_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
</UL>

<P><STRONG><a name="[149]"></a>hal_watchdog_enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_watchdog.o(i.hal_watchdog_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = hal_watchdog_enable &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>hal_watchdog_func</STRONG> (Thumb, 530 bytes, Stack size 120 bytes, hal_watchdog.o(i.hal_watchdog_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = hal_watchdog_func &rArr; hal_dm_funcs &rArr; dynamic_rx_dck &rArr; hal_rf_rx_dck &rArr; do_rx_rck &rArr; hal_read_bb_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_reg_byte
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_lps_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>hal_watchdog_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_watchdog.o(i.hal_watchdog_init))
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>hal_wlan_info_notify</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hal_fw_intf.o(i.hal_wlan_info_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = hal_wlan_info_notify &rArr; prepare_cpu_queue_packet &rArr; wlan_get_xmitframe &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_media_status
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_security_type_notify
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ps_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>hal_write_bb_dig_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_phy.o(i.hal_write_bb_dig_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_write_bb_dig_reg &rArr; write_phy_dig_reg &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_phy_dig_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_aadc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>hal_write_bb_reg_byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_phy.o(i.hal_write_bb_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_write_bb_reg_byte &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>hal_write_bb_reg_dword</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hal_phy.o(i.hal_write_bb_reg_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hal_write_bb_reg_dword &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>hal_write_efuse_check</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, hal_efuse.o(i.hal_write_efuse_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hal_write_efuse_check &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>hal_write_reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_main.o(i.hal_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hal_write_reg &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[61e]"></a>handle_ps_ctrl</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, ps_mgmt.o(i.handle_ps_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = handle_ps_ctrl &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lps_ctrl
</UL>

<P><STRONG><a name="[635]"></a>handle_ps_param</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ps_mgmt.o(i.handle_ps_param))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wlan_info_notify
</UL>

<P><STRONG><a name="[636]"></a>handle_security_type_notify</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ps_mgmt.o(i.handle_security_type_notify))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wlan_info_notify
</UL>

<P><STRONG><a name="[633]"></a>handle_set_media_status</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ps_mgmt.o(i.handle_set_media_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handle_set_media_status
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wlan_info_notify
</UL>

<P><STRONG><a name="[63a]"></a>handle_tx_packet_in</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ps_mgmt.o(i.handle_tx_packet_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = handle_tx_packet_in &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
</UL>

<P><STRONG><a name="[6ee]"></a>handle_tx_packet_triggered</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ps_mgmt.o(i.handle_tx_packet_triggered))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_hw_tx
</UL>

<P><STRONG><a name="[554]"></a>hmac_md5</STRONG> (Thumb, 190 bytes, Stack size 344 bytes, wpas_hmac.o(i.hmac_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hmac_md5 &rArr; wpa_md5_final &rArr; wpa_md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_update
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_final
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
</UL>

<P><STRONG><a name="[63e]"></a>hmac_sha</STRONG> (Thumb, 204 bytes, Stack size 448 bytes, wpas_hmac.o(i.hmac_sha))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAUpdate
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAInit
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_PRF
</UL>

<P><STRONG><a name="[640]"></a>hmac_sha256_vector</STRONG> (Thumb, 90 bytes, Stack size 376 bytes, wpas_crypto.o(i.hmac_sha256_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf_bits
</UL>

<P><STRONG><a name="[72c]"></a>ht_caps_handler</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, wlan_utility.o(i.ht_caps_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ht_caps_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[577]"></a>ht_on_assoc_rsp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wlan_utility.o(i.ht_on_assoc_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ht_on_assoc_rsp &rArr; set_channel_bwmode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[72d]"></a>ht_operation_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wlan_utility.o(i.ht_operation_handler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[641]"></a>identify_ap_manufacturer</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wlan_utility.o(i.identify_ap_manufacturer))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = identify_ap_manufacturer &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[55c]"></a>identify_ap_vendor</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wlan_utility.o(i.identify_ap_vendor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = identify_ap_vendor &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ap_vendor
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[535]"></a>inc_large_int</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wpas_crypto.o(i.inc_large_int))
<BR><BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_construct_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct16_int
</UL>

<P><STRONG><a name="[540]"></a>inc_oct32_int</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wpas_crypto.o(i.inc_oct32_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inc_oct32_int &rArr; inc_oct16_int
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct16_int
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrity_check_fail
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[60e]"></a>infra_mode_associated</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wlan_utility.o(i.infra_mode_associated))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_lps_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_status_check
</UL>

<P><STRONG><a name="[617]"></a>init_contention_param</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hal_main.o(i.init_contention_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = init_contention_param &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>

<P><STRONG><a name="[619]"></a>init_enable_rx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_main.o(i.init_enable_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_enable_rx &rArr; hal_set_bssid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bssid_check
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>

<P><STRONG><a name="[56a]"></a>init_mac_rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ps_mgmt.o(i.init_mac_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = init_mac_rx &rArr; init_rx_queue &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>

<P><STRONG><a name="[56d]"></a>init_mac_tx</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ps_mgmt.o(i.init_mac_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_mac_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>

<P><STRONG><a name="[688]"></a>init_ps</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, ps_mgmt.o(i.init_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[6d0]"></a>init_rx_desc_ring</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, soc_rx.o(i.init_rx_desc_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_rx_desc_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init_recv_struct
</UL>

<P><STRONG><a name="[616]"></a>init_rx_queue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_main.o(i.init_rx_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = init_rx_queue &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mac_rx
</UL>

<P><STRONG><a name="[643]"></a>init_sw_timer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sw_timer.o(i.init_sw_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_sw_timer &rArr; init_sw_timer_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw_timer_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[644]"></a>init_sw_timer_reg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sw_timer.o(i.init_sw_timer_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_sw_timer_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw_timer
</UL>

<P><STRONG><a name="[615]"></a>init_tx_queue_and_pages</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_main.o(i.init_tx_queue_and_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = init_tx_queue_and_pages &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>

<P><STRONG><a name="[531]"></a>integrity_check_fail</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wpas_crypto.o(i.integrity_check_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = integrity_check_fail &rArr; inc_oct32_int &rArr; inc_oct16_int
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[645]"></a>ioctl_get_scan_list</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, wlan_ioctl.o(i.ioctl_get_scan_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ioctl_get_scan_list &rArr; translate_scan_result &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_scan_result
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_scan_list_entry
</UL>

<P><STRONG><a name="[648]"></a>ioctl_proc_assoc_rsp</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, wlan_ioctl.o(i.ioctl_proc_assoc_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ioctl_proc_assoc_rsp &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[64b]"></a>ioctl_proc_del_key</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wlan_ioctl.o(i.ioctl_proc_del_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ioctl_proc_del_key &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[64c]"></a>ioctl_proc_discon_req</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, wlan_ioctl.o(i.ioctl_proc_discon_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ioctl_proc_discon_req &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[64e]"></a>ioctl_set_essid</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, wlan_ioctl.o(i.ioctl_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = ioctl_set_essid &rArr; wlan_set_80211_ssid &rArr; wlan_connect_start &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_ssid
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_network_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[651]"></a>ioctl_set_port_status</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, wlan_ioctl.o(i.ioctl_set_port_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ioctl_set_port_status &rArr; wlan_add_ba_proc &rArr; wlan_add_ba_req &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[653]"></a>ioctl_set_security_info</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, wlan_ioctl.o(i.ioctl_set_security_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ioctl_set_security_info &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[655]"></a>ioctl_set_wep_enc</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, wlan_ioctl.o(i.ioctl_set_wep_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ioctl_set_wep_enc &rArr; wlan_set_80211_add_wep &rArr; wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_add_wep
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_indicate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
</UL>

<P><STRONG><a name="[657]"></a>ioctl_set_wpa_auth_entry</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, wlan_ioctl.o(i.ioctl_set_wpa_auth_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ioctl_set_wpa_auth_entry &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[658]"></a>ioctl_set_wpa_enc</STRONG> (Thumb, 788 bytes, Stack size 96 bytes, wlan_ioctl.o(i.ioctl_set_wpa_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ioctl_set_wpa_enc &rArr; wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_sta_key
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[60f]"></a>iq_mismatch_tracking</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, hal_dm.o(i.iq_mismatch_tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = iq_mismatch_tracking &rArr; set_tx_iq_comp &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_iq_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[773]"></a>is_active_scan_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wlan_scan.o(i.is_active_scan_channel))
<BR><BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
</UL>

<P><STRONG><a name="[65d]"></a>is_ap_in_tkip</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wlan_utility.o(i.is_ap_in_tkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = is_ap_in_tkip &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_capability
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
</UL>

<P><STRONG><a name="[600]"></a>is_basic_rate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wlan_utility.o(i.is_basic_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_basic_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_map_to_rate_set
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_set
</UL>

<P><STRONG><a name="[660]"></a>is_same_network</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wlan_utility.o(i.is_same_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = is_same_network &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_cur_network
</UL>

<P><STRONG><a name="[578]"></a>judge_wireless_mode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, wlan_utility.o(i.judge_wireless_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = judge_wireless_mode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;only_cck_rates_included
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cck_rates_included
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[663]"></a>keep_active_timeout_process</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ps_mgmt.o(i.keep_active_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keep_active_timeout_process &rArr; set_hw_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sw_timer
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_func
</UL>

<P><STRONG><a name="[547]"></a>leave_ps_doze_process</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ps_mgmt.o(i.leave_ps_doze_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = leave_ps_doze_process &rArr; config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_beacon_info
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_lpds_mode
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_early_process
</UL>

<P><STRONG><a name="[10b]"></a>link_retry_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wlan_connect.o(i.link_retry_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = link_retry_timer_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
</UL>
<P><STRONG><a name="[50e]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[666]"></a>lpds_wakeup_process</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ps_mgmt.o(i.lpds_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lpds_wakeup_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[668]"></a>mc_uc_match_process</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ps_mgmt.o(i.mc_uc_match_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mc_uc_match_process &rArr; config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_beacon_info
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[534]"></a>octet_to_large_int</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wpas_crypto.o(i.octet_to_large_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = octet_to_large_int
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[553]"></a>omac1_aes_128</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, wpas_crypto.o(i.omac1_aes_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = omac1_aes_128 &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
</UL>

<P><STRONG><a name="[54b]"></a>omac1_aes_128_vector</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wpas_crypto.o(i.omac1_aes_128_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mic
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128
</UL>

<P><STRONG><a name="[669]"></a>omac1_aes_vector</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, wpas_crypto.o(i.omac1_aes_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encryp
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf_mulx
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128_vector
</UL>

<P><STRONG><a name="[661]"></a>only_cck_rates_included</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wlan_utility.o(i.only_cck_rates_included))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_wireless_mode
</UL>

<P><STRONG><a name="[52d]"></a>os_cancel_timer_ex</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_api.o(i.os_cancel_timer_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = os_cancel_timer_ex &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_timer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timeout_callback
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_start
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_sa_query_recved
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_failed_proc
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sta_wpa_info
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
</UL>

<P><STRONG><a name="[66c]"></a>os_create_workqueue</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, os_api.o(i.os_create_workqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = os_create_workqueue &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_exist
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_create_driver_threads
</UL>

<P><STRONG><a name="[66d]"></a>os_deinit_queue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_api.o(i.os_deinit_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_deinit_queue &rArr; sys_mutex_free &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmit_struct
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_skb_priv
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_recv_struct
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
</UL>

<P><STRONG><a name="[66e]"></a>os_del_timer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_api.o(i.os_del_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = os_del_timer &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_delete
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_mlme_timer
</UL>

<P><STRONG><a name="[66f]"></a>os_destroy_workqueue</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, os_api.o(i.os_destroy_workqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = os_destroy_workqueue &rArr; sys_task_delete &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_down
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_work
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_delete_driver_threads
</UL>

<P><STRONG><a name="[646]"></a>os_end_of_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_api.o(i.os_end_of_queue))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network_by_ssid
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_get_scan_list
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_get_assoc_info
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmitframe_queue
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_frame_num
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_queue_size
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_all_assoc_stainfo
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_scanned_queue
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_pkt
</UL>

<P><STRONG><a name="[671]"></a>os_get_queue_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_api.o(i.os_get_queue_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_get_queue_size
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
</UL>

<P><STRONG><a name="[672]"></a>os_init_queue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_api.o(i.os_init_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_init_queue &rArr; sys_mutex_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_xmit_struct
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_skb_priv
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_recv_struct
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_info
</UL>

<P><STRONG><a name="[673]"></a>os_init_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_api.o(i.os_init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_alloc
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_info
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_timer
</UL>

<P><STRONG><a name="[719]"></a>os_init_work</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_api.o(i.os_init_work))
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_req
</UL>

<P><STRONG><a name="[536]"></a>os_memcmp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_api.o(i.os_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restruct_wmm_ie
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_wpa_ie
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wps_ie
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_ie
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_cipher
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_cipher
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_akm_suite
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network_by_ssid
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect_req_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_delete_aid
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_snap_header
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ap2sta_frame
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ap_in_tkip
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_vendor
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_manufacturer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_rsp_recved
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_req_recved
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_recved
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_deauth_recved
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_sa_query_recved
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mic
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_node_entry
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_wpa_rsn_ie
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_wpa_rsn_ie
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[521]"></a>os_mfree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_api.o(i.os_mfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_free
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmit_struct
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_recv_struct
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_skb
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_short_skb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_event_callback
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_callback
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_rx_desc_ring
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sta_wpa_info
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_clear_free
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_deinit
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>

<P><STRONG><a name="[674]"></a>os_queue_empty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_api.o(i.os_queue_empty))
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_frame_num
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_short_pktbuf
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_recvframe
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_network
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitbuf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
</UL>

<P><STRONG><a name="[665]"></a>os_queue_work</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_api.o(i.os_queue_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_work
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_tx_handler
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_rx_handler (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_resend_timer_handler
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timer_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timeout_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dyn_chk_timer_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_retry_timer_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sa_query_timer_handler
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_req
</UL>

<P><STRONG><a name="[545]"></a>os_set_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_api.o(i.os_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_set_timer &rArr; sys_timer_start_ext &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_start_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sa_query_callback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_hiq_callback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_hiq_check_timer
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dyn_chk_timer_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_callback
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_start
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pmksa_cache
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_retransmission
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sa_query
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[675]"></a>os_workqueue_msg_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_api.o(i.os_workqueue_msg_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = os_workqueue_msg_num &rArr; sys_task_msg_num &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_tx_handler
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_rx_handler (via Veneer)
</UL>

<P><STRONG><a name="[523]"></a>os_zmalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_api.o(i.os_zmalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start_create_bss
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_alloc
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_xmit_struct
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_recv_struct
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_skb
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_short_skb
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_req
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_init
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
</UL>

<P><STRONG><a name="[676]"></a>parse_snap_header</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wlan_rx.o(i.parse_snap_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = parse_snap_header &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanhdr_to_ethhdr
</UL>

<P><STRONG><a name="[677]"></a>parse_wpa_rsn_ie</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, wpas_psk.o(i.parse_wpa_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = parse_wpa_rsn_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[5c7]"></a>password_hash</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wpas_crypto.o(i.password_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = password_hash &rArr; F &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
</UL>

<P><STRONG><a name="[113]"></a>pmk_expire_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_psk.o(i.pmk_expire_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = pmk_expire_timer_handler &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_psk.o(i.wpas_priv_alloc)
</UL>
<P><STRONG><a name="[634]"></a>prepare_cpu_queue_packet</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, hal_fw_intf.o(i.prepare_cpu_queue_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = prepare_cpu_queue_packet &rArr; wlan_get_xmitframe &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_mgmtframe_attrib
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_ps_poll
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_null_data
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_arp_response
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cpu_pktbuf_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wlan_info_notify
</UL>

<P><STRONG><a name="[67e]"></a>process_addba_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_utility.o(i.process_addba_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = process_addba_req &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
</UL>

<P><STRONG><a name="[67f]"></a>ps_awake_leave_ps_process</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ps_mgmt.o(i.ps_awake_leave_ps_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ps_awake_leave_ps_process &rArr; send_null_data &rArr; wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_beacon_process
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_tx_pkt_process
</UL>

<P><STRONG><a name="[682]"></a>ps_awake_tx_pkt_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ps_mgmt.o(i.ps_awake_tx_pkt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ps_awake_tx_pkt_process &rArr; ps_awake_leave_ps_process &rArr; send_null_data &rArr; wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx_buf_empty
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[5ee]"></a>ps_doze_cond_match</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, ps_mgmt.o(i.ps_doze_cond_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ps_doze_cond_match &rArr; wait_tx_buf_empty_locked &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx_buf_empty_locked
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rx_buf_empty_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_doze_process
</UL>

<P><STRONG><a name="[687]"></a>ps_mgmt_state_machine</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, ps_mgmt.o(i.ps_mgmt_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ps_mgmt_state_machine &rArr; mc_uc_match_process &rArr; config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sw_timer
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw_timer
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_process
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_beacon_process
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_wait_event
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_timeout_process
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_poll_timeout_process
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_tx_pkt_process
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_uc_match_process
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpds_wakeup_process
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_ps_doze_process
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ps
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_doze_process
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_awake_process
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtim_rx_bc_timeout_process
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_timeout_process
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_early_process
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_tx_pkt_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_callback
</UL>

<P><STRONG><a name="[68d]"></a>ps_poll_timeout_process</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ps_mgmt.o(i.ps_poll_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ps_poll_timeout_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[77d]"></a>ps_send_event</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ps_mgmt.o(i.ps_send_event))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_rx_isr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
</UL>

<P><STRONG><a name="[689]"></a>ps_timeout_process</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ps_mgmt.o(i.ps_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ps_timeout_process &rArr; send_null_data &rArr; wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[68a]"></a>ps_wait_event</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ps_mgmt.o(i.ps_wait_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_wait_event &rArr; deepsleep_wfi_set &rArr; pmu_to_deepsleepmode
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakelock_release
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakelock_acquire
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpds_preconfig
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepsleep_wfi_set
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[2b9]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_print
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[68f]"></a>query_tx_desc_polling</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, soc_tx.o(i.query_tx_desc_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = query_tx_desc_polling &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[6d7]"></a>queue_select_mapping</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, soc_tx.o(i.queue_select_mapping))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[690]"></a>ra_add_sta</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, wlan_ra.o(i.ra_add_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ra_add_sta &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_queue_size
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_analyze_mask
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lowest_rate_idx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_rate_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[694]"></a>ra_del_sta</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wlan_ra.o(i.ra_del_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ra_del_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
</UL>

<P><STRONG><a name="[695]"></a>ra_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wlan_ra.o(i.ra_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ra_disable &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
</UL>

<P><STRONG><a name="[696]"></a>ra_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wlan_ra.o(i.ra_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ra_enable &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
</UL>

<P><STRONG><a name="[697]"></a>ra_func</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wlan_ra.o(i.ra_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ra_func &rArr; ra_process &rArr; ra_try_up_done &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_adaptive_callback
</UL>

<P><STRONG><a name="[699]"></a>ra_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wlan_ra.o(i.ra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ra_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[57c]"></a>ra_start</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wlan_ra.o(i.ra_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ra_start &rArr; ra_add_sta &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[60c]"></a>ra_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wlan_ra.o(i.ra_stop))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
</UL>

<P><STRONG><a name="[597]"></a>random_get_bytes</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, wpas_crypto.o(i.random_get_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
</UL>

<P><STRONG><a name="[5ff]"></a>rate_id_to_wifi_rate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, wlan_utility.o(i.rate_id_to_wifi_rate))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_set
</UL>

<P><STRONG><a name="[6a0]"></a>rate_map_to_rate_set</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, wlan_utility.o(i.rate_map_to_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rate_map_to_rate_set &rArr; is_basic_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_basic_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_generate_bss_ie
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
</UL>

<P><STRONG><a name="[568]"></a>rate_set_to_rate_map</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, wlan_utility.o(i.rate_set_to_rate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rate_set_to_rate_map
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
</UL>

<P><STRONG><a name="[623]"></a>read_phy_dig_reg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_phy.o(i.read_phy_dig_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = read_phy_dig_reg &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_bb_dig_reg
</UL>

<P><STRONG><a name="[177]"></a>read_rf_reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rf.o(i.read_rf_reg))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rck
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_lnak
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_dig_gain
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_crystal_tunning_calc
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_dig_gain
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_vcok
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcvk
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcik
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[52e]"></a>replay_counter_compare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpas_crypto.o(i.replay_counter_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = replay_counter_compare &rArr; octet_to_large_int
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octet_to_large_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
</UL>

<P><STRONG><a name="[5ec]"></a>reset_beacon_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ps_mgmt.o(i.reset_beacon_info))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_uc_match_process
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_ps_doze_process
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ps_awake_process
</UL>

<P><STRONG><a name="[681]"></a>return_to_active_process</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ps_mgmt.o(i.return_to_active_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = return_to_active_process &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_udelay
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_timeout_process
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
</UL>

<P><STRONG><a name="[628]"></a>rf_bandwidth_config</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, hal_rf.o(i.rf_bandwidth_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_bandwidth_config
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
</UL>

<P><STRONG><a name="[631]"></a>rf_channel_config</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, hal_rf.o(i.rf_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = rf_channel_config &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_pll_cal_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_switch_channel
</UL>

<P><STRONG><a name="[524]"></a>rijndaelKeySetupEnc</STRONG> (Thumb, 610 bytes, Stack size 28 bytes, aes-internal.o(i.rijndaelKeySetupEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rijndaelKeySetupEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
</UL>

<P><STRONG><a name="[68b]"></a>rx_beacon_process</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, ps_mgmt.o(i.rx_beacon_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rx_beacon_process &rArr; ps_awake_leave_ps_process &rArr; send_null_data &rArr; wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ps_poll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[68c]"></a>rx_packet_process</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, ps_mgmt.o(i.rx_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rx_packet_process &rArr; send_ps_poll &rArr; wait_cpu_queue_available &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ps_poll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>

<P><STRONG><a name="[624]"></a>rx_psd</STRONG> (Thumb, 498 bytes, Stack size 88 bytes, hal_phy.o(i.rx_psd))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rx_psd &rArr; dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_psd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
</UL>

<P><STRONG><a name="[6a5]"></a>sae_build_commit_data</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, wpas_sae.o(i.sae_build_commit_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_commit
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_prepare_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
</UL>

<P><STRONG><a name="[6a9]"></a>sae_build_confirm_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wpas_sae.o(i.sae_build_confirm_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = sae_build_confirm_data &rArr; sae_write_confirm &rArr; sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
</UL>

<P><STRONG><a name="[6ab]"></a>sae_check_confirm</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, wpas_sae.o(i.sae_check_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = sae_check_confirm &rArr; sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_confirm_recved
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
</UL>

<P><STRONG><a name="[6ae]"></a>sae_clear_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wpas_sae.o(i.sae_clear_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = sae_clear_data &rArr; sae_clear_temp_data &rArr; bin_clear_free &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>

<P><STRONG><a name="[6af]"></a>sae_clear_temp_data</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wpas_sae.o(i.sae_clear_temp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sae_clear_temp_data &rArr; bin_clear_free &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_clear_free
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_deinit
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_confirm_recved
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_data
</UL>

<P><STRONG><a name="[6b1]"></a>sae_commit_recved</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, wpas_sae.o(i.sae_commit_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = sae_commit_recved &rArr; sae_process_commit &rArr; sae_derive_keys &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_process_commit
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
</UL>

<P><STRONG><a name="[6b4]"></a>sae_confirm_recved</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpas_sae.o(i.sae_confirm_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = sae_confirm_recved &rArr; sae_check_confirm &rArr; sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
</UL>

<P><STRONG><a name="[72a]"></a>sae_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_sae.o(i.sae_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_retransmission
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[6bc]"></a>sae_group_allowed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wpas_sae.o(i.sae_group_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sae_group_allowed &rArr; sae_set_group &rArr; crypto_ec_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>

<P><STRONG><a name="[6ad]"></a>sae_hex_dump</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wpas_sae.o(i.sae_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sae_hex_dump &rArr; dump_array &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_confirm
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_commit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_token
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
</UL>

<P><STRONG><a name="[6b2]"></a>sae_parse_commit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wpas_sae.o(i.sae_parse_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = sae_parse_commit &rArr; sae_parse_commit_element_ecc &rArr; crypto_ec_point_from_bin &rArr; crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_group_allowed
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_token
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_scalar
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_element_ecc
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_cmp
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_commit_recved
</UL>

<P><STRONG><a name="[6a7]"></a>sae_prepare_commit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wpas_sae.o(i.sae_prepare_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
</UL>

<P><STRONG><a name="[6b3]"></a>sae_process_commit</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, wpas_sae.o(i.sae_process_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = sae_process_commit &rArr; sae_derive_keys &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_k_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_commit_recved
</UL>

<P><STRONG><a name="[6a6]"></a>sae_set_group</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wpas_sae.o(i.sae_set_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sae_set_group &rArr; crypto_ec_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_data
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_suitable_group
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_prime_len
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_order_len
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_init
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_get_prime
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_get_order
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_group_allowed
</UL>

<P><STRONG><a name="[788]"></a>sae_set_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_sae.o(i.sae_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_retransmission
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
</UL>

<P><STRONG><a name="[6a8]"></a>sae_write_commit</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, wpas_sae.o(i.sae_write_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sae_write_commit &rArr; sae_hex_dump &rArr; dump_array &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
</UL>

<P><STRONG><a name="[6aa]"></a>sae_write_confirm</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wpas_sae.o(i.sae_write_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = sae_write_confirm &rArr; sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm_ecc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_confirm_data
</UL>

<P><STRONG><a name="[680]"></a>send_null_data</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pkt_send.o(i.send_null_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = send_null_data &rArr; wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx_buf_empty
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_packet_setting
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_timeout_process
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_leave_ps_process
</UL>

<P><STRONG><a name="[6a3]"></a>send_ps_poll</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pkt_send.o(i.send_ps_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = send_ps_poll &rArr; wait_cpu_queue_available &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_packet_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_process
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_beacon_process
</UL>

<P><STRONG><a name="[60b]"></a>set_channel_bwmode</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, wlan_utility.o(i.set_channel_bwmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = set_channel_bwmode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start_create_bss
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_on_assoc_rsp
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bwmode
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
</UL>

<P><STRONG><a name="[51d]"></a>set_hw_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ps_mgmt.o(i.set_hw_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_hw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_packet_process
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_beacon_process
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_active_process
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_timeout_process
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_active_timeout_process
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_early_process
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_tx_pkt_process
</UL>

<P><STRONG><a name="[627]"></a>set_iq_comp_base</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal_dm.o(i.set_iq_comp_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = set_iq_comp_base &rArr; hal_get_thermal &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
</UL>

<P><STRONG><a name="[6c7]"></a>set_pmksa_cache</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, wpas_psk.o(i.set_pmksa_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = set_pmksa_cache &rArr; os_set_timer &rArr; sys_timer_start_ext &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[6c6]"></a>set_power_bit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pkt_send.o(i.set_power_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_power_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
</UL>

<P><STRONG><a name="[528]"></a>set_replay_counter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpas_crypto.o(i.set_replay_counter))
<BR><BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_construct_eapol
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_construct_eapol_basic
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[607]"></a>set_rftx_ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_rf.o(i.set_rftx_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_continuous_tx_test
</UL>

<P><STRONG><a name="[62d]"></a>set_tx_dig_gain</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_dm.o(i.set_tx_dig_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_tx_dig_gain
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rf_reg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rf_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_cal
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_tracking
</UL>

<P><STRONG><a name="[65c]"></a>set_tx_iq_comp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hal_calibration.o(i.set_tx_iq_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = set_tx_iq_comp &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_mismatch_tracking
</UL>

<P><STRONG><a name="[556]"></a>sha256_prf_bits</STRONG> (Thumb, 222 bytes, Stack size 136 bytes, wpas_crypto.o(i.sha256_prf_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_keys
</UL>

<P><STRONG><a name="[103]"></a>soc_free_recv_pkt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, soc_rx.o(i.soc_free_recv_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = soc_free_recv_pkt &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[102]"></a>soc_free_recv_struct</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soc_rx.o(i.soc_free_recv_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = soc_free_recv_struct &rArr; free_rx_desc_ring &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_rx_desc_ring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[6cf]"></a>soc_get_pkt_attrib</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, soc_rx.o(i.soc_get_pkt_attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = soc_get_pkt_attrib &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sa
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
</UL>

<P><STRONG><a name="[101]"></a>soc_init_recv_struct</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, soc_rx.o(i.soc_init_recv_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = soc_init_recv_struct &rArr; free_rx_desc_ring &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc_ring
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_rx_desc_ring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[fb]"></a>soc_init_wlan_irqn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, soc_isr.o(i.soc_init_wlan_irqn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soc_init_wlan_irqn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_irq_num_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[6d2]"></a>soc_merge_multi_skb</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, soc_rx.o(i.soc_merge_multi_skb))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = soc_merge_multi_skb &rArr; soc_free_recv_pkt &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_promisc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_eapol
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
</UL>

<P><STRONG><a name="[6d4]"></a>soc_recvframe_handle</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, soc_rx.o(i.soc_recvframe_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = soc_recvframe_handle &rArr; wlan_recv_entry &rArr; wlan_indicate_pkts &rArr; wlan_handle_amsdu &rArr; wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_short_pktbuf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_pkt_attrib
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[ff]"></a>soc_send_beacon</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, soc_tx.o(i.soc_send_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = soc_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[fe]"></a>soc_send_test_xframe</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, soc_tx.o(i.soc_send_test_xframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = soc_send_test_xframe &rArr; query_tx_desc_polling &rArr; wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_tx_stats
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_hw_tx
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_select_mapping
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_tx_desc_polling
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_desc
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ratelimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[100]"></a>soc_xmit_complete</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, soc_tx.o(i.soc_xmit_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = soc_xmit_complete &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[6dc]"></a>softap_assoc_expire</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, wlan_dyn_chk.o(i.softap_assoc_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = softap_assoc_expire &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dynamic_check
</UL>

<P><STRONG><a name="[6dd]"></a>softap_auth_expire</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, wlan_dyn_chk.o(i.softap_auth_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = softap_auth_expire &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dynamic_check
</UL>

<P><STRONG><a name="[512]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6de]"></a>sta_construct_eapol</STRONG> (Thumb, 740 bytes, Stack size 128 bytes, wpas_psk.o(i.sta_construct_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sta_construct_eapol
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_replay_counter
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_large_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
</UL>

<P><STRONG><a name="[6e9]"></a>sta_mic_failure_proc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpas_psk.o(i.sta_mic_failure_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = sta_mic_failure_proc &rArr; sta_send_eapol &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_ptk
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[6ea]"></a>start_eapol_handshake</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, wpas_psk.o(i.start_eapol_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 2944<LI>Call Chain = start_eapol_handshake &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_large_int
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_nonce
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eapol_key_iv
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[667]"></a>start_sw_timer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sw_timer.o(i.start_sw_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_sw_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpds_wakeup_process
</UL>

<P><STRONG><a name="[664]"></a>stop_sw_timer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sw_timer.o(i.stop_sw_timer))
<BR><BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_active_timeout_process
</UL>

<P><STRONG><a name="[6f2]"></a>support_short_gi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wlan_utility.o(i.support_short_gi))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sta_info
</UL>

<P><STRONG><a name="[62b]"></a>sw_hw_enc_mapping</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_security.o(i.sw_hw_enc_mapping))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_pairwise_key
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_default_or_grp_key
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_desc_security
</UL>

<P><STRONG><a name="[6ec]"></a>sw_timer_func</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sw_timer.o(i.sw_timer_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sw_timer_func &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_active_timeout_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_run
</UL>

<P><STRONG><a name="[6ed]"></a>sw_timer_run</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sw_timer.o(i.sw_timer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sw_timer_run &rArr; sw_timer_func &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_func
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
</UL>

<P><STRONG><a name="[463]"></a>sys_memcpy1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_intf.o(i.sys_memcpy1))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>

<P><STRONG><a name="[3bf]"></a>sys_memcpy2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_intf.o(i.sys_memcpy2))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[647]"></a>translate_scan_result</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, wlan_ioctl.o(i.translate_scan_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = translate_scan_result &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wifi_network_mode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cipher_e
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_get_scan_list
</UL>

<P><STRONG><a name="[6d9]"></a>trigger_hw_tx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, soc_tx.o(i.trigger_hw_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = trigger_hw_tx &rArr; wlan_write16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tx_packet_triggered
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[63f]"></a>truncate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpas_hmac.o(i.truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = truncate
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha
</UL>

<P><STRONG><a name="[60d]"></a>tx_power_tracking</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hal_dm.o(i.tx_power_tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tx_power_tracking &rArr; hal_reset_power_table &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_power_table
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_dig_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dm_funcs
</UL>

<P><STRONG><a name="[6ef]"></a>update_bwmode</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, wlan_utility.o(i.update_bwmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = update_bwmode &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_beacon_info
</UL>

<P><STRONG><a name="[6f0]"></a>update_cfg_bss</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, wlan_intf.o(i.update_cfg_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = update_cfg_bss &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_support_rate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
</UL>

<P><STRONG><a name="[6c5]"></a>update_packet_setting</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pkt_send.o(i.update_packet_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_packet_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ps_poll
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
</UL>

<P><STRONG><a name="[57a]"></a>update_sta_info</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, wlan_utility.o(i.update_sta_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = update_sta_info
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;support_short_gi
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[737]"></a>update_tsf</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wlan_utility.o(i.update_tsf))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[684]"></a>wait_cpu_queue_available</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pkt_send.o(i.wait_cpu_queue_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wait_cpu_queue_available &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ps_poll
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_doze_cond_match
</UL>

<P><STRONG><a name="[685]"></a>wait_rx_buf_empty_locked</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ps_mgmt.o(i.wait_rx_buf_empty_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wait_rx_buf_empty_locked &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_doze_cond_match
</UL>

<P><STRONG><a name="[683]"></a>wait_tx_buf_empty</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ps_mgmt.o(i.wait_tx_buf_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wait_tx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_null_data
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_awake_tx_pkt_process
</UL>

<P><STRONG><a name="[686]"></a>wait_tx_buf_empty_locked</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ps_mgmt.o(i.wait_tx_buf_empty_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wait_tx_buf_empty_locked &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_doze_cond_match
</UL>

<P><STRONG><a name="[115]"></a>wifi_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wifi_close &rArr; wlan_sw_deinit &rArr; wlan_drv_struct_deinit &rArr; wlan_free_assoc_resources &rArr; wlan_release_all_assoc_stainfo &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>wifi_connect_req_entry</STRONG> (Thumb, 846 bytes, Stack size 136 bytes, wlan_intf.o(i.wifi_connect_req_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = wifi_connect_req_entry &rArr; ioctl_set_essid &rArr; wlan_set_80211_ssid &rArr; wlan_connect_start &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network_by_ssid
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_auth_entry
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_security_info
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[6fa]"></a>wifi_create_driver_threads</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, wlan_task.o(i.wifi_create_driver_threads))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wifi_create_driver_threads &rArr; os_create_workqueue &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[6fb]"></a>wifi_delete_driver_threads</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wlan_task.o(i.wifi_delete_driver_threads))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wifi_delete_driver_threads &rArr; os_destroy_workqueue &rArr; sys_task_delete &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
</UL>

<P><STRONG><a name="[119]"></a>wifi_disconnect_req_entry</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, wlan_intf.o(i.wifi_disconnect_req_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = wifi_disconnect_req_entry &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>wifi_dump_driver_threads</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wlan_task.o(i.wifi_dump_driver_threads))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_dump_driver_threads &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>wifi_get_bss_rssi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_bss_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_get_bss_rssi &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>wifi_get_bw</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_get_bw &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>wifi_get_driver_revision</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_driver_revision))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_get_driver_revision &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>wifi_get_mac_addr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_get_mac_addr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>wifi_get_ps</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_get_ps &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>wifi_get_scan_list_entry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_get_scan_list_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_get_scan_list_entry &rArr; ioctl_get_scan_list &rArr; translate_scan_result &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_get_scan_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[798]"></a>wifi_hal_ops_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_ops.o(i.wifi_hal_ops_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[797]"></a>wifi_hci_ops_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, soc_ops.o(i.wifi_hci_ops_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[570]"></a>wifi_indicate_connect</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, wlan_intf.o(i.wifi_indicate_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wifi_indicate_connect &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_indicate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_failed_proc
</UL>

<P><STRONG><a name="[6fe]"></a>wifi_indicate_disconnect</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, wlan_intf.o(i.wifi_indicate_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_security
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
</UL>

<P><STRONG><a name="[796]"></a>wifi_indicate_intf_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wlan_intf.o(i.wifi_indicate_intf_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[700]"></a>wifi_indicate_scan_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wlan_intf.o(i.wifi_indicate_scan_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wifi_indicate_scan_complete &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_scan_entry
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
</UL>

<P><STRONG><a name="[114]"></a>wifi_open</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, wlan_intf.o(i.wifi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = wifi_open &rArr; wlan_sw_init &rArr; wlan_drv_struct_init &rArr; wlan_init_mlme_struct &rArr; wlan_init_mlme_timer &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>wifi_priv_req_entry</STRONG> (Thumb, 2214 bytes, Stack size 48 bytes, wlan_intf.o(i.wifi_priv_req_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = wifi_priv_req_entry &rArr; wifi_test_xmit_entry &rArr; wifi_test_xmit_uc_encrypted &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_channel_set
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_enable
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_disable
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_plan_proc
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[5fa]"></a>wifi_rate_to_rate_index</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wlan_utility.o(i.wifi_rate_to_rate_index))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_max_rate_index
</UL>

<P><STRONG><a name="[705]"></a>wifi_recv_indicate_eapol</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wlan_rx.o(i.wifi_recv_indicate_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
</UL>

<P><STRONG><a name="[6d5]"></a>wifi_recv_indicate_pkt</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wlan_rx.o(i.wifi_recv_indicate_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3160<LI>Call Chain = wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_promisc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_indicate_pkts
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
</UL>

<P><STRONG><a name="[706]"></a>wifi_recv_indicate_promisc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wlan_rx.o(i.wifi_recv_indicate_promisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_recv_indicate_promisc &rArr; soc_merge_multi_skb &rArr; soc_free_recv_pkt &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
</UL>

<P><STRONG><a name="[707]"></a>wifi_recv_indicate_tcpip</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, net_intf.o(i.wifi_recv_indicate_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wifi_recv_indicate_tcpip &rArr; wlan_relay_xmit_entry &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
</UL>

<P><STRONG><a name="[3be]"></a>wifi_register_ethernetif</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_intf.o(i.wifi_register_ethernetif))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_register_ethernetif &rArr; ethernetif_register_wifi &rArr; sys_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_register_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[12c]"></a>wifi_set_bw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_set_bw &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>wifi_set_channel_mask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wlan_intf.o(i.wifi_set_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_set_channel_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[4f3]"></a>wifi_set_dump_sram_base</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soc_intf.o(i.wifi_set_dump_sram_base))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
</UL>

<P><STRONG><a name="[11e]"></a>wifi_set_idle_ps_delay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_idle_ps_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_set_idle_ps_delay &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>wifi_set_ipaddr_entry</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wlan_intf.o(i.wifi_set_ipaddr_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_set_ipaddr_entry &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>wifi_set_mac_addr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wlan_intf.o(i.wifi_set_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wifi_set_mac_addr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[4f4]"></a>wifi_set_nvic_base</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soc_intf.o(i.wifi_set_nvic_base))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
</UL>

<P><STRONG><a name="[4f5]"></a>wifi_set_param</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wlan_init_deinit.o(i.wifi_set_param))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
</UL>

<P><STRONG><a name="[128]"></a>wifi_set_promisc_filter</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_promisc_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_set_promisc_filter &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>wifi_set_promisc_mode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_promisc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_set_promisc_mode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>wifi_set_ps</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = wifi_set_ps &rArr; wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>wifi_set_ps_interval</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_ps_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wifi_set_ps_interval &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[4f2]"></a>wifi_set_reg_base</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soc_intf.o(i.wifi_set_reg_base))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_setting_config
</UL>

<P><STRONG><a name="[116]"></a>wifi_set_scan_entry</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, wlan_intf.o(i.wifi_set_scan_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wifi_set_scan_entry &rArr; wlan_scan_start &rArr; wlan_free_scanned_queue &rArr; wlan_free_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_scan_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>wifi_set_task_priority</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wlan_task.o(i.wifi_set_task_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_set_task_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>wifi_softap_entry</STRONG> (Thumb, 412 bytes, Stack size 240 bytes, wlan_intf.o(i.wifi_softap_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = wifi_softap_entry &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start_create_bss
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_generate_bss_ie
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_indicate
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_auth_entry
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wep_enc
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_security_info
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cfg_bss
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_softap_setting
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>wifi_softap_get_assoc_info</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wlan_intf.o(i.wifi_softap_get_assoc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wifi_softap_get_assoc_info &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>wifi_xmit_entry</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, net_intf.o(i.wifi_xmit_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wifi_xmit_entry &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_ready
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf_count
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dump_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_intf.o(i.wifi_register_ethernetif)
</UL>
<P><STRONG><a name="[13c]"></a>wlan_action_ba_recved</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_action_ba_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wlan_action_ba_recved &rArr; wlan_send_action_ba &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_addba_req
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>wlan_action_dls_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.wlan_action_dls_recved))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>wlan_action_ht_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.wlan_action_ht_recved))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>wlan_action_public_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.wlan_action_public_recved))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>wlan_action_qos_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.wlan_action_qos_recved))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>wlan_action_recved</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wlan_mgmt_engine.o(i.wlan_action_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_action_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>wlan_action_sa_query_recved</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, wlan_mgmt_engine.o(i.wlan_action_sa_query_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = wlan_action_sa_query_recved &rArr; wlan_send_action_sa_query &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>wlan_action_wmm_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.wlan_action_wmm_recved))
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>wlan_add_ba_callback</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, wlan_work_cb.o(i.wlan_add_ba_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wlan_add_ba_callback &rArr; wlan_send_action_ba &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_proc.o(i.wlan_add_ba_req)
</UL>
<P><STRONG><a name="[652]"></a>wlan_add_ba_proc</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wlan_mgmt_proc.o(i.wlan_add_ba_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_add_ba_proc &rArr; wlan_add_ba_req &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connected_bss_cfg
</UL>

<P><STRONG><a name="[718]"></a>wlan_add_ba_req</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_add_ba_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wlan_add_ba_req &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_work
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
</UL>

<P><STRONG><a name="[71a]"></a>wlan_add_scanned_network</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_add_scanned_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wlan_add_scanned_network &rArr; wlan_update_scanned_queue &rArr; wlan_alloc_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_cur_network
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event_callback
</UL>

<P><STRONG><a name="[10e]"></a>wlan_addba_timer_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wlan_mgmt_proc.o(i.wlan_addba_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> wlan_sta_info.o(i.wlan_init_sta_info)
</UL>
<P><STRONG><a name="[71d]"></a>wlan_alloc_and_init_mgmtframe</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wlan_mgmt_engine.o(i.wlan_alloc_and_init_mgmtframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_mgmtframe_attrib
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_rsp
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>

<P><STRONG><a name="[713]"></a>wlan_alloc_bcmc_stainfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wlan_sta_info.o(i.wlan_alloc_bcmc_stainfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wlan_alloc_bcmc_stainfo &rArr; wlan_alloc_stainfo &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[71e]"></a>wlan_alloc_mgmtframe</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wlan_mgmt_engine.o(i.wlan_alloc_mgmtframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>

<P><STRONG><a name="[720]"></a>wlan_alloc_network</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_alloc_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_alloc_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_scanned_queue
</UL>

<P><STRONG><a name="[574]"></a>wlan_alloc_stainfo</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, wlan_sta_info.o(i.wlan_alloc_stainfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_alloc_stainfo &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_insert_aid
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mac_hash
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_bcmc_stainfo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[139]"></a>wlan_ap_auth_recved</STRONG> (Thumb, 928 bytes, Stack size 80 bytes, wlan_mgmt_engine.o(i.wlan_ap_auth_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = wlan_ap_auth_recved &rArr; wlan_send_auth &rArr; wlan_wep_encrypt &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_decrypt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_da
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>wlan_assoc_req_recved</STRONG> (Thumb, 1800 bytes, Stack size 112 bytes, wlan_mgmt_engine.o(i.wlan_assoc_req_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = wlan_assoc_req_recved &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_ie
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_ie
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_matched_rate
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_basic_rate
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>wlan_assoc_rsp_recved</STRONG> (Thumb, 542 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_assoc_rsp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = wlan_assoc_rsp_recved &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmm_param_handler
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pmksa_cache
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_get_state
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_vendor
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_ap_manufacturer
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_operation_handler
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_caps_handler
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_caps_handler
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erp_ie_handler
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_da
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[731]"></a>wlan_assoc_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wlan_connect.o(i.wlan_assoc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wlan_assoc_start &rArr; wlan_send_assoc_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
</UL>

<P><STRONG><a name="[733]"></a>wlan_auth_start</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, wlan_connect.o(i.wlan_auth_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = wlan_auth_start &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
</UL>

<P><STRONG><a name="[132]"></a>wlan_beacon_recved</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, wlan_mgmt_engine.o(i.wlan_beacon_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = wlan_beacon_recved &rArr; wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_beacon_info
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tsf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ap_vendor
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bss_rssi_dbm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[739]"></a>wlan_cancel_all_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wlan_init_deinit.o(i.wlan_cancel_all_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_cancel_all_timer &rArr; os_cancel_timer_ex &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dev_close
</UL>

<P><STRONG><a name="[f9]"></a>wlan_check_hiq_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_work_cb.o(i.wlan_check_hiq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_check_hiq_callback &rArr; os_set_timer &rArr; sys_timer_start_ext &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[73b]"></a>wlan_check_pn</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, wlan_rx.o(i.wlan_check_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_check_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
</UL>

<P><STRONG><a name="[57d]"></a>wlan_connect_indicate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wlan_mgmt_proc.o(i.wlan_connect_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_connect_indicate &rArr; ioctl_set_wep_enc &rArr; wlan_set_80211_add_wep &rArr; wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wep_enc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[730]"></a>wlan_connect_result_proc</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, wlan_connect.o(i.wlan_connect_result_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_failed_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event_callback
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
</UL>

<P><STRONG><a name="[73c]"></a>wlan_connect_start</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wlan_connect.o(i.wlan_connect_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = wlan_connect_start &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_ssid
</UL>

<P><STRONG><a name="[73d]"></a>wlan_connect_to_bss</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, wlan_connect.o(i.wlan_connect_to_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wlan_connect_to_bss &rArr; wlan_join_start &rArr; wlan_send_probe_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desired_network
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event_callback
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
</UL>

<P><STRONG><a name="[711]"></a>wlan_construct_frame_pkt</STRONG> (Thumb, 746 bytes, Stack size 56 bytes, wlan_tx.o(i.wlan_construct_frame_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_construct_frame_pkt &rArr; wlan_make_wlanhdr &rArr; wlan_search_bcmc_sta &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_make_wlanhdr
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
</UL>

<P><STRONG><a name="[75d]"></a>wlan_construct_ht_ie</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, wlan_ie_proc.o(i.wlan_construct_ht_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_construct_ht_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_generate_bss_ie
</UL>

<P><STRONG><a name="[75e]"></a>wlan_construct_wmm_ie</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wlan_ie_proc.o(i.wlan_construct_wmm_ie))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_generate_bss_ie
</UL>

<P><STRONG><a name="[6da]"></a>wlan_count_tx_stats</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wlan_tx.o(i.wlan_count_tx_stats))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[135]"></a>wlan_deauth_recved</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_deauth_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312<LI>Call Chain = wlan_deauth_recved &rArr; wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[740]"></a>wlan_del_mlme_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wlan_mgmt_proc.o(i.wlan_del_mlme_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_del_mlme_timer &rArr; os_del_timer &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
</UL>

<P><STRONG><a name="[741]"></a>wlan_dequeue_frame</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_dequeue_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_dequeue_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_bcmc_frame
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
</UL>

<P><STRONG><a name="[6f3]"></a>wlan_dev_close</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wlan_init_deinit.o(i.wlan_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wlan_dev_close &rArr; wlan_cancel_all_timer &rArr; os_cancel_timer_ex &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close
</UL>

<P><STRONG><a name="[702]"></a>wlan_dev_open</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wlan_init_deinit.o(i.wlan_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_dev_open &rArr; set_channel_bwmode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
</UL>

<P><STRONG><a name="[6fc]"></a>wlan_disassoc_proc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wlan_mgmt_proc.o(i.wlan_disassoc_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wlan_disassoc_proc &rArr; wlan_send_deauth &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect_req_entry
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>

<P><STRONG><a name="[133]"></a>wlan_disassoc_recved</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_disassoc_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312<LI>Call Chain = wlan_disassoc_recved &rArr; wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[6fd]"></a>wlan_disconnect_indicate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_disconnect_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect_req_entry
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
</UL>

<P><STRONG><a name="[745]"></a>wlan_drv_struct_deinit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wlan_init_deinit.o(i.wlan_drv_struct_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = wlan_drv_struct_deinit &rArr; wlan_free_assoc_resources &rArr; wlan_release_all_assoc_stainfo &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmit_struct
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_skb_priv
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_recv_struct
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_pwrctrl_struct
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
</UL>

<P><STRONG><a name="[74c]"></a>wlan_drv_struct_init</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, wlan_init_deinit.o(i.wlan_drv_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wlan_drv_struct_init &rArr; wlan_init_mlme_struct &rArr; wlan_init_mlme_timer &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_xmit_struct
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_skb_priv
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_security_struct
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_recv_struct
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_pwrctrl_struct
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmit_struct
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_sta_struct
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_skb_priv
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_recv_struct
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlme_struct
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_bcmc_stainfo
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_init
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[621]"></a>wlan_dump_packet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wlan_utility.o(i.wlan_dump_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_dump_packet &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_psd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_rx_desc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
</UL>

<P><STRONG><a name="[f4]"></a>wlan_dyn_chk_callback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wlan_work_cb.o(i.wlan_dyn_chk_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wlan_dyn_chk_callback &rArr; wlan_dynamic_check &rArr; softap_assoc_expire &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dynamic_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[10d]"></a>wlan_dyn_chk_timer_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wlan_dyn_chk.o(i.wlan_dyn_chk_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_dyn_chk_timer_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
</UL>
<P><STRONG><a name="[755]"></a>wlan_dynamic_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wlan_dyn_chk.o(i.wlan_dynamic_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wlan_dynamic_check &rArr; softap_assoc_expire &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_status_check
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_auth_expire
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_assoc_expire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dyn_chk_callback
</UL>

<P><STRONG><a name="[757]"></a>wlan_enqueue_frame</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_enqueue_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_enqueue_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
</UL>

<P><STRONG><a name="[112]"></a>wlan_event_callback</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wlan_work_cb.o(i.wlan_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_event_callback &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_scan.o(i.wlan_scan_done_event)
</UL>
<P><STRONG><a name="[573]"></a>wlan_find_network</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wlan_mgmt_proc.o(i.wlan_find_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_find_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[6f5]"></a>wlan_find_network_by_ssid</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wlan_mgmt_proc.o(i.wlan_find_network_by_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_find_network_by_ssid &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[6f7]"></a>wlan_free_assoc_resources</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wlan_mgmt_proc.o(i.wlan_free_assoc_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wlan_free_assoc_resources &rArr; wlan_release_all_assoc_stainfo &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_all_assoc_stainfo
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect_req_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>

<P><STRONG><a name="[748]"></a>wlan_free_mlme_struct</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wlan_mgmt_proc.o(i.wlan_free_mlme_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_free_mlme_struct &rArr; wlan_del_mlme_timer &rArr; os_del_timer &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_mlme_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[759]"></a>wlan_free_network</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_free_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_free_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_scanned_queue
</UL>

<P><STRONG><a name="[746]"></a>wlan_free_pwrctrl_struct</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wlan_power_save.o(i.wlan_free_pwrctrl_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_free_pwrctrl_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[74b]"></a>wlan_free_recv_struct</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wlan_rx.o(i.wlan_free_recv_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_free_recv_struct &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[75a]"></a>wlan_free_scanned_queue</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, wlan_mgmt_proc.o(i.wlan_free_scanned_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wlan_free_scanned_queue &rArr; wlan_free_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_network
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_start
</UL>

<P><STRONG><a name="[747]"></a>wlan_free_skb_priv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wlan_skb.o(i.wlan_free_skb_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_free_skb_priv &rArr; free_skb &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_skb
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_short_skb
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[74a]"></a>wlan_free_sta_struct</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wlan_sta_info.o(i.wlan_free_sta_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_free_sta_struct &rArr; os_del_timer &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_del_timer
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[749]"></a>wlan_free_xmit_struct</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wlan_tx.o(i.wlan_free_xmit_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_free_xmit_struct &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_deinit_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>

<P><STRONG><a name="[75b]"></a>wlan_free_xmitframe_queue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_free_xmitframe_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
</UL>

<P><STRONG><a name="[70a]"></a>wlan_generate_bss_ie</STRONG> (Thumb, 410 bytes, Stack size 72 bytes, wlan_ie_proc.o(i.wlan_generate_bss_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_generate_bss_ie &rArr; wlan_construct_ht_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_map_to_rate_set
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_wmm_ie
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_ht_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
</UL>

<P><STRONG><a name="[7a0]"></a>wlan_get_bcmc_freeidx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wlan_softap.o(i.wlan_get_bcmc_freeidx))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
</UL>

<P><STRONG><a name="[567]"></a>wlan_get_capability</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wlan_utility.o(i.wlan_get_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_get_capability
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ap_in_tkip
</UL>

<P><STRONG><a name="[62e]"></a>wlan_get_center_ch</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, wlan_utility.o(i.wlan_get_center_ch))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>

<P><STRONG><a name="[5f3]"></a>wlan_get_cipher_e</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan_utility.o(i.wlan_get_cipher_e))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_scan_result
</UL>

<P><STRONG><a name="[6cb]"></a>wlan_get_enc_algo_e</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wlan_utility.o(i.wlan_get_enc_algo_e))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_cipher
</UL>

<P><STRONG><a name="[560]"></a>wlan_get_encrypt_info</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, wlan_ie_proc.o(i.wlan_get_encrypt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlan_get_encrypt_info &rArr; wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_wpa_ie
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_rsn_ie
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_ie
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
</UL>

<P><STRONG><a name="[55f]"></a>wlan_get_ie</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wlan_ie_proc.o(i.wlan_get_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restruct_ht_cap
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_ie
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_ie
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_ht_cap
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_req_recved
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_collect_info
</UL>

<P><STRONG><a name="[53d]"></a>wlan_get_pktbuf</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, wlan_skb.o(i.wlan_get_pktbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_get_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[715]"></a>wlan_get_pktbuf_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_skb.o(i.wlan_get_pktbuf_count))
<BR><BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[761]"></a>wlan_get_recvframe</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wlan_rx.o(i.wlan_get_recvframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_get_recvframe
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[729]"></a>wlan_get_rsn_ie</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_ie_proc.o(i.wlan_get_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_get_rsn_ie &rArr; wlan_get_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[764]"></a>wlan_get_short_pktbuf</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, wlan_skb.o(i.wlan_get_short_pktbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_get_short_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[5f2]"></a>wlan_get_wifi_network_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wlan_utility.o(i.wlan_get_wifi_network_mode))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_connect_info
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_scan_result
</UL>

<P><STRONG><a name="[728]"></a>wlan_get_wpa_ie</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, wlan_ie_proc.o(i.wlan_get_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = wlan_get_wpa_ie &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[65f]"></a>wlan_get_wps_ie</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wlan_ie_proc.o(i.wlan_get_wps_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wlan_get_wps_ie &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desired_network
</UL>

<P><STRONG><a name="[71f]"></a>wlan_get_xmitbuf</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_get_xmitbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_get_xmitbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mgmtframe
</UL>

<P><STRONG><a name="[67c]"></a>wlan_get_xmitframe</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_get_xmitframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_get_xmitframe &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_xmitframe
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mgmtframe
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[111]"></a>wlan_hiq_check_timer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wlan_softap.o(i.wlan_hiq_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_hiq_check_timer &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_sta_info.o(i.wlan_init_sta_struct)
</UL>
<P><STRONG><a name="[618]"></a>wlan_init_channel_set</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, wlan_mgmt_proc.o(i.wlan_init_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_init_channel_set &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
</UL>

<P><STRONG><a name="[74d]"></a>wlan_init_mac_addr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, wlan_init_deinit.o(i.wlan_init_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_init_mac_addr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[76a]"></a>wlan_init_mgmtframe_header</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_init_mgmtframe_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_rsp
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>

<P><STRONG><a name="[74e]"></a>wlan_init_mlme_struct</STRONG> (Thumb, 656 bytes, Stack size 56 bytes, wlan_mgmt_proc.o(i.wlan_init_mlme_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = wlan_init_mlme_struct &rArr; wlan_init_mlme_timer &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[76c]"></a>wlan_init_mlme_timer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wlan_mgmt_proc.o(i.wlan_init_mlme_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = wlan_init_mlme_timer &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mlme_struct
</UL>

<P><STRONG><a name="[754]"></a>wlan_init_pwrctrl_struct</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wlan_power_save.o(i.wlan_init_pwrctrl_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_init_pwrctrl_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[750]"></a>wlan_init_recv_struct</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wlan_rx.o(i.wlan_init_recv_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlan_init_recv_struct &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[753]"></a>wlan_init_security_struct</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wlan_security.o(i.wlan_init_security_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_init_security_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[751]"></a>wlan_init_skb_priv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wlan_skb.o(i.wlan_init_skb_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_init_skb_priv &rArr; alloc_short_skb &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_skb
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_short_skb
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[752]"></a>wlan_init_sta_struct</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, wlan_sta_info.o(i.wlan_init_sta_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wlan_init_sta_struct &rArr; wlan_init_sta_info &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_info
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[74f]"></a>wlan_init_xmit_struct</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, wlan_tx.o(i.wlan_init_xmit_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_init_xmit_struct &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
</UL>

<P><STRONG><a name="[76e]"></a>wlan_interrupt_bcnearly_handler</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, soc_isr.o(i.wlan_interrupt_bcnearly_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_interrupt_bcnearly_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
</UL>

<P><STRONG><a name="[2c9]"></a>wlan_interrupt_others_handler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, soc_isr.o(i.wlan_interrupt_others_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wlan_interrupt_others_handler &rArr; wlan_interrupt_bcnearly_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_others_isr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLAN_Cmn_IRQHandler
</UL>

<P><STRONG><a name="[2ca]"></a>wlan_interrupt_tx_handler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, soc_isr.o(i.wlan_interrupt_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_interrupt_tx_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_msg_num
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLAN_Tx_IRQHandler
</UL>

<P><STRONG><a name="[735]"></a>wlan_join_bss</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, wlan_connect.o(i.wlan_join_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = wlan_join_bss &rArr; wlan_auth_start &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_capability
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_collect_info
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_rsp_recved
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[73e]"></a>wlan_join_start</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, wlan_connect.o(i.wlan_join_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wlan_join_start &rArr; wlan_send_probe_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_active_scan_channel
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>

<P><STRONG><a name="[716]"></a>wlan_link_ready</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan_utility.o(i.wlan_link_ready))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
</UL>

<P><STRONG><a name="[774]"></a>wlan_link_retry</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, wlan_connect.o(i.wlan_link_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = wlan_link_retry &rArr; wlan_sae_retransmission &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_active_scan_channel
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_retransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry_callback
</UL>

<P><STRONG><a name="[f3]"></a>wlan_link_retry_callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wlan_work_cb.o(i.wlan_link_retry_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = wlan_link_retry_callback &rArr; wlan_link_retry &rArr; wlan_sae_retransmission &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[756]"></a>wlan_link_status_check</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, wlan_dyn_chk.o(i.wlan_link_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wlan_link_status_check &rArr; wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dynamic_check
</UL>

<P><STRONG><a name="[632]"></a>wlan_lps_process</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wlan_power_save.o(i.wlan_lps_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_lps_process &rArr; wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
</UL>

<P><STRONG><a name="[73f]"></a>wlan_make_wlanhdr</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, wlan_tx.o(i.wlan_make_wlanhdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wlan_make_wlanhdr &rArr; wlan_search_bcmc_sta &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
</UL>

<P><STRONG><a name="[743]"></a>wlan_mgmt_dispatcher</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, wlan_mgmt_engine.o(i.wlan_mgmt_dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_mgmt_dispatcher &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_pn
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
</UL>

<P><STRONG><a name="[795]"></a>wlan_param_config</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, wlan_init_deinit.o(i.wlan_param_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_param_config
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[760]"></a>wlan_parse_rsn_ie</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, wlan_ie_proc.o(i.wlan_parse_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_parse_rsn_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_cipher
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rsn_akm_suite
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
</UL>

<P><STRONG><a name="[75f]"></a>wlan_parse_wpa_ie</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, wlan_ie_proc.o(i.wlan_parse_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wpa_cipher
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
</UL>

<P><STRONG><a name="[776]"></a>wlan_pkt_can_xmit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wlan_softap.o(i.wlan_pkt_can_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_pkt_can_xmit
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
</UL>

<P><STRONG><a name="[138]"></a>wlan_probe_req_recved</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, wlan_mgmt_engine.o(i.wlan_probe_req_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wlan_probe_req_recved &rArr; wlan_send_probe_rsp &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>wlan_probe_rsp_recved</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, wlan_mgmt_engine.o(i.wlan_probe_rsp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = wlan_probe_rsp_recved &rArr; wlan_join_bss &rArr; wlan_auth_start &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_result_event
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[563]"></a>wlan_proc_sta_pwrbit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wlan_softap.o(i.wlan_proc_sta_pwrbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wlan_proc_sta_pwrbit &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
</UL>

<P><STRONG><a name="[fa]"></a>wlan_ps_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_work_cb.o(i.wlan_ps_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wlan_ps_callback &rArr; ps_mgmt_state_machine &rArr; mc_uc_match_process &rArr; config_mac_and_bb &rArr; hal_set_power_table &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mgmt_state_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[76f]"></a>wlan_ps_others_isr</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, int_hdl.o(i.wlan_ps_others_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wlan_ps_others_isr &rArr; sw_timer_run &rArr; sw_timer_func &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_waked_wait
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_lpds_on_clear
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_run
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
</UL>

<P><STRONG><a name="[77f]"></a>wlan_ps_rx_isr</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, int_hdl.o(i.wlan_ps_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_ps_rx_isr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_rx_handler (via Veneer)
</UL>

<P><STRONG><a name="[2cb]"></a>wlan_ps_wakeup_isr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, int_hdl.o(i.wlan_ps_wakeup_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wlan_ps_wakeup_isr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLAN_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[744]"></a>wlan_pspoll_recved</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, wlan_softap.o(i.wlan_pspoll_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_pspoll_recved &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_more_data
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_tim_bit
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_sleep
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
</UL>

<P><STRONG><a name="[782]"></a>wlan_queue_frame_num</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_queue_frame_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_queue_frame_num
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
</UL>

<P><STRONG><a name="[f7]"></a>wlan_rate_adaptive_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wlan_work_cb.o(i.wlan_rate_adaptive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wlan_rate_adaptive_callback &rArr; ra_func &rArr; ra_process &rArr; ra_try_up_done &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[622]"></a>wlan_read16</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wlan_io_ops.o(i.wlan_read16))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_read16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_cca_score
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[5c5]"></a>wlan_read32</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wlan_io_ops.o(i.wlan_read32))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_read32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_network_mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_filter
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_reg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_bb_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_update_ctrtbl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_set_ctlf_fback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_rx_desc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_hiq_empty
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dump_adc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_config_beacon
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_tx_desc_polling
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_node_cache_entry
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_mac_rx_bus
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_phy_dig_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_xmit_complete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[5ca]"></a>wlan_read8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wlan_io_ops.o(i.wlan_read8))
<BR><BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_power
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_promisc_mode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bssid_check
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_band
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_reporttbl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_tx_power
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dump_adc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wait_rx_buf_empty
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[605]"></a>wlan_receive_disconnect</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, wlan_mgmt_proc.o(i.wlan_receive_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sa_query_callback
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_ap_alive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_recved
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_deauth_recved
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[ef]"></a>wlan_recv_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_work_cb.o(i.wlan_recv_callback))
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[6d6]"></a>wlan_recv_entry</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, wlan_rx.o(i.wlan_recv_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = wlan_recv_entry &rArr; wlan_indicate_pkts &rArr; wlan_handle_amsdu &rArr; wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_port_ctrl
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_indicate_pkts
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
</UL>

<P><STRONG><a name="[709]"></a>wlan_relay_xmit_entry</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, wlan_softap.o(i.wlan_relay_xmit_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wlan_relay_xmit_entry &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_ready
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
</UL>

<P><STRONG><a name="[758]"></a>wlan_release_all_assoc_stainfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wlan_sta_info.o(i.wlan_release_all_assoc_stainfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = wlan_release_all_assoc_stainfo &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
</UL>

<P><STRONG><a name="[53f]"></a>wlan_release_pktbuf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wlan_skb.o(i.wlan_release_pktbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_xmit_complete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_pkt
</UL>

<P><STRONG><a name="[6d3]"></a>wlan_release_recvframe</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wlan_rx.o(i.wlan_release_recvframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_release_recvframe
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[6ce]"></a>wlan_release_short_pktbuf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wlan_skb.o(i.wlan_release_short_pktbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_release_short_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_merge_multi_skb
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_pkt
</UL>

<P><STRONG><a name="[64a]"></a>wlan_release_stainfo</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, wlan_sta_info.o(i.wlan_release_stainfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_delete_aid
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_stainfo
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_del_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_all_assoc_stainfo
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_auth_expire
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_assoc_expire
</UL>

<P><STRONG><a name="[6db]"></a>wlan_release_xmitbuf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_release_xmitbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_release_xmitbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_xmit_complete
</UL>

<P><STRONG><a name="[70f]"></a>wlan_release_xmitframe</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wlan_tx.o(i.wlan_release_xmitframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_xmitframe
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmitframe_queue
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mgmtframe
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
</UL>

<P><STRONG><a name="[571]"></a>wlan_reset_security</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wlan_mgmt_proc.o(i.wlan_reset_security))
<BR><BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_disconnect
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_failed_proc
</UL>

<P><STRONG><a name="[784]"></a>wlan_reset_stainfo</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, wlan_sta_info.o(i.wlan_reset_stainfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_xmitframe_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
</UL>

<P><STRONG><a name="[772]"></a>wlan_restruct_ht_cap</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, wlan_ie_proc.o(i.wlan_restruct_ht_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_restruct_ht_cap &rArr; wlan_set_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_collect_info
</UL>

<P><STRONG><a name="[771]"></a>wlan_restruct_wmm_ie</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wlan_ie_proc.o(i.wlan_restruct_wmm_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wlan_restruct_wmm_ie &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_collect_info
</UL>

<P><STRONG><a name="[f8]"></a>wlan_sa_query_callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wlan_work_cb.o(i.wlan_sa_query_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = wlan_sa_query_callback &rArr; wlan_receive_disconnect &rArr; wlan_disconnect_indicate &rArr; wifi_indicate_disconnect &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[10f]"></a>wlan_sa_query_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wlan_mgmt_proc.o(i.wlan_sa_query_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_sa_query_timer_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_sta_info.o(i.wlan_init_sta_info)
</UL>
<P><STRONG><a name="[785]"></a>wlan_sae_commit_recved</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, wlan_mgmt_engine.o(i.wlan_sae_commit_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = wlan_sae_commit_recved &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_state
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_get_state
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_commit_recved
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
</UL>

<P><STRONG><a name="[789]"></a>wlan_sae_confirm_recved</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, wlan_mgmt_engine.o(i.wlan_sae_confirm_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = wlan_sae_confirm_recved &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_start
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_state
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_get_state
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_confirm_recved
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
</UL>

<P><STRONG><a name="[775]"></a>wlan_sae_retransmission</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wlan_mgmt_engine.o(i.wlan_sae_retransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = wlan_sae_retransmission &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_state
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_get_state
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
</UL>

<P><STRONG><a name="[f1]"></a>wlan_scan_callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wlan_work_cb.o(i.wlan_scan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = wlan_scan_callback &rArr; wlan_scan_process &rArr; wlan_send_probe_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[78b]"></a>wlan_scan_complete</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wlan_scan.o(i.wlan_scan_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_scan_complete &rArr; wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_scan_complete
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_timeout_callback
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
</UL>

<P><STRONG><a name="[78c]"></a>wlan_scan_done_event</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, wlan_scan.o(i.wlan_scan_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_scan_done_event &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_work
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
</UL>

<P><STRONG><a name="[1c1]"></a>wlan_scan_done_event_callback</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wlan_event_cb.o(i.wlan_scan_done_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = wlan_scan_done_event_callback &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_event_cb.o(.constdata)
</UL>
<P><STRONG><a name="[78a]"></a>wlan_scan_process</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, wlan_scan.o(i.wlan_scan_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_scan_process &rArr; wlan_send_probe_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_stop_lps_safe
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_callback
</UL>

<P><STRONG><a name="[736]"></a>wlan_scan_result_event</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wlan_scan.o(i.wlan_scan_result_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_scan_result_event &rArr; collect_bss_info &rArr; wlan_get_encrypt_info &rArr; wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_bss_info
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_rsp_recved
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[1c0]"></a>wlan_scan_result_event_callback</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, wlan_event_cb.o(i.wlan_scan_result_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlan_scan_result_event_callback &rArr; wlan_add_scanned_network &rArr; wlan_update_scanned_queue &rArr; wlan_alloc_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_scanned_network
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_event_cb.o(.constdata)
</UL>
<P><STRONG><a name="[6f6]"></a>wlan_scan_start</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, wlan_scan.o(i.wlan_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wlan_scan_start &rArr; wlan_free_scanned_queue &rArr; wlan_free_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_scanned_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_scan_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
</UL>

<P><STRONG><a name="[f2]"></a>wlan_scan_timeout_callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wlan_work_cb.o(i.wlan_scan_timeout_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_scan_timeout_callback &rArr; wlan_scan_complete &rArr; wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[10c]"></a>wlan_scan_timeout_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wlan_scan.o(i.wlan_scan_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wlan_scan_timeout_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
</UL>
<P><STRONG><a name="[10a]"></a>wlan_scan_timer_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wlan_scan.o(i.wlan_scan_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_scan_timer_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_proc.o(i.wlan_init_mlme_timer)
</UL>
<P><STRONG><a name="[65b]"></a>wlan_search_bcmc_sta</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wlan_sta_info.o(i.wlan_search_bcmc_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_search_bcmc_sta &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_make_wlanhdr
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_all_assoc_stainfo
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_ht_cap
</UL>

<P><STRONG><a name="[562]"></a>wlan_search_sta</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, wlan_sta_info.o(i.wlan_search_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mac_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_del_key
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_pairwise_key
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_make_wlanhdr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_port_ctrl
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_callback
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bwmode
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_ht_cap
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_receive_disconnect
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_addba_req
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_rsp_recved
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_req_recved
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_sa_query_recved
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sa_query
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_pkt_attrib
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_status_check
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[717]"></a>wlan_send_action_ba</STRONG> (Thumb, 554 bytes, Stack size 88 bytes, wlan_mgmt_engine.o(i.wlan_send_action_ba))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wlan_send_action_ba &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_cpu16
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_callback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_ba_recved
</UL>

<P><STRONG><a name="[6eb]"></a>wlan_send_action_sa_query</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_send_action_sa_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_send_action_sa_query &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sa_query_callback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_action_sa_query_recved
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sa_query
</UL>

<P><STRONG><a name="[732]"></a>wlan_send_assoc_req</STRONG> (Thumb, 782 bytes, Stack size 112 bytes, wlan_mgmt_engine.o(i.wlan_send_assoc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wlan_send_assoc_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_map_to_rate_set
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ap_in_tkip
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_set
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_cpu16
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_start
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
</UL>

<P><STRONG><a name="[649]"></a>wlan_send_assoc_rsp</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, wlan_mgmt_engine.o(i.wlan_send_assoc_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_send_assoc_rsp &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_cpu16
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[726]"></a>wlan_send_auth</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_send_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = wlan_send_auth &rArr; wlan_wep_encrypt &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_encrypt
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
</UL>

<P><STRONG><a name="[767]"></a>wlan_send_beacon</STRONG> (Thumb, 670 bytes, Stack size 104 bytes, wlan_mgmt_engine.o(i.wlan_send_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_map_to_rate_set
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_start_create_bss
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_hiq_check_timer
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
</UL>

<P><STRONG><a name="[564]"></a>wlan_send_deauth</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_send_deauth))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_send_deauth &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_cpu16
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_assoc_expire
</UL>

<P><STRONG><a name="[64d]"></a>wlan_send_disassoc</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, wlan_mgmt_engine.o(i.wlan_send_disassoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_send_disassoc &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_read_cpu16
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
</UL>

<P><STRONG><a name="[78e]"></a>wlan_send_mgmtframe</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wlan_mgmt_engine.o(i.wlan_send_mgmtframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_send_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_data
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_rsp
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>

<P><STRONG><a name="[703]"></a>wlan_send_null_data</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, wlan_mgmt_engine.o(i.wlan_send_null_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_send_null_data &rArr; wlan_alloc_and_init_mgmtframe &rArr; wlan_alloc_mgmtframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_ps
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_complete
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_lps_process
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_status_check
</UL>

<P><STRONG><a name="[604]"></a>wlan_send_probe_req</STRONG> (Thumb, 394 bytes, Stack size 104 bytes, wlan_mgmt_engine.o(i.wlan_send_probe_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = wlan_send_probe_req &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_ie
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rate_set
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_ap_alive
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_link_retry
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_start
</UL>

<P><STRONG><a name="[779]"></a>wlan_send_probe_rsp</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wlan_mgmt_engine.o(i.wlan_send_probe_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlan_send_probe_rsp &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_probe_req_recved
</UL>

<P><STRONG><a name="[61a]"></a>wlan_send_queued_frame</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, wlan_tx.o(i.wlan_send_queued_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wlan_send_queued_frame &rArr; wlan_send_bcmc_frame &rArr; wlan_xmit_bcmc_frame &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_bcmc_frame
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_more_data
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pkt_can_xmit
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_reset
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
</UL>

<P><STRONG><a name="[734]"></a>wlan_send_sae_commit</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, wlan_mgmt_engine.o(i.wlan_send_sae_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_set_state
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_commit_data
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_retransmission
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_auth_start
</UL>

<P><STRONG><a name="[787]"></a>wlan_send_sae_confirm</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, wlan_mgmt_engine.o(i.wlan_send_sae_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = wlan_send_sae_confirm &rArr; sae_build_confirm_data &rArr; sae_write_confirm &rArr; sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_fixed_field
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_build_confirm_data
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_mgmtframe
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
</UL>

<P><STRONG><a name="[656]"></a>wlan_set_80211_add_wep</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, wlan_ioctl_proc.o(i.wlan_set_80211_add_wep))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_set_80211_add_wep &rArr; wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wep_enc
</UL>

<P><STRONG><a name="[792]"></a>wlan_set_80211_disassociate</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, wlan_ioctl_proc.o(i.wlan_set_80211_disassociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect_indicate
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_assoc_resources
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>

<P><STRONG><a name="[64f]"></a>wlan_set_80211_network_mode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wlan_ioctl_proc.o(i.wlan_set_80211_network_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_set_80211_network_mode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
</UL>

<P><STRONG><a name="[650]"></a>wlan_set_80211_ssid</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wlan_ioctl_proc.o(i.wlan_set_80211_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = wlan_set_80211_ssid &rArr; wlan_connect_start &rArr; wlan_connect_result_proc &rArr; flush_pmksa_cache &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_validate_ssid
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_start
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_essid
</UL>

<P><STRONG><a name="[6c4]"></a>wlan_set_fixed_field</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wlan_ie_proc.o(i.wlan_set_fixed_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_set_fixed_field
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_confirm
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_sae_commit
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_confirm
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_commit
</UL>

<P><STRONG><a name="[75c]"></a>wlan_set_ie</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wlan_ie_proc.o(i.wlan_set_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_set_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restruct_ht_cap
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_generate_bss_ie
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_probe_req
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
</UL>

<P><STRONG><a name="[65a]"></a>wlan_set_key</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, wlan_mgmt_proc.o(i.wlan_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_add_wep
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
</UL>

<P><STRONG><a name="[780]"></a>wlan_set_more_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wlan_softap.o(i.wlan_set_more_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_set_more_data &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
</UL>

<P><STRONG><a name="[659]"></a>wlan_set_sta_key</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, wlan_mgmt_proc.o(i.wlan_set_sta_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_set_sta_key
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
</UL>

<P><STRONG><a name="[6f1]"></a>wlan_set_support_rate</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wlan_ie_proc.o(i.wlan_set_support_rate))
<BR><BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cfg_bss
</UL>

<P><STRONG><a name="[53e]"></a>wlan_skb_pull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wlan_skb.o(i.wlan_skb_pull))
<BR><BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[134]"></a>wlan_sta_auth_recved</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, wlan_mgmt_engine.o(i.wlan_sta_auth_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = wlan_sta_auth_recved &rArr; wlan_sae_commit_recved &rArr; wlan_send_sae_commit &rArr; sae_build_commit_data &rArr; sae_prepare_commit &rArr; sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_start
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_da
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_mgmt_engine.o(.constdata)
</UL>
<P><STRONG><a name="[77a]"></a>wlan_sta_enter_sleep</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wlan_softap.o(i.wlan_sta_enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_sta_enter_sleep &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_proc_sta_pwrbit
</UL>

<P><STRONG><a name="[77b]"></a>wlan_sta_leave_sleep</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, wlan_softap.o(i.wlan_sta_leave_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_tim_bit
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_sleep
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_proc_sta_pwrbit
</UL>

<P><STRONG><a name="[70b]"></a>wlan_start_create_bss</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, wlan_softap.o(i.wlan_start_create_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = wlan_start_create_bss &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
</UL>

<P><STRONG><a name="[60a]"></a>wlan_stop_lps_safe</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wlan_power_save.o(i.wlan_stop_lps_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_stop_lps_safe &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_proc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_ps
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process
</UL>

<P><STRONG><a name="[6f4]"></a>wlan_sw_deinit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wlan_init_deinit.o(i.wlan_sw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_sw_deinit &rArr; wlan_drv_struct_deinit &rArr; wlan_free_assoc_resources &rArr; wlan_release_all_assoc_stainfo &rArr; wlan_release_stainfo &rArr; wlan_reset_stainfo &rArr; wlan_free_xmitframe_queue &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_free
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_delete_driver_threads
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close
</UL>

<P><STRONG><a name="[701]"></a>wlan_sw_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wlan_init_deinit.o(i.wlan_sw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = wlan_sw_init &rArr; wlan_drv_struct_init &rArr; wlan_init_mlme_struct &rArr; wlan_init_mlme_timer &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_free
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_priv_alloc
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_intf_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_hci_ops_init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_hal_ops_init
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_create_driver_threads
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_param_config
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drv_struct_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_open
</UL>

<P><STRONG><a name="[70e]"></a>wlan_update_attrib</STRONG> (Thumb, 758 bytes, Stack size 72 bytes, wlan_tx.o(i.wlan_update_attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_update_attrib &rArr; set_security_attrib &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_attrib
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_qos_info
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_qos_acm
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_xmitframe
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
</UL>

<P><STRONG><a name="[738]"></a>wlan_update_beacon_info</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, wlan_mgmt_proc.o(i.wlan_update_beacon_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = wlan_update_beacon_info &rArr; check_network_encrypt &rArr; wlan_get_encrypt_info &rArr; wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bwmode
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_network_encrypt
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erp_ie_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[71b]"></a>wlan_update_cur_network</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_update_cur_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = wlan_update_cur_network &rArr; is_same_network &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_scanned_network
</UL>

<P><STRONG><a name="[576]"></a>wlan_update_ht_cap</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wlan_mgmt_proc.o(i.wlan_update_ht_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_update_ht_cap &rArr; wlan_search_bcmc_sta &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_bcmc_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[67d]"></a>wlan_update_mgmtframe_attrib</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wlan_mgmt_engine.o(i.wlan_update_mgmtframe_attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_update_mgmtframe_attrib
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_and_init_mgmtframe
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[575]"></a>wlan_update_protection</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wlan_mgmt_proc.o(i.wlan_update_protection))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[71c]"></a>wlan_update_scanned_queue</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wlan_mgmt_proc.o(i.wlan_update_scanned_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_update_scanned_queue &rArr; wlan_alloc_network &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_network
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_scanned_network
</UL>

<P><STRONG><a name="[79b]"></a>wlan_update_tim_map</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, wlan_softap.o(i.wlan_update_tim_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_frame_num
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_tim_bit
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_sta_sleep
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
</UL>

<P><STRONG><a name="[793]"></a>wlan_validate_ssid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wlan_utility.o(i.wlan_validate_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_validate_ssid &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_ssid
</UL>

<P><STRONG><a name="[725]"></a>wlan_wep_decrypt</STRONG> (Thumb, 248 bytes, Stack size 312 bytes, wlan_security.o(i.wlan_wep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wlan_wep_decrypt &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
</UL>

<P><STRONG><a name="[78f]"></a>wlan_wep_encrypt</STRONG> (Thumb, 380 bytes, Stack size 328 bytes, wlan_security.o(i.wlan_wep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wlan_wep_encrypt &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_auth
</UL>

<P><STRONG><a name="[606]"></a>wlan_write16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wlan_io_ops.o(i.wlan_write16))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_write16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_promisc_filter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_network_mode
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_config_beacon
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_hw_tx
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_queue_and_pages
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[56c]"></a>wlan_write32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wlan_io_ops.o(i.wlan_write32))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_tx_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_others_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_reg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_reg_dword
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_func
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_setting_by_chan_plan
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_wmm_param
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_rts_cts
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_network_mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_filter
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_update_ctrtbl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_set_ctlf_fback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_bb
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_enable_interrupt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dump_adc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disable_interrupt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_continuous_tx_test
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_config_rate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_config_beacon
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_node_cache_entry
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_mac_rx_bus
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_queue_and_pages
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_contention_param
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_phy_dig_reg
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_iq_comp
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_queue
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mac_and_bb
</UL>

<P><STRONG><a name="[5cb]"></a>wlan_write8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wlan_io_ops.o(i.wlan_write8))
<BR><BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_bcnearly_handler
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_reg_byte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_switch_channel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_setting_by_chan_plan
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_power
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_promisc_mode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_promisc_filter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_phy_loopback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_network_mode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bssid_check
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_band
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_set_report_intvl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_reporttbl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_get_cca_score
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ra_control
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_rx_desc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_rf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_mac_addr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_bb
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_hw_halt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_force_tx_power
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dump_adc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_disconnect_handle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dac_tx_test
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_continuous_tx_test
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_config_beacon
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_node_cache_entry
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxsig
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_rxhtsig
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_adc_pattern_match
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_turn_off_rf
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_queue_and_pages
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_enable_rx
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_contention_param
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_agc_detect_thresh
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcvk
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcik
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_queue
</UL>

<P><STRONG><a name="[544]"></a>wlan_xmit</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, wlan_tx.o(i.wlan_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_relay_xmit_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_xmit_entry
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[791]"></a>wlan_xmit_bcmc_frame</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, wlan_softap.o(i.wlan_xmit_bcmc_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = wlan_xmit_bcmc_frame &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_more_data
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_bcmc_freeidx
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_bcmc_frame
</UL>

<P><STRONG><a name="[f0]"></a>wlan_xmit_complete_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wlan_work_cb.o(i.wlan_xmit_complete_callback))
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[79f]"></a>wlan_xmit_frame</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, wlan_tx.o(i.wlan_xmit_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enqueue_frame
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_frame_num
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
</UL>

<P><STRONG><a name="[72b]"></a>wmm_param_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wlan_utility.o(i.wmm_param_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wmm_param_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[7a1]"></a>wpa_group_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wpas_psk.o(i.wpa_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = wpa_group_init &rArr; wpa_update_gtk &rArr; calc_gtk &rArr; i_PRF &rArr; hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
</UL>

<P><STRONG><a name="[52a]"></a>wpa_ioctl_process</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, wlan_ioctl.o(i.wpa_ioctl_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_80211_disassociate
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_wpa_enc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_port_status
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_discon_req
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_del_key
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_proc_assoc_rsp
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_igtk
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_rsp_assoc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ptk
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ie
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_ptk
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_igtk
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_gtk
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_key_recved
</UL>

<P><STRONG><a name="[7a2]"></a>wpa_ioctl_rsp_assoc</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wpas_psk.o(i.wpa_ioctl_rsp_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wpa_ioctl_rsp_assoc &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[6e6]"></a>wpa_ioctl_set_gtk</STRONG> (Thumb, 264 bytes, Stack size 144 bytes, wpas_psk.o(i.wpa_ioctl_set_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wpa_ioctl_set_gtk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[6e4]"></a>wpa_ioctl_set_igtk</STRONG> (Thumb, 172 bytes, Stack size 128 bytes, wpas_psk.o(i.wpa_ioctl_set_igtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = wpa_ioctl_set_igtk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[63d]"></a>wpa_md5_final</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wpas_md5.o(i.wpa_md5_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wpa_md5_final &rArr; wpa_md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_encode
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[63b]"></a>wpa_md5_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wpas_md5.o(i.wpa_md5_init))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[63c]"></a>wpa_md5_update</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wpas_md5.o(i.wpa_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_md5_update &rArr; md5_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_final
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[5c3]"></a>wpa_rc4</STRONG> (Thumb, 746 bytes, Stack size 20 bytes, wpas_rc4.o(i.wpa_rc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_rc4
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_gtk
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
</UL>

<P><STRONG><a name="[5c2]"></a>wpa_rc4_set_key</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, wpas_rc4.o(i.wpa_rc4_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_rc4_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_gtk
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
</UL>

<P><STRONG><a name="[110]"></a>wpa_resend_timer_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wpas_psk.o(i.wpa_resend_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wpa_resend_timer_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_sta_info.o(i.wlan_init_sta_info)
</UL>
<P><STRONG><a name="[533]"></a>wpa_update_gtk</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wpas_psk.o(i.wpa_update_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = wpa_update_gtk &rArr; calc_gtk &rArr; i_PRF &rArr; hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gtk
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eapol_key_iv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[783]"></a>wpas_delete_aid</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wpas_psk.o(i.wpas_delete_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wpas_delete_aid &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_stainfo
</UL>

<P><STRONG><a name="[f6]"></a>wpas_derive_psk_callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wpas_psk.o(i.wpas_derive_psk_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wpas_derive_psk_callback &rArr; derive_psk &rArr; password_hash &rArr; F &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_nonce
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[723]"></a>wpas_insert_aid</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wpas_psk.o(i.wpas_insert_aid))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
</UL>

<P><STRONG><a name="[799]"></a>wpas_priv_alloc</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wpas_psk.o(i.wpas_priv_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wpas_priv_alloc &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
</UL>

<P><STRONG><a name="[794]"></a>wpas_priv_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpas_psk.o(i.wpas_priv_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wpas_priv_free &rArr; os_del_timer &rArr; os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_init
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sw_deinit
</UL>

<P><STRONG><a name="[6ff]"></a>wpas_psk_event_handler</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, wpas_psk.o(i.wpas_psk_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pmksa_cache
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_data
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_rsp_assoc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_mic_failure_proc
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_wpa_rsn_ie
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_eapol_key_recved
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sta_wpa_info
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_key_recved
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2STR
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_disconnect
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_eapol
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_req_recved
</UL>

<P><STRONG><a name="[6f8]"></a>wpas_psk_init</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, wpas_psk.o(i.wpas_psk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = wpas_psk_init &rArr; wpa_group_init &rArr; wpa_update_gtk &rArr; calc_gtk &rArr; i_PRF &rArr; hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_derive_psk_callback
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_enc_algo_e
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ie
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_wpa_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
</UL>

<P><STRONG><a name="[f5]"></a>wpas_send_timeout_callback</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, wpas_psk.o(i.wpas_send_timeout_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928<LI>Call Chain = wpas_send_timeout_callback &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_task.o(i.wifi_create_driver_threads)
</UL>
<P><STRONG><a name="[6f9]"></a>wpas_wpa3_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wpas_psk.o(i.wpas_wpa3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = wpas_wpa3_init &rArr; wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_enc_algo_e
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_nonce
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ie
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_wpa_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect_req_entry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
</UL>

<P><STRONG><a name="[637]"></a>write_phy_dig_reg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_phy.o(i.write_phy_dig_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = write_phy_dig_reg &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_bb_dig_reg
</UL>

<P><STRONG><a name="[178]"></a>write_rf_reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_rf.o(i.write_rf_reg))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_setting_by_chan_plan
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_bandwidth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_iqk
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dck
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rx_iqk
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_rck
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_lnak
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mp_mode_tx_setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_thermal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_dig_gain
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcvk
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rf_tx_dcik
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rx_rck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ops.o(.constdata)
</UL>
<P><STRONG><a name="[48e]"></a>mbedtls_ciphersuite_preference_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[5b4]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_is_on_curve (via Veneer)
</UL>

<P><STRONG><a name="[5e2]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[48b]"></a>mbedtls_ecp_curve_val_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[59e]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_deinit (via Veneer)
</UL>

<P><STRONG><a name="[5a0]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_init (via Veneer)
</UL>

<P><STRONG><a name="[5a1]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_init (via Veneer)
</UL>

<P><STRONG><a name="[5b2]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_is_at_infinity (via Veneer)
</UL>

<P><STRONG><a name="[5b6]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_mul (via Veneer)
</UL>

<P><STRONG><a name="[5a8]"></a>mbedtls_ecp_point_cmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_cmp (via Veneer)
</UL>

<P><STRONG><a name="[5af]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init (via Veneer)
</UL>

<P><STRONG><a name="[5e4]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[48d]"></a>mbedtls_hwpka_flag_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[482]"></a>mbedtls_md5_ret</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get (via Veneer)
</UL>

<P><STRONG><a name="[5b9]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
</UL>

<P><STRONG><a name="[580]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_add (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[59b]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
</UL>

<P><STRONG><a name="[5a4]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin (via Veneer)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_add (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[582]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_cmp (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[5bc]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_x (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[590]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
</UL>

<P><STRONG><a name="[584]"></a>mbedtls_mpi_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[594]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod (via Veneer)
</UL>

<P><STRONG><a name="[586]"></a>mbedtls_mpi_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[5e8]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
</UL>

<P><STRONG><a name="[5ae]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
</UL>

<P><STRONG><a name="[592]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod (via Veneer)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mod (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
</UL>

<P><STRONG><a name="[5e6]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[595]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mulmod (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[588]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin (via Veneer)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set (via Veneer)
</UL>

<P><STRONG><a name="[5e7]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
</UL>

<P><STRONG><a name="[58f]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d (via Veneer)
</UL>

<P><STRONG><a name="[58a]"></a>mbedtls_mpi_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_prime_len (via Veneer)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin (via Veneer)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin (via Veneer)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_order_len (via Veneer)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_zero (via Veneer)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_one (via Veneer)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_odd (via Veneer)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d (via Veneer)
</UL>

<P><STRONG><a name="[5aa]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[58e]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_legendre (via Veneer)
</UL>

<P><STRONG><a name="[599]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord (via Veneer)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_invert (via Veneer)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_sub (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac (via Veneer)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed (via Veneer)
</UL>

<P><STRONG><a name="[59c]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin (via Veneer)
</UL>

<P><STRONG><a name="[487]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[48c]"></a>mbedtls_platform_set_hardware_poll</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[489]"></a>mbedtls_platform_set_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[488]"></a>mbedtls_platform_set_snprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[48a]"></a>mbedtls_platform_set_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symbol_mbedtls_20200709(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_init (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>WLAN_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32_it.o(.text.WLAN_Rx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = WLAN_Rx_IRQHandler &rArr; wlan_interrupt_rx_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2c8]"></a>log_uart_interrupt_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, uart.o(.text.log_uart_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = log_uart_interrupt_handler &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_release (via Veneer)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakelock_acquire (via Veneer)
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get (via Veneer)
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit (via Veneer)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_msg_num (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[1a2]"></a>sys_memset</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, wrapper_os.o(.text.sys_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_list_get (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp (via Veneer)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_efuse_map_read (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_task_func (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task_func (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_indicate_disconnect (via Veneer)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_set (via Veneer)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_store (via Veneer)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_joined_ap_load (via Veneer)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_init (via Veneer)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_disconnect_req (via Veneer)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ap_start (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_init (via Veneer)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>soc_rx_tasklet</STRONG> (Thumb, 1766 bytes, Stack size 72 bytes, soc_rx.o(i.soc_rx_tasklet))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = soc_rx_tasklet &rArr; soc_recvframe_handle &rArr; wlan_recv_entry &rArr; wlan_indicate_pkts &rArr; wlan_handle_amsdu &rArr; wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail (via Veneer)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16 (via Veneer)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32 (via Veneer)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read16 (via Veneer)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8 (via Veneer)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf_count (via Veneer)
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_short_pktbuf (via Veneer)
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe (via Veneer)
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_recvframe (via Veneer)
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_recvframe_handle (via Veneer)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_rx_desc (via Veneer)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_free_recv_pkt (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[fd]"></a>soc_send_xframe</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, soc_tx.o(i.soc_send_xframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = soc_send_xframe &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8 (via Veneer)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe (via Veneer)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8 (via Veneer)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_tx_stats (via Veneer)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_hw_tx (via Veneer)
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_select_mapping (via Veneer)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_tx_desc_polling (via Veneer)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_tx_desc (via Veneer)
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ratelimit (via Veneer)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tx_packet_in (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_ops.o(i.wifi_hci_ops_init)
</UL>
<P><STRONG><a name="[7a6]"></a>wlan_interrupt_rx_handler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, soc_isr.o(i.wlan_interrupt_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_interrupt_rx_handler &rArr; os_queue_work &rArr; queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_msg_num (via Veneer)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ps_rx_isr (via Veneer)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WLAN_Rx_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[350]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cmd_shell.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
</UL>

<P><STRONG><a name="[1d6]"></a>cmd_bw_set</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, cmd_shell.o(.text.cmd_bw_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = cmd_bw_set &rArr; wifi_management_connect &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_link_state_get
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_bw_set
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_bw_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_disconnect
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d7]"></a>cmd_exit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cmd_exit &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d3]"></a>cmd_group_join</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, cmd_shell.o(.text.cmd_group_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = cmd_group_join &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d9]"></a>cmd_help</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cmd_help &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d4]"></a>cmd_iperf2</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, cmd_shell.o(.text.cmd_iperf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = cmd_iperf2 &rArr; cmd_tcp &rArr; sys_task_create &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d2]"></a>cmd_read_memory</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, cmd_shell.o(.text.cmd_read_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = cmd_read_memory &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_print
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1d8]"></a>cmd_reboot</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cmd_shell.o(.text.cmd_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_reboot &rArr; wifi_power_state_set
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_state_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_clock_gate
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1cd]"></a>cmd_wifi_ap</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, cmd_shell.o(.text.cmd_wifi_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = cmd_wifi_ap &rArr; wifi_management_ap_start &rArr; wifi_netlink_ap_start &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1ce]"></a>cmd_wifi_ap_adv</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, cmd_shell.o(.text.cmd_wifi_ap_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = cmd_wifi_ap_adv &rArr; wifi_management_ap_start &rArr; wifi_netlink_ap_start &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_ap_start
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1cf]"></a>cmd_wifi_ap_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd_shell.o(.text.cmd_wifi_ap_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = cmd_wifi_ap_stop &rArr; wifi_management_sta_start &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1ca]"></a>cmd_wifi_channel_set</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, cmd_shell.o(.text.cmd_wifi_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = cmd_wifi_channel_set &rArr; wifi_netlink_channel_set &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_channel_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c3]"></a>cmd_wifi_close</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_wifi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = cmd_wifi_close &rArr; wifi_netlink_dev_close &rArr; wifi_netif_close &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_close
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_stop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c6]"></a>cmd_wifi_connect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cmd_shell.o(.text.cmd_wifi_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = cmd_wifi_connect &rArr; wifi_management_sta_start &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_sta_start
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_connect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c7]"></a>cmd_wifi_disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_wifi_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = cmd_wifi_disconnect &rArr; wifi_management_disconnect &rArr; eloop_event_send &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_disconnect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c5]"></a>cmd_wifi_ip_set</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, cmd_shell.o(.text.cmd_wifi_ip_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = cmd_wifi_ip_set &rArr; wifi_netif_set_ip &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_ip_mode
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_ip
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1cb]"></a>cmd_wifi_mac_addr</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, cmd_shell.o(.text.cmd_wifi_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cmd_wifi_mac_addr &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_set_hwaddr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_hwaddr
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c2]"></a>cmd_wifi_open</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_wifi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = cmd_wifi_open &rArr; wifi_netlink_dev_open &rArr; wifi_netif_open &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_dev_open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_start
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1cc]"></a>cmd_wifi_ps</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cmd_shell.o(.text.cmd_wifi_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = cmd_wifi_ps &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ps_set
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ps_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c9]"></a>cmd_wifi_rssi</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_wifi_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cmd_wifi_rssi &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_bss_rssi_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c4]"></a>cmd_wifi_scan</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cmd_shell.o(.text.cmd_wifi_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = cmd_wifi_scan &rArr; eloop_event_register &rArr; sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_management_scan
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_register
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[1c8]"></a>cmd_wifi_status</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, cmd_shell.o(.text.cmd_wifi_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = cmd_wifi_status &rArr; wifi_netlink_status_get &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_status_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_ip
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_hwaddr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_gw
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.rodata.cmd_table)
</UL>
<P><STRONG><a name="[a0]"></a>join_group_task_func</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cmd_shell.o(.text.join_group_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = join_group_task_func &rArr; igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_is_ipv4_got
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_ip
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.text.cmd_group_join)
</UL>
<P><STRONG><a name="[9f]"></a>scan_info_print</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, cmd_shell.o(.text.scan_info_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = scan_info_print &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_shell.o(.text.cmd_cb_scan_done)
</UL>
<P><STRONG><a name="[3b0]"></a>ensure</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cjson.o(.text.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ensure &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[329]"></a>get_object_item</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cjson.o(.text.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[45e]"></a>parse_hex4</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, cjson.o(.text.parse_hex4), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[45d]"></a>parse_string</STRONG> (Thumb, 746 bytes, Stack size 48 bytes, cjson.o(.text.parse_string), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[32b]"></a>parse_value</STRONG> (Thumb, 1814 bytes, Stack size 104 bytes, cjson.o(.text.parse_value), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[32c]"></a>print</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, cjson.o(.text.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = print &rArr; sys_realloc &rArr; pvSysReAlloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_realloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>

<P><STRONG><a name="[479]"></a>print_string_ptr</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, cjson.o(.text.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_string_ptr &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[478]"></a>print_value</STRONG> (Thumb, 2092 bytes, Stack size 96 bytes, cjson.o(.text.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = print_value &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[d6]"></a>_sys_timer_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wrapper_os.o(.text._sys_timer_callback))
<BR>[Address Reference Count : 1]<UL><LI> wrapper_os.o(.text.sys_timer_init)
</UL>
<P><STRONG><a name="[a2]"></a>tcp_task_func</STRONG> (Thumb, 2568 bytes, Stack size 152 bytes, tcp_test.o(.text.tcp_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = tcp_task_func &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stack_free_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcp_test.o(.text.cmd_tcp)
<LI> tcp_test.o(.text.tcp_task_func)
</UL>
<P><STRONG><a name="[325]"></a>byte_atoi</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, udp_test.o(.text.byte_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = byte_atoi &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_udp
</UL>

<P><STRONG><a name="[a3]"></a>udp_task_func</STRONG> (Thumb, 3140 bytes, Stack size 184 bytes, udp_test.o(.text.udp_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = udp_task_func &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_create
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stack_free_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memset (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> udp_test.o(.text.cmd_udp)
<LI> udp_test.o(.text.udp_task_func)
</UL>
<P><STRONG><a name="[452]"></a>netconn_recv_data</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, api_lib.o(.text.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; sys_queue_fetch &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[453]"></a>netconn_recv_data_tcp</STRONG> (Thumb, 246 bytes, Stack size 88 bytes, api_lib.o(.text.netconn_recv_data_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
</UL>

<P><STRONG><a name="[b4]"></a>accept_function</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, api_msg.o(.text.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; sys_queue_init &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text.lwip_netconn_do_listen)
</UL>
<P><STRONG><a name="[9e]"></a>err_tcp</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, api_msg.o(.text.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(.text.lwip_netconn_do_close_internal)
<LI> api_msg.o(.text.lwip_netconn_do_connect)
<LI> api_msg.o(.text.lwip_netconn_do_connected)
<LI> api_msg.o(.text.accept_function)
<LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[423]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 680 bytes, Stack size 24 bytes, api_msg.o(.text.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[b2]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, api_msg.o(.text.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[b3]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, api_msg.o(.text.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[435]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 848 bytes, Stack size 40 bytes, api_msg.o(.text.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[422]"></a>netconn_drain</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, api_msg.o(.text.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_queue_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[9d]"></a>poll_tcp</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, api_msg.o(.text.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(.text.lwip_netconn_do_close_internal)
<LI> api_msg.o(.text.lwip_netconn_do_connect)
<LI> api_msg.o(.text.lwip_netconn_do_connected)
<LI> api_msg.o(.text.accept_function)
<LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[b5]"></a>recv_raw</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, api_msg.o(.text.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = recv_raw &rArr; pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[9b]"></a>recv_tcp</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, api_msg.o(.text.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> api_msg.o(.text.lwip_netconn_do_connect)
<LI> api_msg.o(.text.lwip_netconn_do_connected)
<LI> api_msg.o(.text.accept_function)
<LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[b6]"></a>recv_udp</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, api_msg.o(.text.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[9c]"></a>sent_tcp</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, api_msg.o(.text.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(.text.lwip_netconn_do_close_internal)
<LI> api_msg.o(.text.lwip_netconn_do_connect)
<LI> api_msg.o(.text.lwip_netconn_do_connected)
<LI> api_msg.o(.text.accept_function)
<LI> api_msg.o(.text.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[c8]"></a>netifapi_do_netif_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netifapi.o(.text.netifapi_do_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text.netifapi_netif_common)
</UL>
<P><STRONG><a name="[c9]"></a>netifapi_do_netif_set_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, netifapi.o(.text.netifapi_do_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text.netifapi_netif_set_addr)
</UL>
<P><STRONG><a name="[31e]"></a>alloc_socket</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, sockets.o(.text.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_socket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[b8]"></a>event_callback</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, sockets.o(.text.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = event_callback &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text.lwip_socket)
</UL>
<P><STRONG><a name="[410]"></a>lwip_getaddrname</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sockets.o(.text.lwip_getaddrname))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[b1]"></a>lwip_getsockopt_callback</STRONG> (Thumb, 700 bytes, Stack size 16 bytes, sockets.o(.text.lwip_getsockopt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lwip_getsockopt_callback &rArr; sys_sema_up &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text.lwip_getsockopt)
</UL>
<P><STRONG><a name="[439]"></a>lwip_recv_tcp</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, sockets.o(.text.lwip_recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[43d]"></a>lwip_recvfrom_udp_raw</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, sockets.o(.text.lwip_recvfrom_udp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lwip_recvfrom_udp_raw &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[43f]"></a>lwip_selscan</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, sockets.o(.text.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lwip_selscan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[b7]"></a>lwip_setsockopt_callback</STRONG> (Thumb, 1216 bytes, Stack size 24 bytes, sockets.o(.text.lwip_setsockopt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = lwip_setsockopt_callback &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind_netif
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind_netif
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind_netif
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text.lwip_setsockopt)
</UL>
<P><STRONG><a name="[da]"></a>tcpip_thread</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, tcpip.o(.text.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcpip_thread &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text.tcpip_init)
</UL>
<P><STRONG><a name="[395]"></a>dns_call_found</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, dns.o(.text.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[396]"></a>dns_check_entry</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, dns.o(.text.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[a9]"></a>dns_recv</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, dns.o(.text.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = dns_recv &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text.dns_gethostbyname_addrtype)
</UL>
<P><STRONG><a name="[397]"></a>dns_send</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, dns.o(.text.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[c7]"></a>netif_null_output_ip4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text.netif_null_output_ip4))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text.netif_add)
</UL>
<P><STRONG><a name="[ca]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_free_ooseq &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text.pbuf_alloc)
</UL>
<P><STRONG><a name="[465]"></a>pbuf_header_impl</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, pbuf.o(.text.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_header_impl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[d8]"></a>tcp_accept_null</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tcp.o(.text.tcp_accept_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = tcp_accept_null &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[4ac]"></a>tcp_close_shutdown</STRONG> (Thumb, 940 bytes, Stack size 32 bytes, tcp.o(.text.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>

<P><STRONG><a name="[4ae]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, tcp.o(.text.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4b7]"></a>tcp_free_acked_segments</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, tcp_in.o(.text.tcp_free_acked_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_free_acked_segments &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4c0]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tcp_in.o(.text.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4b9]"></a>tcp_parseopt</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, tcp_in.o(.text.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_parseopt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4bb]"></a>tcp_receive</STRONG> (Thumb, 2508 bytes, Stack size 40 bytes, tcp_in.o(.text.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4b1]"></a>tcp_create_segment</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, tcp_out.o(.text.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[4bf]"></a>tcp_output_alloc_header_common</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tcp_out.o(.text.tcp_output_alloc_header_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[b0]"></a>lwip_cyclic_timer</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, timeouts.o(.text.lwip_cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lwip_cyclic_timer &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(.text.sys_timeouts_init)
<LI> timeouts.o(.text.lwip_cyclic_timer)
</UL>
<P><STRONG><a name="[d9]"></a>tcpip_tcp_timer</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, timeouts.o(.text.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_current_time_get
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(.text.tcp_timer_needed)
<LI> timeouts.o(.text.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[376]"></a>dhcp_bind</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[373]"></a>dhcp_create_msg</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, dhcp.o(.text.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[37d]"></a>dhcp_discover</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[381]"></a>dhcp_handle_ack</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, dhcp.o(.text.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[383]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, dhcp.o(.text.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[380]"></a>dhcp_reboot</STRONG> (Thumb, 746 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[a7]"></a>dhcp_recv</STRONG> (Thumb, 1788 bytes, Stack size 72 bytes, dhcp.o(.text.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[37e]"></a>dhcp_select</STRONG> (Thumb, 1036 bytes, Stack size 48 bytes, dhcp.o(.text.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[3b2]"></a>etharp_find_entry</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, etharp.o(.text.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = etharp_find_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3b7]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, etharp.o(.text.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[3b6]"></a>etharp_raw</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, etharp.o(.text.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[3d3]"></a>icmp_send_response</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, icmp.o(.text.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[3de]"></a>igmp_lookup_group</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, igmp.o(.text.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[3df]"></a>igmp_send</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, igmp.o(.text.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[3f4]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, ip4_frag.o(.text.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[ad]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ip4_frag.o(.text.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(.text.ip4_frag)
</UL>
<P><STRONG><a name="[ab]"></a>low_level_output</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, ethernetif.o(.text.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = low_level_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text.ethernetif_init)
</UL>
<P><STRONG><a name="[a1]"></a>ping_task_func</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ping.o(.text.ping_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ping_task_func &rArr; ping &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_delete
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text.cmd_ping)
</UL>
<P><STRONG><a name="[32d]"></a>cau_aes_calculate</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gd32w51x_cau_aes.o(.text.cau_aes_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cau_aes_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_flag_get
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_enable_state_get
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_data_write
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[334]"></a>cau_aes_key_config</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gd32w51x_cau_aes.o(.text.cau_aes_key_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cau_aes_key_config
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_keysize_config
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cau_aes_ecb
</UL>

<P><STRONG><a name="[3c3]"></a>hau_hmac_calculate</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, gd32w51x_hau_sha_md5.o(.text.hau_hmac_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hau_hmac_calculate &rArr; hau_sha_md5_digest_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_deinit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_sha_md5_digest_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_last_word_validbits_num_config
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_flag_get
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_digest_calculation_enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_sha_256
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_sha_1
</UL>

<P><STRONG><a name="[3c9]"></a>hau_sha_md5_digest_read</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, gd32w51x_hau_sha_md5.o(.text.hau_sha_md5_digest_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hau_sha_md5_digest_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_digest_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hau_hmac_calculate
</UL>

<P><STRONG><a name="[e1]"></a>find_candidate_ap</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wifi_management.o(.text.find_candidate_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = find_candidate_ap &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_management.o(.text.wifi_mgmt_cb_scan_done)
</UL>
<P><STRONG><a name="[490]"></a>sm_MAINTAIN_CONNECTION_SCAN_Enter</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, wifi_management.o(.text.sm_MAINTAIN_CONNECTION_SCAN_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sm_MAINTAIN_CONNECTION_SCAN_Enter &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_connect_retry
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mgmt_cb_run_state_machine
</UL>

<P><STRONG><a name="[e0]"></a>wifi_mgmt_connect_retry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_management.o(.text.wifi_mgmt_connect_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wifi_mgmt_connect_retry &rArr; sm_MAINTAIN_CONNECTION_SCAN_Enter &rArr; wifi_netif_stop_dhcp &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_MAINTAIN_CONNECTION_SCAN_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
</UL>
<P><STRONG><a name="[d4]"></a>wifi_mgmt_dhcp_polling</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, wifi_management.o(.text.wifi_mgmt_dhcp_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wifi_mgmt_dhcp_polling &rArr; eloop_timeout_register &rArr; sys_calloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_is_ipv4_got
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_get_ip
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_stop_dhcp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_ipaddr_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wifi_management.o(.text.sm_MAINTAIN_CONNECTION_SCAN_Enter)
<LI> wifi_management.o(.text.wifi_mgmt_dhcp_polling)
<LI> wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
</UL>
<P><STRONG><a name="[d5]"></a>wifi_mgmt_link_status_polling</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, wifi_management.o(.text.wifi_mgmt_link_status_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wifi_mgmt_link_status_polling &rArr; eloop_timeout_register &rArr; sys_calloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_bss_rssi_get
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netif_is_ipv4_got
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_unregister
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_send
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_event_register
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_netlink_scan_set
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout_register
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wifi_management.o(.text.sm_MAINTAIN_CONNECTION_SCAN_Enter)
<LI> wifi_management.o(.text.wifi_mgmt_link_status_polling)
<LI> wifi_management.o(.text.wifi_mgmt_cb_run_state_machine)
</UL>
<P><STRONG><a name="[80]"></a>_queue_delete_privilege_routine</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, msg_queue.o(.text._queue_delete_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _queue_delete_privilege_routine &rArr; k_free &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_free
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_allocated
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msg_queue.o(.text._impl_queue_delete)
</UL>
<P><STRONG><a name="[81]"></a>_queue_init_privilege_routine</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, msg_queue.o(.text._queue_init_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _queue_init_privilege_routine &rArr; k_malloc &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_malloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msg_queue.o(.text._impl_queue_init)
</UL>
<P><STRONG><a name="[82]"></a>_queue_msg_num_get_privilege_routine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msg_queue.o(.text._queue_msg_num_get_privilege_routine))
<BR>[Address Reference Count : 1]<UL><LI> msg_queue.o(.text._impl_queue_num_probe)
</UL>
<P><STRONG><a name="[83]"></a>_queue_receive_privilege_routine</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, msg_queue.o(.text._queue_receive_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _queue_receive_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memcpy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msg_queue.o(.text._impl_queue_receive)
</UL>
<P><STRONG><a name="[98]"></a>_queue_schedule</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, msg_queue.o(.text._queue_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _queue_schedule &rArr; timeout_remove &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memcpy
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
</UL>
<BR>[Address Reference Count : 3]<UL><LI> msg_queue.o(.text._queue_delete_privilege_routine)
<LI> msg_queue.o(.text._queue_send_privilege_routine)
<LI> msg_queue.o(.text._queue_receive_privilege_routine)
</UL>
<P><STRONG><a name="[84]"></a>_queue_send_privilege_routine</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, msg_queue.o(.text._queue_send_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _queue_send_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memcpy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msg_queue.o(.text._impl_queue_send)
</UL>
<P><STRONG><a name="[7b]"></a>_kernel_start_privilege_routine</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sched_kernel.o(.text._kernel_start_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _kernel_start_privilege_routine &rArr; init_static_thread_list &rArr; _impl_thread_static_init &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_run_theFirstThread
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_disable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_interrupt_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_static_thread_list
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_kernel.o(.text._impl_kernel_at_rtos_run)
</UL>
<P><STRONG><a name="[af]"></a>_schedule_priority_node_order_compare_condition</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sched_kernel.o(.text._schedule_priority_node_order_compare_condition))
<BR>[Address Reference Count : 3]<UL><LI> sched_kernel.o(.text.schedule_exit_trigger)
<LI> sched_kernel.o(.text.schedule_setPend)
<LI> sched_kernel.o(.text.kernel_scheduler_inPendSV_c)
</UL>
<P><STRONG><a name="[8a]"></a>_thread_delete_privilege_routine</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sched_thread.o(.text._thread_delete_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _thread_delete_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasTwoPendingItem
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_thread.o(.text._impl_thread_delete)
<LI> sched_thread.o(.text._impl_thread_entry)
</UL>
<P><STRONG><a name="[8b]"></a>_thread_init_privilege_routine</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, sched_thread.o(.text._thread_init_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _thread_init_privilege_routine &rArr; schedule_setPend &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_malloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_setPend
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_stack_frame_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_init)
</UL>
<P><STRONG><a name="[8c]"></a>_thread_name_toId_privilege_routine</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sched_thread.o(.text._thread_name_toId_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _thread_name_toId_privilege_routine &rArr; k_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_name_toId)
</UL>
<P><STRONG><a name="[8d]"></a>_thread_sleep_privilege_routine</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sched_thread.o(.text._thread_sleep_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _thread_sleep_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_waitList
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_sleep)
</UL>
<P><STRONG><a name="[8e]"></a>_thread_stack_free_get_privilege_routine</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sched_thread.o(.text._thread_stack_free_get_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_stack_free_get_privilege_routine
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_free_size_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_stack_free_size_get)
</UL>
<P><STRONG><a name="[90]"></a>_thread_user_data_get_privilege_routine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sched_thread.o(.text._thread_user_data_get_privilege_routine))
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_user_data_get)
</UL>
<P><STRONG><a name="[91]"></a>_thread_user_data_register_privilege_routine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sched_thread.o(.text._thread_user_data_register_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _thread_user_data_register_privilege_routine
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_user_data_register)
</UL>
<P><STRONG><a name="[92]"></a>_thread_yield_privilege_routine</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sched_thread.o(.text._thread_yield_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _thread_yield_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_waitList
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_hasTwoPendingItem
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_thread.o(.text._impl_thread_yield)
</UL>
<P><STRONG><a name="[89]"></a>_system_busy_wait_privilege_routine</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sched_timer.o(.text._system_busy_wait_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _system_busy_wait_privilege_routine &rArr; clock_time_interval_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_isDisabled
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_interval_set
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_enable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_elapsed_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_timer.o(.text._impl_system_busy_wait)
</UL>
<P><STRONG><a name="[de]"></a>_timeout_node_order_compare_condition</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, sched_timer.o(.text._timeout_node_order_compare_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _timeout_node_order_compare_condition
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_timer.o(.text.timeout_set)
<LI> sched_timer.o(.text.timer_callback_fromTimeOut)
</UL>
<P><STRONG><a name="[93]"></a>_timer_delete_privilege_routine</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sched_timer.o(.text._timer_delete_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _timer_delete_privilege_routine &rArr; timeout_remove &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_timer.o(.text._impl_timer_delete)
</UL>
<P><STRONG><a name="[94]"></a>_timer_init_privilege_routine</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, sched_timer.o(.text._timer_init_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _timer_init_privilege_routine &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linker_list_transaction_common
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_timer.o(.text._impl_timer_init)
</UL>
<P><STRONG><a name="[dd]"></a>_timer_schedule_request_privilege_routine</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sched_timer.o(.text._timer_schedule_request_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _timer_schedule_request_privilege_routine &rArr; clock_time_interval_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_interval_set
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sched_timer.o(.text.timer_schedule)
<LI> sched_timer.o(.text.timeout_set)
<LI> sched_timer.o(.text.timeout_remove)
<LI> sched_timer.o(.text.timeout_handler)
</UL>
<P><STRONG><a name="[95]"></a>_timer_start_privilege_routine</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sched_timer.o(.text._timer_start_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _timer_start_privilege_routine &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_timer.o(.text._impl_timer_start)
</UL>
<P><STRONG><a name="[96]"></a>_timer_stop_privilege_routine</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sched_timer.o(.text._timer_stop_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _timer_stop_privilege_routine &rArr; timeout_remove &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sched_timer.o(.text._impl_timer_stop)
</UL>
<P><STRONG><a name="[97]"></a>_timer_total_system_ms_get_privilege_routine</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sched_timer.o(.text._timer_total_system_ms_get_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _timer_total_system_ms_get_privilege_routine &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_elapsed_get
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sched_timer.o(.text._impl_timer_total_system_ms_get)
<LI> sched_timer.o(.text.timer_total_system_ms_get)
</UL>
<P><STRONG><a name="[7c]"></a>_mutex_delete_privilege_routine</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sync_mutex.o(.text._mutex_delete_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_delete_privilege_routine &rArr; schedule_entry_trigger &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_mutex.o(.text._impl_mutex_delete)
</UL>
<P><STRONG><a name="[7d]"></a>_mutex_init_privilege_routine</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sync_mutex.o(.text._mutex_init_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_init_privilege_routine &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_mutex.o(.text._impl_mutex_init)
</UL>
<P><STRONG><a name="[7e]"></a>_mutex_lock_privilege_routine</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sync_mutex.o(.text._mutex_lock_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _mutex_lock_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_mutex.o(.text._impl_mutex_lock)
</UL>
<P><STRONG><a name="[7f]"></a>_mutex_unlock_privilege_routine</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sync_mutex.o(.text._mutex_unlock_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mutex_unlock_privilege_routine &rArr; schedule_entry_trigger &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_mutex.o(.text._impl_mutex_unlock)
</UL>
<P><STRONG><a name="[85]"></a>_semaphore_delete_privilege_routine</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, sync_semaphore.o(.text._semaphore_delete_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _semaphore_delete_privilege_routine &rArr; schedule_entry_trigger &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_semaphore.o(.text._impl_semaphore_delete)
</UL>
<P><STRONG><a name="[86]"></a>_semaphore_give_privilege_routine</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sync_semaphore.o(.text._semaphore_give_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _semaphore_give_privilege_routine &rArr; schedule_entry_trigger &rArr; linker_list_transaction_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_entry_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_semaphore.o(.text._impl_semaphore_give)
</UL>
<P><STRONG><a name="[87]"></a>_semaphore_init_privilege_routine</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, sync_semaphore.o(.text._semaphore_init_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _semaphore_init_privilege_routine &rArr; k_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_semaphore.o(.text._impl_semaphore_init)
</UL>
<P><STRONG><a name="[99]"></a>_semaphore_schedule</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sync_semaphore.o(.text._semaphore_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _semaphore_schedule &rArr; timeout_remove &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sync_semaphore.o(.text._semaphore_delete_privilege_routine)
<LI> sync_semaphore.o(.text._semaphore_give_privilege_routine)
</UL>
<P><STRONG><a name="[88]"></a>_semaphore_take_privilege_routine</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sync_semaphore.o(.text._semaphore_take_privilege_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _semaphore_take_privilege_routine &rArr; schedule_exit_trigger &rArr; timeout_set &rArr; linker_list_transaction_specific
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel_thread_runContextGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kernel_irq_disable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_impl_trace_postcode_set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_exit_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync_semaphore.o(.text._impl_semaphore_take)
</UL>
<P><STRONG><a name="[1e5]"></a>exchange</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, gnu_getopt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>

<P><STRONG><a name="[1e7]"></a>my_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gnu_getopt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gnu_getopt_internal
</UL>

<P><STRONG><a name="[200]"></a>mapped_v4_to_regular_v4</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mapped_v4_to_regular_v4 &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_on_connect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_msg
</UL>

<P><STRONG><a name="[5f]"></a>send_timer_proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = send_timer_proc &rArr; iperf_check_throttle &rArr; timeval_diff &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_check_throttle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_api.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>JSON_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nread
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_results
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>

<P><STRONG><a name="[221]"></a>get_parameters</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = get_parameters &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_reverse
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_tcpinfo_retransmits
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
</UL>

<P><STRONG><a name="[226]"></a>JSON_write</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = JSON_write &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nwrite
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_results
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameters
</UL>

<P><STRONG><a name="[228]"></a>send_parameters</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = send_parameters &rArr; JSON_write &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_parameters
</UL>

<P><STRONG><a name="[230]"></a>send_results</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = send_results &rArr; JSON_write &rArr; Nwrite &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_results
</UL>

<P><STRONG><a name="[233]"></a>get_results</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = get_results &rArr; JSON_read &rArr; Nread &rArr; lwip_read &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; sys_queue_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_exchange_results
</UL>

<P><STRONG><a name="[23d]"></a>iperf_print_results</STRONG> (Thumb, 1408 bytes, Stack size 224 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = iperf_print_results &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reporter_callback
</UL>

<P><STRONG><a name="[241]"></a>print_interval_results</STRONG> (Thumb, 538 bytes, Stack size 200 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = print_interval_results &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_equals
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_err
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_print_intermediate
</UL>

<P><STRONG><a name="[245]"></a>iperf_print_intermediate</STRONG> (Thumb, 792 bytes, Stack size 176 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = iperf_print_intermediate &rArr; print_interval_results &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mfree
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_interval_results
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_snprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_diff
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_err
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reporter_callback
</UL>

<P><STRONG><a name="[1f2]"></a>check_sender_has_retransmits</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iperf_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sender_has_retransmits
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_tcpinfo_retransmits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_reverse
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_set_test_role
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_protocol
</UL>

<P><STRONG><a name="[6f]"></a>test_timer_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iperf_client_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_client_api.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>client_stats_timer_proc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iperf_client_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_client_api.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>client_reporter_timer_proc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iperf_client_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_client_api.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>create_client_timers</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = create_client_timers &rArr; tmr_create &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[72]"></a>client_omit_timer_proc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = client_omit_timer_proc &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_stats
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_client_api.o(.text)
</UL>
<P><STRONG><a name="[262]"></a>iperf_add_select_streams</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iperf_add_select_streams
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_handle_message_client
</UL>

<P><STRONG><a name="[26e]"></a>iperf_del_select_streams</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, iperf_client_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iperf_del_select_streams
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_client
</UL>

<P><STRONG><a name="[73]"></a>server_stats_timer_proc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iperf_server_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_server_api.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>server_reporter_timer_proc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iperf_server_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iperf_server_api.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>create_server_timers</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = create_server_timers &rArr; tmr_create &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[75]"></a>server_omit_timer_proc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = server_omit_timer_proc &rArr; iperf3__iprintf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_reset_stats
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf3__iprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iperf_server_api.o(.text)
</UL>
<P><STRONG><a name="[278]"></a>cleanup_server</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, iperf_server_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = cleanup_server &rArr; is_closed &rArr; lwip_select &rArr; sys_arch_sem_wait &rArr; sys_sema_down &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_closed
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iperf_run_server
</UL>

<P><STRONG><a name="[708]"></a>IS_MCAST</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_intf.o(i.IS_MCAST))
<BR><BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_tcpip
</UL>

<P><STRONG><a name="[56e]"></a>config_softap_setting</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, wlan_intf.o(i.config_softap_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = config_softap_setting &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_entry
</UL>

<P><STRONG><a name="[121]"></a>wifi_set_channel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wlan_intf.o(i.wifi_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wifi_set_channel &rArr; set_channel_bwmode &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel_bwmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>wifi_show_trx_resource</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wlan_intf.o(i.wifi_show_trx_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wifi_show_trx_resource &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wlan_intf.o(.constdata)
</UL>
<P><STRONG><a name="[70c]"></a>wifi_test_xmit_alloc_buffer</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, wlan_intf.o(i.wifi_test_xmit_alloc_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wifi_test_xmit_alloc_buffer &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
</UL>

<P><STRONG><a name="[70d]"></a>wifi_test_xmit_alloc_xmitframe</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wlan_intf.o(i.wifi_test_xmit_alloc_xmitframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wifi_test_xmit_alloc_xmitframe &rArr; wlan_update_attrib &rArr; set_security_attrib &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
</UL>

<P><STRONG><a name="[710]"></a>wifi_test_xmit_bc_uc</STRONG> (Thumb, 414 bytes, Stack size 80 bytes, wlan_intf.o(i.wifi_test_xmit_bc_uc))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wifi_test_xmit_bc_uc &rArr; wifi_test_xmit_alloc_xmitframe &rArr; wlan_update_attrib &rArr; set_security_attrib &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_xmitframe
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cpu_queue_available
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_xmitframe
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_alloc_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
</UL>

<P><STRONG><a name="[704]"></a>wifi_test_xmit_entry</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, wlan_intf.o(i.wifi_test_xmit_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wifi_test_xmit_entry &rArr; wifi_test_xmit_uc_encrypted &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_uc_encrypted
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_raw_frame
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_bc_uc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_bcmc_stainfo
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_priv_req_entry
</UL>

<P><STRONG><a name="[714]"></a>wifi_test_xmit_raw_frame</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, wlan_intf.o(i.wifi_test_xmit_raw_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wifi_test_xmit_raw_frame &rArr; wlan_get_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_mgmtframe_attrib
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_xmitframe
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf_count
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
</UL>

<P><STRONG><a name="[712]"></a>wifi_test_xmit_uc_encrypted</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, wlan_intf.o(i.wifi_test_xmit_uc_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wifi_test_xmit_uc_encrypted &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf_count
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_xmit_entry
</UL>

<P><STRONG><a name="[292]"></a>list_add</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_resort
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
</UL>

<P><STRONG><a name="[28f]"></a>add_usecs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = add_usecs &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
</UL>

<P><STRONG><a name="[291]"></a>getnow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getnow &rArr; gettimeofday &rArr; sys_current_time_get &rArr; _impl_timer_total_system_ms_get &rArr; kernel_privilege_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_timeout
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_create
</UL>

<P><STRONG><a name="[293]"></a>list_remove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_resort
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cancel
</UL>

<P><STRONG><a name="[294]"></a>list_resort</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_resort &rArr; list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_run
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
</UL>

<P><STRONG><a name="[762]"></a>wlan_get_rsn_akm_suite</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, wlan_ie_proc.o(i.wlan_get_rsn_akm_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wlan_get_rsn_akm_suite &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_rsn_ie
</UL>

<P><STRONG><a name="[763]"></a>wlan_get_rsn_cipher</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wlan_ie_proc.o(i.wlan_get_rsn_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wlan_get_rsn_cipher &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_rsn_ie
</UL>

<P><STRONG><a name="[765]"></a>wlan_get_wpa_cipher</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, wlan_ie_proc.o(i.wlan_get_wpa_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wlan_get_wpa_cipher &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_wpa_ie
</UL>

<P><STRONG><a name="[5bf]"></a>IS_MCAST</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.IS_MCAST))
<BR><BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>

<P><STRONG><a name="[54a]"></a>bip_check_mic</STRONG> (Thumb, 198 bytes, Stack size 112 bytes, wlan_mgmt_engine.o(i.bip_check_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = bip_check_mic &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_128_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>

<P><STRONG><a name="[54c]"></a>bip_check_mme</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wlan_mgmt_engine.o(i.bip_check_mme))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bip_check_mme &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_ipn_swap
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>

<P><STRONG><a name="[54d]"></a>bip_ipn_swap</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.bip_ipn_swap))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mme
</UL>

<P><STRONG><a name="[54e]"></a>calc_bss_rssi_dbm</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, wlan_mgmt_engine.o(i.calc_bss_rssi_dbm))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = calc_bss_rssi_dbm &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_beacon_recved
</UL>

<P><STRONG><a name="[5be]"></a>deauth_disassoc_mfp_process</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, wlan_mgmt_engine.o(i.deauth_disassoc_mfp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = deauth_disassoc_mfp_process &rArr; bip_check_mic &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sa_query
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_ipn_swap
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mme
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_check_mic
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disassoc_recved
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_deauth_recved
</UL>

<P><STRONG><a name="[724]"></a>get_da</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.get_da))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_auth_recved
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_assoc_rsp_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ap_auth_recved
</UL>

<P><STRONG><a name="[786]"></a>get_hdr_bssid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.get_hdr_bssid))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_confirm_recved
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sae_commit_recved
</UL>

<P><STRONG><a name="[76b]"></a>is_broadcast_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.is_broadcast_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_mgmtframe_header
</UL>

<P><STRONG><a name="[78d]"></a>le_read_cpu16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_mgmt_engine.o(i.le_read_cpu16))
<BR><BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_disassoc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_rsp
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_assoc_req
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_ba
</UL>

<P><STRONG><a name="[5c0]"></a>start_sa_query</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wlan_mgmt_engine.o(i.start_sa_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = start_sa_query &rArr; wlan_send_action_sa_query &rArr; wlan_init_mgmtframe_header &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_action_sa_query
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deauth_disassoc_mfp_process
</UL>

<P><STRONG><a name="[55e]"></a>check_network_encrypt</STRONG> (Thumb, 380 bytes, Stack size 168 bytes, wlan_mgmt_proc.o(i.check_network_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = check_network_encrypt &rArr; wlan_get_encrypt_info &rArr; wlan_parse_wpa_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_encrypt_info
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_beacon_info
</UL>

<P><STRONG><a name="[5da]"></a>dump_avg_fail_ratio</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wlan_ra.o(i.dump_avg_fail_ratio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dump_avg_fail_ratio &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>

<P><STRONG><a name="[691]"></a>get_highest_rate_idx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wlan_ra.o(i.get_highest_rate_idx))
<BR><BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
</UL>

<P><STRONG><a name="[692]"></a>get_lowest_rate_idx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wlan_ra.o(i.get_lowest_rate_idx))
<BR><BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
</UL>

<P><STRONG><a name="[693]"></a>ra_analyze_mask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, wlan_ra.o(i.ra_analyze_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_try_up_done
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_up
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_down
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_add_sta
</UL>

<P><STRONG><a name="[69a]"></a>ra_avg_fail_ratio</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, wlan_ra.o(i.ra_avg_fail_ratio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ra_avg_fail_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>

<P><STRONG><a name="[698]"></a>ra_process</STRONG> (Thumb, 898 bytes, Stack size 96 bytes, wlan_ra.o(i.ra_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ra_process &rArr; ra_try_up_done &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_try_up_done
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_up
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_rate_down
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_avg_fail_ratio
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_avg_fail_ratio
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_func
</UL>

<P><STRONG><a name="[69d]"></a>ra_rate_down</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, wlan_ra.o(i.ra_rate_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ra_rate_down &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_analyze_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>

<P><STRONG><a name="[69c]"></a>ra_rate_up</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, wlan_ra.o(i.ra_rate_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ra_rate_up &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_analyze_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>

<P><STRONG><a name="[69b]"></a>ra_try_up_done</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wlan_ra.o(i.ra_try_up_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ra_try_up_done &rArr; ra_analyze_mask &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_analyze_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_process
</UL>

<P><STRONG><a name="[559]"></a>IS_MCAST</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_rx.o(i.IS_MCAST))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ap2sta_frame
</UL>

<P><STRONG><a name="[558]"></a>check_ap2sta_frame</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, wlan_rx.o(i.check_ap2sta_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = check_ap2sta_frame &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
</UL>

<P><STRONG><a name="[55d]"></a>check_duplicate_data</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wlan_rx.o(i.check_duplicate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = check_duplicate_data &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
</UL>

<P><STRONG><a name="[561]"></a>check_sta2ap_frame</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wlan_rx.o(i.check_sta2ap_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = check_sta2ap_frame &rArr; wlan_proc_sta_pwrbit &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_proc_sta_pwrbit
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
</UL>

<P><STRONG><a name="[565]"></a>check_sta2sta_frame</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, wlan_rx.o(i.check_sta2sta_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = check_sta2sta_frame &rArr; wlan_proc_sta_pwrbit &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_proc_sta_pwrbit
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
</UL>

<P><STRONG><a name="[55a]"></a>is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan_rx.o(i.is_zero_ether_addr))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ap2sta_frame
</UL>

<P><STRONG><a name="[73a]"></a>wlan_check_data_frame</STRONG> (Thumb, 760 bytes, Stack size 64 bytes, wlan_rx.o(i.wlan_check_data_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = wlan_check_data_frame &rArr; check_sta2sta_frame &rArr; wlan_proc_sta_pwrbit &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2sta_frame
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sta2ap_frame
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_duplicate_data
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ap2sta_frame
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dispatch_recvframe
</UL>

<P><STRONG><a name="[742]"></a>wlan_dispatch_recvframe</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, wlan_rx.o(i.wlan_dispatch_recvframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = wlan_dispatch_recvframe &rArr; wlan_check_data_frame &rArr; check_sta2sta_frame &rArr; wlan_proc_sta_pwrbit &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_mode_associated
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_data_frame
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_mgmt_dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
</UL>

<P><STRONG><a name="[766]"></a>wlan_handle_amsdu</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, wlan_rx.o(i.wlan_handle_amsdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = wlan_handle_amsdu &rArr; wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_end_of_queue
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_short_pktbuf
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_recvframe
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_recvframe
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_indicate_pkts
</UL>

<P><STRONG><a name="[768]"></a>wlan_indicate_pkts</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wlan_rx.o(i.wlan_indicate_pkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = wlan_indicate_pkts &rArr; wlan_handle_amsdu &rArr; wifi_recv_indicate_pkt &rArr; wifi_recv_indicate_eapol &rArr; wpas_psk_event_handler &rArr; ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_indicate_pkt
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlanhdr_to_ethhdr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_amsdu
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
</UL>

<P><STRONG><a name="[778]"></a>wlan_port_ctrl</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, wlan_rx.o(i.wlan_port_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_port_ctrl &rArr; wlan_search_sta &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_entry
</UL>

<P><STRONG><a name="[769]"></a>wlanhdr_to_ethhdr</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, wlan_rx.o(i.wlanhdr_to_ethhdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlanhdr_to_ethhdr &rArr; parse_snap_header &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_snap_header
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_indicate_pkts
</UL>

<P><STRONG><a name="[79d]"></a>arc4_encrypt</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, wlan_security.o(i.arc4_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arc4_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_encrypt
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_decrypt
</UL>

<P><STRONG><a name="[79c]"></a>arc4_init</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, wlan_security.o(i.arc4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arc4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_encrypt
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_decrypt
</UL>

<P><STRONG><a name="[79e]"></a>get_crc32</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wlan_security.o(i.get_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_encrypt
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wep_decrypt
</UL>

<P><STRONG><a name="[777]"></a>wlan_get_sta_sleep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wlan_softap.o(i.wlan_get_sta_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_enter_sleep
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pkt_can_xmit
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
</UL>

<P><STRONG><a name="[781]"></a>wlan_get_sta_tim_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wlan_softap.o(i.wlan_get_sta_tim_bit))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tim_map
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sta_leave_sleep
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pspoll_recved
</UL>

<P><STRONG><a name="[722]"></a>wifi_mac_hash</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wlan_sta_info.o(i.wifi_mac_hash))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
</UL>

<P><STRONG><a name="[76d]"></a>wlan_init_sta_info</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wlan_sta_info.o(i.wlan_init_sta_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_init_sta_info &rArr; os_init_timer &rArr; sys_timer_init &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_sta_struct
</UL>

<P><STRONG><a name="[6ca]"></a>IS_MCAST</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wlan_tx.o(i.IS_MCAST))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_construct_frame_pkt
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_make_wlanhdr
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_attrib
</UL>

<P><STRONG><a name="[6c8]"></a>set_qos_acm</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wlan_tx.o(i.set_qos_acm))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = set_qos_acm &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
</UL>

<P><STRONG><a name="[79a]"></a>set_qos_info</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wlan_tx.o(i.set_qos_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_qos_info
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
</UL>

<P><STRONG><a name="[6c9]"></a>set_security_attrib</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, wlan_tx.o(i.set_security_attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = set_security_attrib &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_MCAST
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_attrib
</UL>

<P><STRONG><a name="[790]"></a>wlan_send_bcmc_frame</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, wlan_tx.o(i.wlan_send_bcmc_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = wlan_send_bcmc_frame &rArr; wlan_xmit_bcmc_frame &rArr; wlan_release_xmitframe &rArr; wlan_release_pktbuf &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_frame
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit_bcmc_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_queued_frame
</UL>

<P><STRONG><a name="[5fd]"></a>support_rate_match</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wlan_utility.o(i.support_rate_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = support_rate_match
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_matched_rate
</UL>

<P><STRONG><a name="[66b]"></a>os_cancel_timer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_api.o(i.os_cancel_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = os_cancel_timer &rArr; sys_timer_stop &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_stop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_del_timer
</UL>

<P><STRONG><a name="[670]"></a>queue_work</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_api.o(i.queue_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = queue_work &rArr; sys_task_post &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_post
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_work
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_destroy_workqueue
</UL>

<P><STRONG><a name="[ee]"></a>wq_worker_thread</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_api.o(i.wq_worker_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wq_worker_thread &rArr; sys_task_wait &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ms_sleep
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task_wait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sema_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_api.o(i.os_create_workqueue)
</UL>
<P><STRONG><a name="[654]"></a>set_security_cipher</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wlan_ioctl.o(i.set_security_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_security_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_enc_algo_e
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl_set_security_info
</UL>

<P><STRONG><a name="[7a5]"></a>ID2STR</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wpas_psk.o(i.ID2STR))
<BR><BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[517]"></a>_atoi</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, wpas_psk.o(i._atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _atoi &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_val
</UL>

<P><STRONG><a name="[529]"></a>ap_eapol_key_recved</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, wpas_psk.o(i.ap_eapol_key_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 3040<LI>Call Chain = ap_eapol_key_recved &rArr; ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[52c]"></a>ap_group_msg_handle</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, wpas_psk.o(i.ap_group_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = ap_group_msg_handle &rArr; check_mic &rArr; omac1_aes_128 &rArr; omac1_aes_128_vector &rArr; omac1_aes_vector &rArr; aes_encrypt_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_key_recved
</UL>

<P><STRONG><a name="[52b]"></a>ap_pairwise_msg_handle</STRONG> (Thumb, 1642 bytes, Stack size 80 bytes, wpas_psk.o(i.ap_pairwise_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = ap_pairwise_msg_handle &rArr; start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octet_to_large_int
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrity_check_fail
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_large_int
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ptk
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_disconnect_sta
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_group_key_rekey
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_eapol_key_recved
</UL>

<P><STRONG><a name="[532]"></a>ap_send_eapol</STRONG> (Thumb, 1790 bytes, Stack size 432 bytes, wpas_psk.o(i.ap_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 2904<LI>Call Chain = ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_replay_counter
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_large_int
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_gtk
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_construct_eapol_basic
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eapol_key_iv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_send_timeout_callback
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_group_key_rekey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[6e3]"></a>bip_ipn_swap</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wpas_psk.o(i.bip_ipn_swap))
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[57e]"></a>construct_wpa_rsn_ie</STRONG> (Thumb, 774 bytes, Stack size 168 bytes, wpas_psk.o(i.construct_wpa_rsn_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = construct_wpa_rsn_ie &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
</UL>

<P><STRONG><a name="[5c8]"></a>get_array_val</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wpas_psk.o(i.get_array_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = get_array_val &rArr; _atoi &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_psk
</UL>

<P><STRONG><a name="[6a1]"></a>reset_sta_wpa_info</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, wpas_psk.o(i.reset_sta_wpa_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = reset_sta_wpa_info &rArr; wpa_ioctl_set_port &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[541]"></a>set_eapol_key_iv</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, wpas_psk.o(i.set_eapol_key_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_eapol_key_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_gtk
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eapol_handshake
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>

<P><STRONG><a name="[6df]"></a>sta_eapol_key_recved</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, wpas_psk.o(i.sta_eapol_key_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 2736<LI>Call Chain = sta_eapol_key_recved &rArr; sta_group_msg_handle &rArr; dec_gtk &rArr; AES_UnWRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_event_handler
</UL>

<P><STRONG><a name="[6e2]"></a>sta_group_msg_handle</STRONG> (Thumb, 956 bytes, Stack size 232 bytes, wpas_psk.o(i.sta_group_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712<LI>Call Chain = sta_group_msg_handle &rArr; dec_gtk &rArr; AES_UnWRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octet_to_large_int
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_igtk
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_igtk
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_remove_gtk
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_ipn_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_eapol_key_recved
</UL>

<P><STRONG><a name="[6e1]"></a>sta_pairwise_msg1_handle</STRONG> (Thumb, 484 bytes, Stack size 72 bytes, wpas_psk.o(i.sta_pairwise_msg1_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = sta_pairwise_msg1_handle &rArr; calc_ptk &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_array
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eapol_key_iv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_eapol_key_recved
</UL>

<P><STRONG><a name="[6e0]"></a>sta_pairwise_msg3_handle</STRONG> (Thumb, 1620 bytes, Stack size 224 bytes, wpas_psk.o(i.sta_pairwise_msg3_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 2704<LI>Call Chain = sta_pairwise_msg3_handle &rArr; dec_gtk &rArr; AES_UnWRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replay_counter_compare
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octet_to_large_int
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_gtk
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mic
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_igtk
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_gtk
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_ptk
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_set_port
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_send_eapol
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_ipn_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_eapol_key_recved
</UL>

<P><STRONG><a name="[6e8]"></a>sta_send_eapol</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, wpas_psk.o(i.sta_send_eapol))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = sta_send_eapol &rArr; wlan_xmit &rArr; wlan_xmit_frame &rArr; wlan_update_tim_map &rArr; wlan_sta_leave_sleep &rArr; wlan_send_beacon &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_pktbuf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_xmit
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_skb_pull
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pktbuf
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mic
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_construct_eapol
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_eapol_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_send_timeout_callback
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_mic_failure_proc
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg1_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[53c]"></a>start_group_key_rekey</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wpas_psk.o(i.start_group_key_rekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = start_group_key_rekey &rArr; ap_send_eapol &rArr; enc_gtk &rArr; AES_WRAP &rArr; hw_cryp_aes_ecb &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[530]"></a>wpa_ioctl_disconnect_sta</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, wpas_psk.o(i.wpa_ioctl_disconnect_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wpa_ioctl_disconnect_sta &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_send_timeout_callback
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_mic_failure_proc
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_group_msg_handle
</UL>

<P><STRONG><a name="[6e7]"></a>wpa_ioctl_remove_gtk</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wpas_psk.o(i.wpa_ioctl_remove_gtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_ioctl_remove_gtk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[6e5]"></a>wpa_ioctl_remove_igtk</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wpas_psk.o(i.wpa_ioctl_remove_igtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wpa_ioctl_remove_igtk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
</UL>

<P><STRONG><a name="[6a2]"></a>wpa_ioctl_remove_ptk</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, wpas_psk.o(i.wpa_ioctl_remove_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wpa_ioctl_remove_ptk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_mic_failure_proc
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sta_wpa_info
</UL>

<P><STRONG><a name="[5f5]"></a>wpa_ioctl_set_ie</STRONG> (Thumb, 68 bytes, Stack size 160 bytes, wpas_psk.o(i.wpa_ioctl_set_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = wpa_ioctl_set_ie &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wpa3_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_psk_init
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_pmksa_cache
</UL>

<P><STRONG><a name="[53b]"></a>wpa_ioctl_set_port</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, wpas_psk.o(i.wpa_ioctl_set_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = wpa_ioctl_set_port &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_group_msg_handle
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sta_wpa_info
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[53a]"></a>wpa_ioctl_set_ptk</STRONG> (Thumb, 244 bytes, Stack size 144 bytes, wpas_psk.o(i.wpa_ioctl_set_ptk))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wpa_ioctl_set_ptk &rArr; wpa_ioctl_process &rArr; wlan_set_80211_disassociate &rArr;  wlan_disconnect_indicate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ioctl_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_pairwise_msg3_handle
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_pairwise_msg_handle
</UL>

<P><STRONG><a name="[56f]"></a>connect_failed_proc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wlan_connect.o(i.connect_failed_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = connect_failed_proc &rArr; wifi_indicate_connect &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_security
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_indicate_connect
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_cancel_timer_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
</UL>

<P><STRONG><a name="[572]"></a>connect_ok_proc</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, wlan_connect.o(i.connect_ok_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = connect_ok_proc &rArr; wlan_connect_indicate &rArr; ioctl_set_wep_enc &rArr; wlan_set_80211_add_wep &rArr; wlan_set_key &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_search_sta
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_indicate
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_timer
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sta_info
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_wireless_mode
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht_on_assoc_rsp
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_max_rate_index
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra_start
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_protection
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_ht_cap
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_network
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_stainfo
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connected_bss_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_result_proc
</UL>

<P><STRONG><a name="[65e]"></a>is_desired_network</STRONG> (Thumb, 58 bytes, Stack size 272 bytes, wlan_connect.o(i.is_desired_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = is_desired_network &rArr; wlan_get_wps_ie &rArr; os_memcmp &rArr; sys_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wps_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect_to_bss
</UL>

<P><STRONG><a name="[57b]"></a>set_connected_bss_cfg</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wlan_connect.o(i.set_connected_bss_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = set_connected_bss_cfg &rArr; wlan_add_ba_proc &rArr; wlan_add_ba_req &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_ba_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ok_proc
</UL>

<P><STRONG><a name="[770]"></a>wlan_join_collect_info</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, wlan_connect.o(i.wlan_join_collect_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_join_collect_info &rArr; wlan_restruct_ht_cap &rArr; wlan_set_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restruct_wmm_ie
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restruct_ht_cap
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_join_bss
</UL>

<P><STRONG><a name="[62a]"></a>set_tx_data_retry</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_desc.o(i.set_tx_data_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_tx_data_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_desc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_beacon_tx_desc
</UL>

<P><STRONG><a name="[629]"></a>set_tx_desc_rate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_desc.o(i.set_tx_desc_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_tx_desc_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_desc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_beacon_tx_desc
</UL>

<P><STRONG><a name="[630]"></a>set_tx_desc_security</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, hal_desc.o(i.set_tx_desc_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = set_tx_desc_security &rArr; get_sw_node_entry &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_hw_enc_mapping
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_node_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_tx_desc
</UL>

<P><STRONG><a name="[611]"></a>power_level_ctrl</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, hal_efuse.o(i.power_level_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = power_level_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_efuse_info
</UL>

<P><STRONG><a name="[67b]"></a>construct_arp_response</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, hal_fw_intf.o(i.construct_arp_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = construct_arp_response
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_cpu_queue_packet
</UL>

<P><STRONG><a name="[6a4]"></a>bits_to_float</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_phy.o(i.bits_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
</UL>

<P><STRONG><a name="[62f]"></a>check_max_power_limit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_phy.o(i.check_max_power_limit))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_power_table
</UL>

<P><STRONG><a name="[5d5]"></a>dump_adc_mac_rx_bus</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, hal_phy.o(i.dump_adc_mac_rx_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dump_adc_mac_rx_bus &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_conf_trig
</UL>

<P><STRONG><a name="[5d6]"></a>dump_adc_pattern_match</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, hal_phy.o(i.dump_adc_pattern_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dump_adc_pattern_match &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wait_rx_buf_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rx_evm
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_conf_trig
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_psd
</UL>

<P><STRONG><a name="[5d8]"></a>dump_adc_rxhtsig</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, hal_phy.o(i.dump_adc_rxhtsig))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dump_adc_rxhtsig &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wait_rx_buf_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_conf_trig
</UL>

<P><STRONG><a name="[5d9]"></a>dump_adc_rxsig</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, hal_phy.o(i.dump_adc_rxsig))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dump_adc_rxsig &rArr; hal_wait_rx_buf_empty &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read8
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wait_rx_buf_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_conf_trig
</UL>

<P><STRONG><a name="[603]"></a>get_tx_calcomp_index</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hal_phy.o(i.get_tx_calcomp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_tx_calcomp_index
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_add_tx_power
</UL>

<P><STRONG><a name="[609]"></a>delete_from_sw_node</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_security.o(i.delete_from_sw_node))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_all_keys
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_del_pairwise_key
</UL>

<P><STRONG><a name="[5c4]"></a>delete_node_cache_entry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_security.o(i.delete_node_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = delete_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_all_keys
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_del_pairwise_key
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_del_default_or_grp_key
</UL>

<P><STRONG><a name="[62c]"></a>set_node_cache_entry</STRONG> (Thumb, 500 bytes, Stack size 88 bytes, hal_security.o(i.set_node_cache_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = set_node_cache_entry &rArr; wlan_write32 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write32
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read32
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_pairwise_key
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_default_or_grp_key
</UL>

<P><STRONG><a name="[639]"></a>get_sa</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, soc_rx.o(i.get_sa))
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_pkt_attrib
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_test_mode
</UL>

<P><STRONG><a name="[638]"></a>handle_rx_test_mode</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, soc_rx.o(i.handle_rx_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = handle_rx_test_mode &rArr; wlan_write16 &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write16
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_read16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write8
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memcmp
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sa
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_rx_tasklet (via Veneer)
</UL>

<P><STRONG><a name="[6d8]"></a>print_ratelimit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, soc_tx.o(i.print_ratelimit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_xframe (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_send_test_xframe
</UL>

<P><STRONG><a name="[4fa]"></a>F</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, wpas_crypto.o(i.F))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = F &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_hash
</UL>

<P><STRONG><a name="[ed]"></a>crypto_rand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpas_crypto.o(i.crypto_rand))
<BR>[Address Reference Count : 1]<UL><LI> wpas_crypto.o(i.crypto_ec_point_mul)
</UL>
<P><STRONG><a name="[5a6]"></a>ecp_add_mixed</STRONG> (Thumb, 850 bytes, Stack size 112 bytes, wpas_crypto.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi (via Veneer)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs (via Veneer)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi (via Veneer)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy (via Veneer)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi (via Veneer)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero (via Veneer)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_add
</UL>

<P><STRONG><a name="[5e5]"></a>ecp_double_jac</STRONG> (Thumb, 976 bytes, Stack size 80 bytes, wpas_crypto.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ecp_double_jac &rArr; ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi (via Veneer)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs (via Veneer)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l (via Veneer)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi (via Veneer)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy (via Veneer)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[5e3]"></a>ecp_modp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wpas_crypto.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi (via Veneer)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[5a5]"></a>ecp_normalize_jac</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, wpas_crypto.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecp_normalize_jac &rArr; ecp_modp
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi (via Veneer)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset (via Veneer)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int (via Veneer)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_add
</UL>

<P><STRONG><a name="[66a]"></a>gf_mulx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wpas_crypto.o(i.gf_mulx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf_mulx
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omac1_aes_vector
</UL>

<P><STRONG><a name="[550]"></a>i_PRF</STRONG> (Thumb, 150 bytes, Stack size 152 bytes, wpas_crypto.o(i.i_PRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = i_PRF &rArr; hmac_sha &rArr; SHAUpdate &rArr; SHSTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gtk
</UL>

<P><STRONG><a name="[642]"></a>inc_oct16_int</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wpas_crypto.o(i.inc_oct16_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inc_oct16_int
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_large_int
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_oct32_int
</UL>

<P><STRONG><a name="[5ba]"></a>mp_div_2d</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wpas_crypto.o(i.mp_div_2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mp_div_2d
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size (via Veneer)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r (via Veneer)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init (via Veneer)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free (via Veneer)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord
</UL>

<P><STRONG><a name="[69e]"></a>random_extract</STRONG> (Thumb, 100 bytes, Stack size 104 bytes, wpas_crypto.o(i.random_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hmac_sha1
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>

<P><STRONG><a name="[69f]"></a>random_mix_pool</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, wpas_crypto.o(i.random_mix_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
</UL>

<P><STRONG><a name="[555]"></a>wpa_min</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wpas_crypto.o(i.wpa_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_min
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ptk
</UL>

<P><STRONG><a name="[549]"></a>bin_clear_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wpas_sae.o(i.bin_clear_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = bin_clear_free &rArr; os_mfree &rArr; sys_mfree &rArr; vSysFree &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_clear_temp_data
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[5d2]"></a>const_time_select_bin</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, wpas_sae.o(i.const_time_select_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = const_time_select_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[5d3]"></a>const_time_select_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpas_sae.o(i.const_time_select_int))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
</UL>

<P><STRONG><a name="[5ce]"></a>dragonfly_get_rand_1_to_p_1</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wpas_sae.o(i.dragonfly_get_rand_1_to_p_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = dragonfly_get_rand_1_to_p_1 &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_sub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
</UL>

<P><STRONG><a name="[5cd]"></a>dragonfly_get_rand_2_to_r_1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wpas_sae.o(i.dragonfly_get_rand_2_to_r_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dragonfly_get_rand_2_to_r_1 &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_rand
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_zero
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_one
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
</UL>

<P><STRONG><a name="[6b0]"></a>sae_cn_confirm</STRONG> (Thumb, 106 bytes, Stack size 176 bytes, wpas_sae.o(i.sae_cn_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm_ecc
</UL>

<P><STRONG><a name="[6ac]"></a>sae_cn_confirm_ecc</STRONG> (Thumb, 90 bytes, Stack size 248 bytes, wpas_sae.o(i.sae_cn_confirm_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = sae_cn_confirm_ecc &rArr; sae_cn_confirm &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_cn_confirm
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_check_confirm
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_write_confirm
</UL>

<P><STRONG><a name="[6b5]"></a>sae_derive_commit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wpas_sae.o(i.sae_derive_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = sae_derive_commit &rArr; dragonfly_generate_scalar &rArr; dragonfly_get_rand_2_to_r_1 &rArr; crypto_bignum_rand &rArr; random_get_bytes &rArr; random_extract &rArr; hw_hmac_sha1 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_generate_scalar
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit_element_ecc
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_prepare_commit
</UL>

<P><STRONG><a name="[6b6]"></a>sae_derive_commit_element_ecc</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wpas_sae.o(i.sae_derive_commit_element_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = sae_derive_commit_element_ecc &rArr; crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_mul
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_invert
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_commit
</UL>

<P><STRONG><a name="[6b7]"></a>sae_derive_k_ecc</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wpas_sae.o(i.sae_derive_k_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sae_derive_k_ecc &rArr; crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_to_bin
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_mul
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_is_at_infinity
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_process_commit
</UL>

<P><STRONG><a name="[6b8]"></a>sae_derive_keys</STRONG> (Thumb, 254 bytes, Stack size 224 bytes, wpas_sae.o(i.sae_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = sae_derive_keys &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf_bits
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_mod
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_process_commit
</UL>

<P><STRONG><a name="[6b9]"></a>sae_derive_pwe_ecc</STRONG> (Thumb, 636 bytes, Stack size 400 bytes, wpas_sae.o(i.sae_derive_pwe_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = sae_derive_pwe_ecc &rArr; sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zmalloc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mfree
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_min_pwe_loop_iter
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_get_random_qr_qnr
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_test_pwd_seed_ecc
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const_time_select_bin
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_clear_free
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_solve_y_coord
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_init
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_prepare_commit
</UL>

<P><STRONG><a name="[6c0]"></a>sae_is_password_id_elem</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wpas_sae.o(i.sae_is_password_id_elem))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit_token
</UL>

<P><STRONG><a name="[6bf]"></a>sae_parse_commit_element_ecc</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, wpas_sae.o(i.sae_parse_commit_element_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = sae_parse_commit_element_ecc &rArr; crypto_ec_point_from_bin &rArr; crypto_ec_point_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_is_on_curve
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_from_bin
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_deinit
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_to_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>

<P><STRONG><a name="[6be]"></a>sae_parse_commit_scalar</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, wpas_sae.o(i.sae_parse_commit_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sae_parse_commit_scalar &rArr; crypto_bignum_init_set &rArr; crypto_bignum_init &rArr; os_zmalloc &rArr; sys_malloc &rArr; pvSysMalloc &rArr; vSysDefineHeapRegions &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_zero
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_is_one
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>

<P><STRONG><a name="[6bd]"></a>sae_parse_commit_token</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wpas_sae.o(i.sae_parse_commit_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = sae_parse_commit_token &rArr; sae_hex_dump &rArr; dump_array &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_is_password_id_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_parse_commit
</UL>

<P><STRONG><a name="[6bb]"></a>sae_test_pwd_seed_ecc</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, wpas_sae.o(i.sae_test_pwd_seed_ecc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = sae_test_pwd_seed_ecc &rArr; sha256_prf_bits &rArr; hmac_sha256_vector &rArr; hw_hmac_sha256 &rArr; sys_mutex_put &rArr; co_printf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_hex_dump
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dragonfly_is_quadratic_residue_blind
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const_time_select_int
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf_bits
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_prime_len_bits
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_ec_point_compute_y_sqr
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_init_set
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sae_derive_pwe_ecc
</UL>

<P><STRONG><a name="[4fd]"></a>SHSTransform</STRONG> (Thumb, 3998 bytes, Stack size 96 bytes, wpas_hmac.o(i.SHSTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SHSTransform
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAUpdate
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAFinal
</UL>

<P><STRONG><a name="[4fc]"></a>longReverse</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wpas_hmac.o(i.longReverse))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAUpdate
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHAFinal
</UL>

<P><STRONG><a name="[51f]"></a>rijndaelEncrypt</STRONG> (Thumb, 888 bytes, Stack size 36 bytes, aes-internal-enc.o(i.rijndaelEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rijndaelEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encryp
</UL>

<P><STRONG><a name="[7a3]"></a>md5_encode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpas_md5.o(i.md5_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = md5_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_final
</UL>

<P><STRONG><a name="[7a4]"></a>md5_transform</STRONG> (Thumb, 1682 bytes, Stack size 96 bytes, wpas_md5.o(i.md5_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = md5_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_md5_update
</UL>

<P><STRONG><a name="[518]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[502]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[51a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[519]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[ec]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[2a5]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[78]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2b3]"></a>_local_sscanf</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
