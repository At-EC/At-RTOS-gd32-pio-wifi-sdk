


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                           PUBLIC FUNCT
                       IONS
    4 00000000         ;*******************************************************
                       *************************************************
    5 00000000         
    6 00000000                 EXPORT           Mem_Copy
    7 00000000         
    8 00000000         
    9 00000000         ;*******************************************************
                       *************************************************
   10 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   11 00000000         ;*******************************************************
                       *************************************************
   12 00000000         
   13 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   14 00000000                 THUMB
   15 00000000                 REQUIRE8
   16 00000000                 PRESERVE8
   17 00000000         
   18 00000000         
   19 00000000         ;$PAGE
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;                                             Mem_Copy()
                       
   22 00000000         ;
   23 00000000         ; Description : Copy data octets from one buffer to anot
                       her buffer.
   24 00000000         ;
   25 00000000         ; Argument(s) : pdest       Pointer to destination memor
                       y buffer.
   26 00000000         ;
   27 00000000         ;               psrc        Pointer to source      memor
                       y buffer.
   28 00000000         ;
   29 00000000         ;               size        Number of data buffer octets
                        to copy.
   30 00000000         ;
   31 00000000         ; Return(s)   : none.
   32 00000000         ;
   33 00000000         ; Caller(s)   : Application.
   34 00000000         ;
   35 00000000         ; Note(s)     : (1) Null copies allowed (i.e. 0-octet si
                       ze).
   36 00000000         ;
   37 00000000         ;               (2) Memory buffers NOT checked for overl
                       apping.
   38 00000000         ;
   39 00000000         ;               (3) Modulo arithmetic is used to determi
                       ne whether a memory buffer starts on a 'CPU_ALIGN'
   40 00000000         ;                   address boundary.
   41 00000000         ;
   42 00000000         ;               (4) ARM Cortex-M3 processors use a subse
                       t of the ARM Thumb-2 instruction set which does



ARM Macro Assembler    Page 2 


   43 00000000         ;                   NOT support 16-bit conditional branc
                       h instructions but ONLY supports 8-bit conditional
   44 00000000         ;                   branch instructions.
   45 00000000         ;
   46 00000000         ;                   Therefore, branches exceeding 8-bit,
                        signed, relative offsets :
   47 00000000         ;
   48 00000000         ;                   (a) CANNOT be implemented with     c
                       onditional branches; but ...
   49 00000000         ;                   (b) MUST   be implemented with non-c
                       onditional branches.
   50 00000000         ;*******************************************************
                       *************************************************
   51 00000000         
   52 00000000         ; void  Mem_Copy (void        *pdest,       ;  ==>  R0
   53 00000000         ;                 void        *psrc,        ;  ==>  R1
   54 00000000         ;                 CPU_SIZE_T   size)        ;  ==>  R2
   55 00000000         
   56 00000000         Mem_Copy
   57 00000000 2800            CMP              R0, #0
   58 00000002 D100            BNE              Mem_Copy_1
   59 00000004 4770            BX               LR          ; return if pdest =
                                                            = NULL
   60 00000006         
   61 00000006         Mem_Copy_1
   62 00000006 2900            CMP              R1, #0
   63 00000008 D100            BNE              Mem_Copy_2
   64 0000000A 4770            BX               LR          ; return if psrc  =
                                                            = NULL
   65 0000000C         
   66 0000000C         Mem_Copy_2
   67 0000000C 2A00            CMP              R2, #0
   68 0000000E D100            BNE              Mem_Copy_3
   69 00000010 4770            BX               LR          ; return if size  =
                                                            = 0
   70 00000012         
   71 00000012         Mem_Copy_3
   72 00000012 E92D 1FF8       STMFD            SP!, {R3-R12} ; save registers 
                                                            on stack
   73 00000016         
   74 00000016         
   75 00000016         ;$PAGE
   76 00000016         Chk_Align_32                         ; check if both des
                                                            t & src 32-bit alig
                                                            ned
   77 00000016 F000 0303       AND              R3, R0, #0x03
   78 0000001A F001 0403       AND              R4, R1, #0x03
   79 0000001E 42A3            CMP              R3, R4
   80 00000020 D111            BNE              Chk_Align_16 ; not 32-bit align
                                                            ed, check for 16-bi
                                                            t alignment
   81 00000022         
   82 00000022 F1C3 0304       RSB              R3, R3, #0x04 ; compute 1-2-3 p
                                                            re-copy bytes (to a
                                                            lign to the next 32
                                                            -bit boundary)
   83 00000026 F003 0303       AND              R3, R3, #0x03
   84 0000002A         
   85 0000002A         Pre_Copy_1



ARM Macro Assembler    Page 3 


   86 0000002A 2B01            CMP              R3, #1      ; copy 1-2-3 bytes 
                                                            (to align to the ne
                                                            xt 32-bit boundary)
                                                            
   87 0000002C D31D            BCC              Copy_32_1   ; start real 32-bit
                                                             copy
   88 0000002E 2A01            CMP              R2, #1      ; check if any more
                                                             data to copy
   89 00000030 D200            BCS              Pre_Copy_1_Cont
   90 00000032 E0F2            B                Mem_Copy_END ;           no mor
                                                            e data to copy (see
                                                             Note #4b)
   91 00000034         
   92 00000034         Pre_Copy_1_Cont
   93 00000034 F811 4B01       LDRB             R4, [R1], #1
   94 00000038 F800 4B01       STRB             R4, [R0], #1
   95 0000003C F1A3 0301       SUB              R3, R3, #1
   96 00000040 F1A2 0201       SUB              R2, R2, #1
   97 00000044 E7F1            B                Pre_Copy_1
   98 00000046         
   99 00000046         
  100 00000046         Chk_Align_16                         ; check if both des
                                                            t & src 16-bit alig
                                                            ned
  101 00000046 F000 0301       AND              R3, R0, #0x01
  102 0000004A F001 0401       AND              R4, R1, #0x01
  103 0000004E 42A3            CMP              R3, R4
  104 00000050 D000            BEQ              Pre_Copy_2
  105 00000052 E094            B                Copy_08_1   ; not 16-bit aligne
                                                            d, start 8-bit copy
                                                             (see Note #4b)
  106 00000054         
  107 00000054         Pre_Copy_2
  108 00000054 2B01            CMP              R3, #1      ; copy 1 byte (to a
                                                            lign to the next 16
                                                            -bit boundary)
  109 00000056 D344            BCC              Copy_16_1   ; start real 16-bit
                                                             copy
  110 00000058         
  111 00000058 F811 4B01       LDRB             R4, [R1], #1
  112 0000005C F800 4B01       STRB             R4, [R0], #1
  113 00000060 F1A3 0301       SUB              R3, R3, #1
  114 00000064 F1A2 0201       SUB              R2, R2, #1
  115 00000068 E7F4            B                Pre_Copy_2
  116 0000006A         
  117 0000006A         
  118 0000006A         Copy_32_1
  119 0000006A F5B2 7FB4       CMP              R2, #(04*10*09) ; Copy 9 chunks
                                                             of 10 32-bit words
                                                             (360 octets per lo
                                                            op)
  120 0000006E D326            BCC              Copy_32_2
  121 00000070 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  122 00000074 E8A0 1FF8       STMIA            R0!, {R3-R12}
  123 00000078 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  124 0000007C E8A0 1FF8       STMIA            R0!, {R3-R12}
  125 00000080 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  126 00000084 E8A0 1FF8       STMIA            R0!, {R3-R12}
  127 00000088 E8B1 1FF8       LDMIA            R1!, {R3-R12}



ARM Macro Assembler    Page 4 


  128 0000008C E8A0 1FF8       STMIA            R0!, {R3-R12}
  129 00000090 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  130 00000094 E8A0 1FF8       STMIA            R0!, {R3-R12}
  131 00000098 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  132 0000009C E8A0 1FF8       STMIA            R0!, {R3-R12}
  133 000000A0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  134 000000A4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  135 000000A8 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  136 000000AC E8A0 1FF8       STMIA            R0!, {R3-R12}
  137 000000B0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  138 000000B4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  139 000000B8 F5A2 72B4       SUB              R2, R2, #(04*10*09)
  140 000000BC E7D5            B                Copy_32_1
  141 000000BE         
  142 000000BE         Copy_32_2
  143 000000BE 2A28            CMP              R2, #(04*10*01) ; Copy chunks o
                                                            f 10 32-bit words (
                                                            40 octets per loop)
                                                            
  144 000000C0 D306            BCC              Copy_32_3
  145 000000C2 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  146 000000C6 E8A0 1FF8       STMIA            R0!, {R3-R12}
  147 000000CA F1A2 0228       SUB              R2, R2, #(04*10*01)
  148 000000CE E7F6            B                Copy_32_2
  149 000000D0         
  150 000000D0         Copy_32_3
  151 000000D0 2A04            CMP              R2, #(04*01*01) ; Copy remainin
                                                            g 32-bit words
  152 000000D2 D306            BCC              Copy_16_1
  153 000000D4 F851 3B04       LDR              R3, [R1], #4
  154 000000D8 F840 3B04       STR              R3, [R0], #4
  155 000000DC F1A2 0204       SUB              R2, R2, #(04*01*01)
  156 000000E0 E7F6            B                Copy_32_3
  157 000000E2         
  158 000000E2         ;$PAGE
  159 000000E2         Copy_16_1
  160 000000E2 2A20            CMP              R2, #(02*01*16) ; Copy chunks o
                                                            f 16 16-bit words (
                                                            32 bytes per loop)
  161 000000E4 D342            BCC              Copy_16_2
  162 000000E6 F831 3B02       LDRH             R3, [R1], #2
  163 000000EA F820 3B02       STRH             R3, [R0], #2
  164 000000EE F831 3B02       LDRH             R3, [R1], #2
  165 000000F2 F820 3B02       STRH             R3, [R0], #2
  166 000000F6 F831 3B02       LDRH             R3, [R1], #2
  167 000000FA F820 3B02       STRH             R3, [R0], #2
  168 000000FE F831 3B02       LDRH             R3, [R1], #2
  169 00000102 F820 3B02       STRH             R3, [R0], #2
  170 00000106 F831 3B02       LDRH             R3, [R1], #2
  171 0000010A F820 3B02       STRH             R3, [R0], #2
  172 0000010E F831 3B02       LDRH             R3, [R1], #2
  173 00000112 F820 3B02       STRH             R3, [R0], #2
  174 00000116 F831 3B02       LDRH             R3, [R1], #2
  175 0000011A F820 3B02       STRH             R3, [R0], #2
  176 0000011E F831 3B02       LDRH             R3, [R1], #2
  177 00000122 F820 3B02       STRH             R3, [R0], #2
  178 00000126 F831 3B02       LDRH             R3, [R1], #2
  179 0000012A F820 3B02       STRH             R3, [R0], #2
  180 0000012E F831 3B02       LDRH             R3, [R1], #2



ARM Macro Assembler    Page 5 


  181 00000132 F820 3B02       STRH             R3, [R0], #2
  182 00000136 F831 3B02       LDRH             R3, [R1], #2
  183 0000013A F820 3B02       STRH             R3, [R0], #2
  184 0000013E F831 3B02       LDRH             R3, [R1], #2
  185 00000142 F820 3B02       STRH             R3, [R0], #2
  186 00000146 F831 3B02       LDRH             R3, [R1], #2
  187 0000014A F820 3B02       STRH             R3, [R0], #2
  188 0000014E F831 3B02       LDRH             R3, [R1], #2
  189 00000152 F820 3B02       STRH             R3, [R0], #2
  190 00000156 F831 3B02       LDRH             R3, [R1], #2
  191 0000015A F820 3B02       STRH             R3, [R0], #2
  192 0000015E F831 3B02       LDRH             R3, [R1], #2
  193 00000162 F820 3B02       STRH             R3, [R0], #2
  194 00000166 F1A2 0220       SUB              R2, R2, #(02*01*16)
  195 0000016A E7BA            B                Copy_16_1
  196 0000016C         
  197 0000016C         Copy_16_2
  198 0000016C 2A02            CMP              R2, #(02*01*01) ; Copy remainin
                                                            g 16-bit words
  199 0000016E D306            BCC              Copy_08_1
  200 00000170 F831 3B02       LDRH             R3, [R1], #2
  201 00000174 F820 3B02       STRH             R3, [R0], #2
  202 00000178 F1A2 0202       SUB              R2, R2, #(02*01*01)
  203 0000017C E7F6            B                Copy_16_2
  204 0000017E         
  205 0000017E         ;$PAGE
  206 0000017E         Copy_08_1
  207 0000017E 2A10            CMP              R2, #(01*01*16) ; Copy chunks o
                                                            f 16 8-bit words (1
                                                            6 bytes per loop)
  208 00000180 D342            BCC              Copy_08_2
  209 00000182 F811 3B01       LDRB             R3, [R1], #1
  210 00000186 F800 3B01       STRB             R3, [R0], #1
  211 0000018A F811 3B01       LDRB             R3, [R1], #1
  212 0000018E F800 3B01       STRB             R3, [R0], #1
  213 00000192 F811 3B01       LDRB             R3, [R1], #1
  214 00000196 F800 3B01       STRB             R3, [R0], #1
  215 0000019A F811 3B01       LDRB             R3, [R1], #1
  216 0000019E F800 3B01       STRB             R3, [R0], #1
  217 000001A2 F811 3B01       LDRB             R3, [R1], #1
  218 000001A6 F800 3B01       STRB             R3, [R0], #1
  219 000001AA F811 3B01       LDRB             R3, [R1], #1
  220 000001AE F800 3B01       STRB             R3, [R0], #1
  221 000001B2 F811 3B01       LDRB             R3, [R1], #1
  222 000001B6 F800 3B01       STRB             R3, [R0], #1
  223 000001BA F811 3B01       LDRB             R3, [R1], #1
  224 000001BE F800 3B01       STRB             R3, [R0], #1
  225 000001C2 F811 3B01       LDRB             R3, [R1], #1
  226 000001C6 F800 3B01       STRB             R3, [R0], #1
  227 000001CA F811 3B01       LDRB             R3, [R1], #1
  228 000001CE F800 3B01       STRB             R3, [R0], #1
  229 000001D2 F811 3B01       LDRB             R3, [R1], #1
  230 000001D6 F800 3B01       STRB             R3, [R0], #1
  231 000001DA F811 3B01       LDRB             R3, [R1], #1
  232 000001DE F800 3B01       STRB             R3, [R0], #1
  233 000001E2 F811 3B01       LDRB             R3, [R1], #1
  234 000001E6 F800 3B01       STRB             R3, [R0], #1
  235 000001EA F811 3B01       LDRB             R3, [R1], #1
  236 000001EE F800 3B01       STRB             R3, [R0], #1



ARM Macro Assembler    Page 6 


  237 000001F2 F811 3B01       LDRB             R3, [R1], #1
  238 000001F6 F800 3B01       STRB             R3, [R0], #1
  239 000001FA F811 3B01       LDRB             R3, [R1], #1
  240 000001FE F800 3B01       STRB             R3, [R0], #1
  241 00000202 F1A2 0210       SUB              R2, R2, #(01*01*16)
  242 00000206 E7BA            B                Copy_08_1
  243 00000208         
  244 00000208         Copy_08_2
  245 00000208 2A01            CMP              R2, #(01*01*01) ; Copy remainin
                                                            g 8-bit words
  246 0000020A D306            BCC              Mem_Copy_END
  247 0000020C F811 3B01       LDRB             R3, [R1], #1
  248 00000210 F800 3B01       STRB             R3, [R0], #1
  249 00000214 F1A2 0201       SUB              R2, R2, #(01*01*01)
  250 00000218 E7F6            B                Copy_08_2
  251 0000021A         
  252 0000021A         
  253 0000021A         Mem_Copy_END
  254 0000021A E8BD 1FF8       LDMFD            SP!, {R3-R12} ; restore registe
                                                            rs from stack
  255 0000021E 4770            BX               LR          ; return
  256 00000220         
  257 00000220         
  258 00000220                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M33 --fpu=FPv5-S
P --depend=.\wifi_iot\freertos\portasm_1.d -o.\wifi_iot\freertos\portasm_1.o -I
.\RTE\_Project_Freertos -IC:\Users\Administrator\AppData\Local\Arm\Packs\ARM\CM
SIS\5.9.0\CMSIS\Core\Include -IC:\Users\Administrator\AppData\Local\Arm\Packs\G
igaDevice\GD32W51x_DFP\1.0.3\Device\Include --predefine="__MICROLIB SETA 1" --p
redefine="__UVISION_VERSION SETA 527" --predefine="_RTE_ SETA 1" --list=.\wifi_
iot\freertos\list\portasm.lst ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\porta
ble\Keil\ARM_CM33_NTZ\portasm.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 13 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      None
Comment: .text unused
Chk_Align_16 00000046

Symbol: Chk_Align_16
   Definitions
      At line 100 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 80 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
Comment: Chk_Align_16 used once
Chk_Align_32 00000016

Symbol: Chk_Align_32
   Definitions
      At line 76 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      None
Comment: Chk_Align_32 unused
Copy_08_1 0000017E

Symbol: Copy_08_1
   Definitions
      At line 206 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 105 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 199 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 242 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_08_2 00000208

Symbol: Copy_08_2
   Definitions
      At line 244 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 208 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 250 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_16_1 000000E2

Symbol: Copy_16_1
   Definitions
      At line 159 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 109 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 152 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 195 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_16_2 0000016C

Symbol: Copy_16_2
   Definitions
      At line 197 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 161 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 203 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_32_1 0000006A

Symbol: Copy_32_1
   Definitions
      At line 118 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 87 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
      At line 140 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_32_2 000000BE

Symbol: Copy_32_2
   Definitions
      At line 142 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 120 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 148 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Copy_32_3 000000D0

Symbol: Copy_32_3
   Definitions
      At line 150 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 144 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 156 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Mem_Copy 00000000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: Mem_Copy
   Definitions
      At line 56 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 6 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\Ke
il\ARM_CM33_NTZ\portasm.asm
Comment: Mem_Copy used once
Mem_Copy_1 00000006

Symbol: Mem_Copy_1
   Definitions
      At line 61 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 58 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
Comment: Mem_Copy_1 used once
Mem_Copy_2 0000000C

Symbol: Mem_Copy_2
   Definitions
      At line 66 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 63 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
Comment: Mem_Copy_2 used once
Mem_Copy_3 00000012

Symbol: Mem_Copy_3
   Definitions
      At line 71 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 68 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
Comment: Mem_Copy_3 used once
Mem_Copy_END 0000021A

Symbol: Mem_Copy_END
   Definitions
      At line 253 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 90 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
      At line 246 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

Pre_Copy_1 0000002A

Symbol: Pre_Copy_1
   Definitions
      At line 85 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 97 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: Pre_Copy_1 used once
Pre_Copy_1_Cont 00000034

Symbol: Pre_Copy_1_Cont
   Definitions
      At line 92 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 89 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\K
eil\ARM_CM33_NTZ\portasm.asm
Comment: Pre_Copy_1_Cont used once
Pre_Copy_2 00000054

Symbol: Pre_Copy_2
   Definitions
      At line 107 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
   Uses
      At line 104 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm
      At line 115 in file ..\..\..\WIFI_IOT\os\FreeRTOSv10.3.1\Source\portable\
Keil\ARM_CM33_NTZ\portasm.asm

18 symbols
352 symbols in table
