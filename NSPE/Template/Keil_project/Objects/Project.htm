<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6090000: Last Updated: Wed Jun 30 16:02:02 2021
<BR><P>
<H3>Maximum Stack Usage =       7376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32w51x_it.o(.text.BusFault_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4a]">CAU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[49]">DCI_IRHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[16]">DMA0_Channel0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[17]">DMA0_Channel1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel6_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel7_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[40]">DMA1_Channel2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[41]">DMA1_Channel3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[42]">DMA1_Channel4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[43]">DMA1_Channel5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[44]">DMA1_Channel6_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[45]">DMA1_Channel7_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from gd32w51x_it.o(.text.DebugMon_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[52]">EFUSE_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[33]">EXTI10_15_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[22]">EXTI5_9_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[f]">FMC_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[58]">FMC_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4c]">FPU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4b]">HAU_TRNG_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4d]">HPDF_INT0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4e]">HPDF_INT1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32w51x_it.o(.text.HardFault_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2b]">I2C0_ER_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2a]">I2C0_EV_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3a]">I2C0_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[56]">ICACHE_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[c]">LVD_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32w51x_it.o(.text.MemManage_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32w51x_it.o(.text.NMI_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[54]">PKCAU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[35]">PVM_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from gd32w51x_it.o(.text.PendSV_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[53]">QSPI_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[59]">QSPI_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[10]">RCU_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[21]">RTC_Alarm_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[38]">SDIO_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2e]">SPI0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from gd32w51x_it.o(.text.SVC_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from gd32w51x_it.o(.text.SysTick_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_gd32w51x.o(.text.SystemInit) referenced from startup_gd32w51x.o(.text)
 <LI><a href="#[d]">TAMPER_STAMP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[1f]">TAMP_STAMP_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[23]">TIMER0_BRK_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[25]">TIMER0_CMT_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[26]">TIMER0_Channel_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[24]">TIMER0_UP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[36]">TIMER15_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[37]">TIMER16_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[27]">TIMER1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[28]">TIMER2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[39]">TIMER4_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3d]">TIMER5_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[55]">TSI_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[57]">TZIAC_S_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[30]">USART0_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3b]">USART0_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[3c]">USART2_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[47]">USBFS_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[48]">USBFS_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32w51x_it.o(.text.UsageFault_Handler) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[51]">WLAN_Cmn_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[4f]">WLAN_Rx_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[50]">WLAN_Tx_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[46]">WLAN_WKUP_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[b]">WWDGT_IRQHandler</a> from startup_gd32w51x.o(.text) referenced from startup_gd32w51x.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32w51x.o(.text)
 <LI><a href="#[5d]">fputc</a> from mbl_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5a]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ea]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[eb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DCI_IRHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EFUSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FMC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>HAU_TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>HPDF_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HPDF_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PKCAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QSPI_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_Alarm_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TZIAC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WLAN_Cmn_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WLAN_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WLAN_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>WLAN_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32w51x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[80]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[77]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HardFault_Handler &rArr; HardFault_Handler_c &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HardFault_Handler_c</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gd32w51x_it.o(.text.HardFault_Handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HardFault_Handler_c &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32w51x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_gd32w51x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_180m_40m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32w51x_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32w51x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>delay_decrement</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9b]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[83]"></a>disk_ioctl</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[93]"></a>disk_read</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disk_read &rArr; flash_read_indirect &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[c7]"></a>disk_status</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, diskio.o(.text.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[86]"></a>disk_write</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672<LI>Call Chain = disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[96]"></a>f_close</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>f_mkfs</STRONG> (Thumb, 2484 bytes, Stack size 232 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = f_mkfs &rArr; create_partition &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>f_mount</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976<LI>Call Chain = f_mount &rArr; mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>f_open</STRONG> (Thumb, 908 bytes, Stack size 640 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 5640<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>f_read</STRONG> (Thumb, 668 bytes, Stack size 104 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>f_sync</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[a6]"></a>f_write</STRONG> (Thumb, 784 bytes, Stack size 104 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>ff_oem2uni</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[81]"></a>ff_uni2oem</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[7a]"></a>ff_wtoupper</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[a8]"></a>flash_cache_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mbl_flash.o(.text.flash_cache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_cache_disable &rArr; icache_disable &rArr; icache_remap_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
</UL>

<P><STRONG><a name="[aa]"></a>flash_cache_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mbl_flash.o(.text.flash_cache_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_cache_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
</UL>

<P><STRONG><a name="[ac]"></a>flash_erase</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, mbl_flash.o(.text.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = flash_erase &rArr; qspi_flash_erase_sector &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase_sector
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_size
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_data
</UL>

<P><STRONG><a name="[ad]"></a>flash_erase_size</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mbl_flash.o(.text.flash_erase_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_erase_size
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[b5]"></a>flash_read</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, mbl_flash.o(.text.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_read &rArr; is_valid_flash_offset &rArr; flash_total_size
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
</UL>

<P><STRONG><a name="[94]"></a>flash_read_indirect</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, mbl_flash.o(.text.flash_read_indirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = flash_read_indirect &rArr; qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_flash_cache_enabled
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[b8]"></a>flash_total_size</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mbl_flash.o(.text.flash_total_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_total_size
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
</UL>

<P><STRONG><a name="[b9]"></a>flash_write</STRONG> (Thumb, 598 bytes, Stack size 120 bytes, mbl_flash.o(.text.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
</UL>

<P><STRONG><a name="[bc]"></a>flash_write_fast</STRONG> (Thumb, 580 bytes, Stack size 104 bytes, mbl_flash.o(.text.flash_write_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_continuous_program
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_flash_offset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sip_flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_data
</UL>

<P><STRONG><a name="[bd]"></a>fmc_continuous_program</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, gd32w51x_fmc.o(.text.fmc_continuous_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fmc_continuous_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
</UL>

<P><STRONG><a name="[b1]"></a>fmc_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32w51x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[b3]"></a>fmc_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[b2]"></a>fmc_page_erase</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gd32w51x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[b0]"></a>fmc_unlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32w51x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[ba]"></a>fmc_word_program</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gd32w51x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[5d]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mbl_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fputc &rArr; uart_putc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[95]"></a>fs_write_data</STRONG> (Thumb, 522 bytes, Stack size 4160 bytes, mbl_flash.o(.text.fs_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608<LI>Call Chain = fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[d3]"></a>gpio_af_set</STRONG> (Thumb, 224 bytes, Stack size 44 bytes, gd32w51x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[d4]"></a>gpio_mode_set</STRONG> (Thumb, 154 bytes, Stack size 60 bytes, gd32w51x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[d5]"></a>gpio_output_options_set</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, gd32w51x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[a9]"></a>icache_disable</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gd32w51x_icache.o(.text.icache_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icache_disable &rArr; icache_remap_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_remap_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_monitor_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_monitor_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_disable
</UL>

<P><STRONG><a name="[ab]"></a>icache_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32w51x_icache.o(.text.icache_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_enable
</UL>

<P><STRONG><a name="[c4]"></a>icache_monitor_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32w51x_icache.o(.text.icache_monitor_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icache_monitor_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
</UL>

<P><STRONG><a name="[c3]"></a>icache_monitor_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32w51x_icache.o(.text.icache_monitor_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icache_monitor_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
</UL>

<P><STRONG><a name="[c2]"></a>icache_remap_disable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gd32w51x_icache.o(.text.icache_remap_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icache_remap_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
</UL>

<P><STRONG><a name="[b6]"></a>is_flash_cache_enabled</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, mbl_flash.o(.text.is_flash_cache_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_flash_cache_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
</UL>

<P><STRONG><a name="[af]"></a>is_sip_flash</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mbl_flash.o(.text.is_sip_flash))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_total_size
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[ae]"></a>is_valid_flash_offset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mbl_flash.o(.text.is_valid_flash_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_valid_flash_offset &rArr; flash_total_size
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_total_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[c5]"></a>log_uart_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbl_uart.o(.text.log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = log_uart_init &rArr; uart_config &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 364 bytes, Stack size 1736 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 7376<LI>Call Chain = main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c8]"></a>qspi_autopolling</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32w51x_qspi.o(.text.qspi_autopolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_autopolling_ready
</UL>

<P><STRONG><a name="[ca]"></a>qspi_command</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gd32w51x_qspi.o(.text.qspi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase_sector
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
</UL>

<P><STRONG><a name="[b4]"></a>qspi_flash_erase_sector</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, mbl_qspi_flash.o(.text.qspi_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = qspi_flash_erase_sector &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_autopolling_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[bb]"></a>qspi_flash_program_page</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, mbl_qspi_flash.o(.text.qspi_flash_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_transmit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_autopolling_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_fast
</UL>

<P><STRONG><a name="[b7]"></a>qspi_flash_read</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, mbl_qspi_flash.o(.text.qspi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = qspi_flash_read &rArr; qspi_command &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_indirect
</UL>

<P><STRONG><a name="[ce]"></a>qspi_receive</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gd32w51x_qspi.o(.text.qspi_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qspi_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_read
</UL>

<P><STRONG><a name="[cd]"></a>qspi_transmit</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, gd32w51x_qspi.o(.text.qspi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = qspi_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
</UL>

<P><STRONG><a name="[dc]"></a>rcu_clock_freq_get</STRONG> (Thumb, 716 bytes, Stack size 80 bytes, gd32w51x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[d2]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32w51x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[de]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[dd]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32w51x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[73]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32w51x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_config &rArr; system_clock_180m_40m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_180m_40m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>uart_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, mbl_uart.o(.text.uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_config &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[c0]"></a>uart_putc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mbl_uart.o(.text.uart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_putc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[d7]"></a>usart_baudrate_set</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, gd32w51x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[db]"></a>usart_data_transmit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gd32w51x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[d6]"></a>usart_deinit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gd32w51x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[d9]"></a>usart_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32w51x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[da]"></a>usart_flag_get</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, gd32w51x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[d8]"></a>usart_transmit_config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gd32w51x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[df]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f7]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f9]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[71]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_continuous_program
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cf]"></a>system_clock_180m_40m_hxtal</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, system_gd32w51x.o(.text.system_clock_180m_40m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clock_180m_40m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[be]"></a>fmc_ready_wait</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gd32w51x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_continuous_program
</UL>

<P><STRONG><a name="[bf]"></a>fmc_state_get</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, gd32w51x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[c9]"></a>qspi_config</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, gd32w51x_qspi.o(.text.qspi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = qspi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>

<P><STRONG><a name="[cb]"></a>qspi_flash_autopolling_ready</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, mbl_qspi_flash.o(.text.qspi_flash_autopolling_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = qspi_flash_autopolling_ready &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase_sector
</UL>

<P><STRONG><a name="[cc]"></a>qspi_flash_write_enable</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, mbl_qspi_flash.o(.text.qspi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_command
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_autopolling
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_program_page
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase_sector
</UL>

<P><STRONG><a name="[74]"></a>check_fs</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[8c]"></a>clst2sect</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, ff.o(.text.clst2sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[79]"></a>cmp_lfn</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, ff.o(.text.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[7b]"></a>create_chain</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[7e]"></a>create_name</STRONG> (Thumb, 1186 bytes, Stack size 72 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[82]"></a>create_partition</STRONG> (Thumb, 616 bytes, Stack size 96 bytes, ff.o(.text.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 4768<LI>Call Chain = create_partition &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[c1]"></a>dbc_1st</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ff.o(.text.dbc_1st))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[d0]"></a>dbc_2nd</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ff.o(.text.dbc_2nd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dbc_2nd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[87]"></a>dir_alloc</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[8a]"></a>dir_clear</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4744<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[8e]"></a>dir_find</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 4928<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[89]"></a>dir_next</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[90]"></a>dir_register</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[88]"></a>dir_sdi</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[a7]"></a>find_volume</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[a0]"></a>follow_path</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 4968<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[91]"></a>gen_numname</STRONG> (Thumb, 428 bytes, Stack size 88 bytes, ff.o(.text.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gen_numname &rArr; dbc_1st
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[7c]"></a>get_fat</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[9a]"></a>get_ldnumber</STRONG> (Thumb, 192 bytes, Stack size 36 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[a1]"></a>ld_clust</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ld_clust &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[78]"></a>ld_dword</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ff.o(.text.ld_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[76]"></a>ld_word</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ff.o(.text.ld_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[9e]"></a>mount_volume</STRONG> (Thumb, 1104 bytes, Stack size 88 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[75]"></a>move_window</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[7d]"></a>put_fat</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[92]"></a>put_lfn</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, ff.o(.text.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_lfn &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a3]"></a>remove_chain</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 4840<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a2]"></a>st_clust</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st_clust &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[84]"></a>st_dword</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ff.o(.text.st_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[85]"></a>st_word</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(.text.st_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[8f]"></a>sum_sfn</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[a5]"></a>sync_fs</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[8b]"></a>sync_window</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 4696<LI>Call Chain = sync_window &rArr; disk_write &rArr; fs_write_data &rArr; flash_write_fast &rArr; flash_write &rArr; qspi_flash_program_page &rArr; qspi_flash_write_enable &rArr; qspi_autopolling &rArr; qspi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[7f]"></a>tchar2uni</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[98]"></a>validate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e1]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
